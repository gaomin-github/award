(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{205:function(e,t,i){"use strict";var s=i(79);i.n(s).a},415:function(e,t,i){"use strict";i.r(t);var s=i(118),o={data:()=>({renderer:null,scene:null,camera:null,cur_cube:null,group:null,cubes:[],movCube:null,movCubeStateY:.8,cameraPos:{cur:{x:0,y:0,z:0},next:{x:0,y:0,z:0}},dir:null,curMeshPosition:{x:0,y:0,z:0},xLight:null,yLight:null,zLIght:null,moveHandler:null}),mounted(){this._initRenderDom(),this.addCube(),this.addCube(),this._createMoveCube()},methods:{addCube(){this._createCube()},_initRenderDom(){this.scene=new s.Scene;let e=new s.AxisHelper(15);this.scene.add(e);let t=new s.DirectionalLight(16777215,1);t.position.set(8,10,6),this.scene.add(t),this.camera=new s.OrthographicCamera(window.innerWidth/-20,window.innerWidth/20,window.innerHeight/20,window.innerHeight/-20,1,1e3),this.camera.position.set(100,100,100),this.camera.lookAt(new s.Vector3(0,0,0)),this.renderer=new s.WebGLRenderer({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.$refs.renderDom.appendChild(this.renderer.domElement)},_getOrientation(){let e=Math.floor(10*Math.random());this.dir=e%3==0?"left":"right"},_createCube(){this.cubes&&this.cubes.length>0&&this._getOrientation(),this.cur_cube=new s.BoxGeometry(5,2,5);let e=new s.MeshPhongMaterial({color:16776960}),t=new s.Mesh(this.cur_cube,e);"left"===this.dir?(this.curMeshPosition={x:this.curMeshPosition.x-10,y:this.curMeshPosition.y,z:this.curMeshPosition.z},this.cameraPos.next=this.curMeshPosition):"right"===this.dir&&(this.curMeshPosition={x:this.curMeshPosition.x,y:this.curMeshPosition.y,z:this.curMeshPosition.z-10},this.cameraPos.next=this.curMeshPosition),t.position.set(this.curMeshPosition.x,this.curMeshPosition.y,this.curMeshPosition.z),this.cubes.push(this.cur_cube),this.scene.add(t)},_changeCamera(){this.cameraPos.cur.z>this.cameraPos.next.z?this.cameraPos.cur.z-=.2:this.cameraPos.cur.x>this.cameraPos.next.x&&(this.cameraPos.cur.x-=.2),this.camera.lookAt(new s.Vector3(this.cameraPos.cur.x,this.cameraPos.cur.y,this.cameraPos.cur.z)),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this._changeCamera)},_createMoveCube(){let e=new s.BoxGeometry(2,4,2),t=new s.MeshPhongMaterial(16773120);this.movCube=new s.Mesh(e,t),this.movCube.position.set(0,2,0),e.translate(0,1,0),this.scene.add(this.movCube)},startMove(){this.movCube.position.y>=2?(this.movCube.position.y+=this.movCubeStateY,"left"===this.dir&&this.movCube.position.x>this.cameraPos.next.x?this.movCube.position.x-=.5:"right"===this.dir&&this.movCube.position.z>this.cameraPos.next.z&&(this.movCube.position.z-=.5),this.movCubeStateY-=.04,this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.startMove)):(this.movCube.position.y=2,this.movCubeStateY=.8,this.addCube(),this._checkPosition())},animateMoveCube(){this.movCube.rotation.z<Math.PI/2&&(this.movCube.rotation.z+=.1),requestAnimationFrame(this.animateMoveCube)},_checkPosition(){},moveDown(){}}},n=(i(205),i(5)),r=Object(n.a)(o,(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("section",{ref:"renderDom"},[i("section",{staticClass:"handler"},[i("section",{staticClass:"cube-btn",on:{click:e.addCube}},[e._v("addCube btn")]),e._v(" "),i("section",{staticClass:"cube-btn",on:{click:e.startMove}},[e._v("move up")]),e._v(" "),i("section",{staticClass:"cube-btn",on:{click:e.animateMoveCube}},[e._v("animateMoveCube")])])])}),[],!1,null,"6b4ad948",null);t.default=r.exports},79:function(e,t,i){var s=i(7),o=i(80);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var n={insert:"head",singleton:!1},r=s(o,n),a=o.locals?o.locals:{};o.locals||e.hot.accept(80,(function(){var t=i(80);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[e.i,t,""]]),r(t)})),e.hot.dispose((function(){r()})),e.exports=a},80:function(e,t,i){(t=i(8)(!1)).push([e.i,".handler[data-v-6b4ad948]{position:absolute;top:10px;display:flex}.cube-btn[data-v-6b4ad948]{margin-right:15px;color:#fff;border:1px #fff solid;border-radius:5px;padding:0px 5px;cursor:pointer}\n",""]),e.exports=t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,