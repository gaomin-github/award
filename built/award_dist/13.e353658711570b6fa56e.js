(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{206:function(e,t,r){"use strict";function i(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,s,n){var a=this;this.onError=n||i;var o=new e.FileLoader(a.manager);o.setPath(this.path),o.load(t,(function(e){r(a.parse(e))}),s,n)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var i={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var i=r.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var i=this.vertices,s=this.object.geometry.vertices;s.push(i[e+0]),s.push(i[e+1]),s.push(i[e+2]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[t+2]),s.push(i[r+0]),s.push(i[r+1]),s.push(i[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var i=this.normals,s=this.object.geometry.normals;s.push(i[e+0]),s.push(i[e+1]),s.push(i[e+2]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[t+2]),s.push(i[r+0]),s.push(i[r+1]),s.push(i[r+2])},addUV:function(e,t,r){var i=this.uvs,s=this.object.geometry.uvs;s.push(i[e+0]),s.push(i[e+1]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[r+0]),s.push(i[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,i,s,n,a,o,h,l,d,u){var c,p=this.vertices.length,m=this.parseVertexIndex(e,p),f=this.parseVertexIndex(t,p),g=this.parseVertexIndex(r,p);if(void 0===i?this.addVertex(m,f,g):(c=this.parseVertexIndex(i,p),this.addVertex(m,f,c),this.addVertex(f,g,c)),void 0!==s){var v=this.uvs.length;m=this.parseUVIndex(s,v),f=this.parseUVIndex(n,v),g=this.parseUVIndex(a,v),void 0===i?this.addUV(m,f,g):(c=this.parseUVIndex(o,v),this.addUV(m,f,c),this.addUV(f,g,c))}if(void 0!==h){var b=this.normals.length;m=this.parseNormalIndex(h,b),f=h===l?m:this.parseNormalIndex(l,b),g=h===d?m:this.parseNormalIndex(d,b),void 0===i?this.addNormal(m,f,g):(c=this.parseNormalIndex(u,b),this.addNormal(m,f,c),this.addNormal(f,g,c))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,i=this.uvs.length,s=0,n=e.length;s<n;s++)this.addVertexLine(this.parseVertexIndex(e[s],r));var a=0;for(n=t.length;a<n;a++)this.addUVLine(this.parseUVIndex(t[a],i))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var i=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var s=t.split("\n"),n="",a="",o="",h=[],l="function"==typeof"".trimLeft,d=0,u=s.length;d<u;d++)if(n=s[d],0!==(n=l?n.trimLeft():n.trim()).length&&"#"!==(a=n.charAt(0)))if("v"===a)" "===(o=n.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(n))?i.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===o&&null!==(h=this.regexp.normal_pattern.exec(n))?i.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===o&&null!==(h=this.regexp.uv_pattern.exec(n))?i.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+n+"'");else if("f"===a)null!==(h=this.regexp.face_vertex_uv_normal.exec(n))?i.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(n))?i.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(n))?i.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(n))?i.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+n+"'");else if("l"===a){var c=n.substring(1).trim().split(" "),p=[],m=[];if(-1===n.indexOf("/"))p=c;else for(var f=0,g=c.length;f<g;f++){var v=c[f].split("/");""!==v[0]&&p.push(v[0]),""!==v[1]&&m.push(v[1])}i.addLineGeometry(p,m)}else if(null!==(h=this.regexp.object_pattern.exec(n))){var b=(" "+h[0].substr(1).trim()).substr(1);i.startObject(b)}else if(this.regexp.material_use_pattern.test(n))i.object.startMaterial(n.substring(7).trim(),i.materialLibraries);else if(this.regexp.material_library_pattern.test(n))i.materialLibraries.push(n.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(n))){var x=h[1].trim().toLowerCase();i.object.smooth="1"===x||"on"===x,(U=i.object.currentMaterial())&&(U.smooth=i.object.smooth)}else{if("\0"===n)continue;this.onError("Unexpected line: '"+n+"'")}i.finalize();var _=new e.Group;_.materialLibraries=[].concat(i.materialLibraries);for(d=0,u=i.objects.length;d<u;d++){var w=i.objects[d],j=w.geometry,y=w.materials,M="Line"===j.type;if(0!==j.vertices.length){var L=new e.BufferGeometry;L.addAttribute("position",new e.BufferAttribute(new Float32Array(j.vertices),3)),j.normals.length>0?L.addAttribute("normal",new e.BufferAttribute(new Float32Array(j.normals),3)):L.computeVertexNormals(),j.uvs.length>0&&L.addAttribute("uv",new e.BufferAttribute(new Float32Array(j.uvs),2));for(var V,E=[],F=0,I=y.length;F<I;F++){var A=y[F],U=void 0;if(null!==this.materials&&(U=this.materials.create(A.name),M&&U&&!(U instanceof e.LineBasicMaterial))){var B=new e.LineBasicMaterial;B.copy(U),U=B}U||((U=M?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=A.name),U.shading=A.smooth?e.SmoothShading:e.FlatShading,E.push(U)}if(E.length>1){for(F=0,I=y.length;F<I;F++){A=y[F];L.addGroup(A.groupStart,A.groupCount,F)}var N=new e.MultiMaterial(E);V=M?new e.LineSegments(L,N):new e.Mesh(L,N)}else V=M?new e.LineSegments(L,E[0]):new e.Mesh(L,E[0]);V.name=w.name,_.add(V)}}return r&&console.timeEnd("OBJLoader"),_}}}},416:function(e,t,r){"use strict";r.r(t);var i=r(118),s=r(206),n=r.n(s),a={data:()=>({scene:null,camera:null,renderer:null,fogNum:.01,geometry:null,particle:null,particles:[],group:null,clock:null,newMesh:null,meshes:[],dir:1}),mounted(){document.title="obj loader",this._initScene(),this._getObjData()},methods:{_initScene(){this.camera=new i.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,5e4),this.camera.position.set(100,100,800),this.scene=new i.Scene,this.scene.add(new i.AxisHelper(55)),this.clock=new i.Clock,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.$refs.renderDom.appendChild(this.renderer.domElement)},_initCube(){let e=new i.BoxBufferGeometry(1,1,1),t=new i.MeshBasicMaterial({color:65280}),r=new i.Mesh(e,t);this.scene.add(r)},_getObjData(){n()(i),(new i.OBJLoader).load("male02.obj",e=>{this.group=new i.Group,this.scene.add(this.group);let t=null;for(let r=0;r<e.children.length;r++){let s=e.children[r].geometry;s.attributes.position.setUsage(i.DynamicDrawUsage);let n=s.attributes.position;s.setAttribute("initPosition",n.clone());for(let e=0;e<n.count;e++)n.setXYZ(e,0,0,0);t=new i.Points(s,new i.PointsMaterial({size:3,color:16777215})),t.position.x=30,t.position.y=0,t.position.z=30,this.group.add(t),this.meshes.push(t)}this._renderAnimate()})},_renderAnimate(){this.fogNum>0?this.fogNum-=1e-4:this.fogNum<.5&&(this.fogNum+=1e-4),this.scene.fog=new i.FogExp2("#fff",this.fogNum),this.group.rotation.y-=.002;let e=0,t=0;for(let e=0;e<this.meshes.length;e++){t+=this.meshes[e].geometry.attributes.position.count}let r=100*this.clock.getDelta();for(let i=0;i<this.meshes.length;i++){let s=this.meshes[i],n=s.geometry.attributes.position,a=s.geometry.attributes.initPosition;for(let s=0;s<n.count;s++){let o=n.getX(s),h=n.getY(s),l=n.getZ(s);if(this.dir>0){let i=a.getX(s),d=a.getY(s),u=a.getZ(s),c=Math.abs(o-i),p=Math.abs(h-d),m=Math.abs(l-u);c+p+m>1?n.setXYZ(s,o+(i-o)/c*r*Math.random(),h+(d-h)/p*r*Math.random(),l+(u-l)/m*r*Math.random()):e++,e===t&&(this.dir=-1)}else{if(h>.1){a.getY(i);n.setXYZ(s,o+(.5-Math.random())*r,h+(.25-Math.random())*r,l+(.5-Math.random())*r)}else e++;e===t&&(this.dir=1)}}n.needsUpdate=!0}this.renderer.render(this.scene,this.camera),requestAnimationFrame(this._renderAnimate)}}},o=r(5),h=Object(o.a)(a,(function(){var e=this.$createElement;return(this._self._c||e)("section",{ref:"renderDom"})}),[],!1,null,"02c81d94",null);t.default=h.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUtb2JqLWxvYWRlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ncmFudWxlcy9pbmRleC52dWU/YWU1MCIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JhbnVsZXMvaW5kZXgudnVlPzAyYjIiLCJ3ZWJwYWNrOi8vL3NyYy9ncmFudWxlcy9pbmRleC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyYW51bGVzL2luZGV4LnZ1ZSJdLCJuYW1lcyI6WyJkZWZhdWx0T25FcnJvciIsImVyciIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRIUkVFIiwiT0JKTG9hZGVyIiwibWFuYWdlciIsInRoaXMiLCJ1bmRlZmluZWQiLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJtYXRlcmlhbHMiLCJyZWdleHAiLCJ2ZXJ0ZXhfcGF0dGVybiIsIm5vcm1hbF9wYXR0ZXJuIiwidXZfcGF0dGVybiIsImZhY2VfdmVydGV4IiwiZmFjZV92ZXJ0ZXhfdXYiLCJmYWNlX3ZlcnRleF91dl9ub3JtYWwiLCJmYWNlX3ZlcnRleF9ub3JtYWwiLCJvYmplY3RfcGF0dGVybiIsInNtb290aGluZ19wYXR0ZXJuIiwibWF0ZXJpYWxfbGlicmFyeV9wYXR0ZXJuIiwibWF0ZXJpYWxfdXNlX3BhdHRlcm4iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImxvYWQiLCJ1cmwiLCJvbkxvYWQiLCJvblByb2dyZXNzIiwib25FcnJvciIsInNjb3BlIiwibG9hZGVyIiwiRmlsZUxvYWRlciIsInNldFBhdGgiLCJwYXRoIiwidGV4dCIsInBhcnNlIiwidmFsdWUiLCJzZXRNYXRlcmlhbHMiLCJfY3JlYXRlUGFyc2VyU3RhdGUiLCJzdGF0ZSIsIm9iamVjdHMiLCJvYmplY3QiLCJ2ZXJ0aWNlcyIsIm5vcm1hbHMiLCJ1dnMiLCJtYXRlcmlhbExpYnJhcmllcyIsInN0YXJ0T2JqZWN0IiwibmFtZSIsImZyb21EZWNsYXJhdGlvbiIsInByZXZpb3VzTWF0ZXJpYWwiLCJjdXJyZW50TWF0ZXJpYWwiLCJfZmluYWxpemUiLCJnZW9tZXRyeSIsInNtb290aCIsInN0YXJ0TWF0ZXJpYWwiLCJsaWJyYXJpZXMiLCJwcmV2aW91cyIsImluaGVyaXRlZCIsImdyb3VwQ291bnQiLCJzcGxpY2UiLCJpbmRleCIsIm1hdGVyaWFsIiwibGVuZ3RoIiwibXRsbGliIiwiQXJyYXkiLCJpc0FycmF5IiwiZ3JvdXBTdGFydCIsImdyb3VwRW5kIiwiY2xvbmUiLCJjbG9uZWQiLCJiaW5kIiwicHVzaCIsImVuZCIsImxhc3RNdWx0aU1hdGVyaWFsIiwibWkiLCJkZWNsYXJlZCIsImZpbmFsaXplIiwicGFyc2VWZXJ0ZXhJbmRleCIsImxlbiIsInBhcnNlSW50IiwicGFyc2VOb3JtYWxJbmRleCIsInBhcnNlVVZJbmRleCIsImFkZFZlcnRleCIsImEiLCJiIiwiYyIsInNyYyIsImRzdCIsImFkZFZlcnRleExpbmUiLCJhZGROb3JtYWwiLCJhZGRVViIsImFkZFVWTGluZSIsImFkZEZhY2UiLCJkIiwidWEiLCJ1YiIsInVjIiwidWQiLCJuYSIsIm5iIiwibmMiLCJuZCIsImlkIiwidkxlbiIsImlhIiwiaWIiLCJpYyIsInV2TGVuIiwibkxlbiIsImFkZExpbmVHZW9tZXRyeSIsInR5cGUiLCJ2aSIsImwiLCJ1dmkiLCJkZWJ1ZyIsImNvbnNvbGUiLCJ0aW1lIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJsaW5lcyIsInNwbGl0IiwibGluZSIsImxpbmVGaXJzdENoYXIiLCJsaW5lU2Vjb25kQ2hhciIsInJlc3VsdCIsInRyaW1MZWZ0IiwiaSIsInRyaW0iLCJjaGFyQXQiLCJleGVjIiwicGFyc2VGbG9hdCIsImxpbmVQYXJ0cyIsInN1YnN0cmluZyIsImxpbmVWZXJ0aWNlcyIsImxpbmVVVnMiLCJsaSIsImxsZW4iLCJwYXJ0cyIsInN1YnN0ciIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImNvbnRhaW5lciIsIkdyb3VwIiwiY29uY2F0IiwiaXNMaW5lIiwiYnVmZmVyZ2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsImFkZEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJBcnJheSIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwibWVzaCIsImNyZWF0ZWRNYXRlcmlhbHMiLCJtaUxlbiIsInNvdXJjZU1hdGVyaWFsIiwiY3JlYXRlIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJtYXRlcmlhbExpbmUiLCJjb3B5IiwiTWVzaFBob25nTWF0ZXJpYWwiLCJzaGFkaW5nIiwiU21vb3RoU2hhZGluZyIsIkZsYXRTaGFkaW5nIiwiYWRkR3JvdXAiLCJtdWx0aU1hdGVyaWFsIiwiTXVsdGlNYXRlcmlhbCIsIkxpbmVTZWdtZW50cyIsIk1lc2giLCJhZGQiLCJ0aW1lRW5kIiwiZGF0YSIsInNjZW5lIiwiY2FtZXJhIiwicmVuZGVyZXIiLCJmb2dOdW0iLCJwYXJ0aWNsZSIsInBhcnRpY2xlcyIsImdyb3VwIiwiY2xvY2siLCJuZXdNZXNoIiwibWVzaGVzIiwiZGlyIiwiZG9jdW1lbnQiLCJ0aXRsZSIsIl9pbml0U2NlbmUiLCJfZ2V0T2JqRGF0YSIsIm1ldGhvZHMiLCJwb3NpdGlvbiIsInNldCIsInNldFNpemUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCIkcmVmcyIsInJlbmRlckRvbSIsImFwcGVuZENoaWxkIiwiZG9tRWxlbWVudCIsImN1YmUiLCJtYXRlcmlhbEN1YmUiLCJjdWJlTWVzaCIsImNoaWxkcmVuIiwiYXR0cmlidXRlcyIsInNldFVzYWdlIiwicG9zaXRpb25zIiwic2V0QXR0cmlidXRlIiwiaiIsImNvdW50Iiwic2V0WFlaIiwieCIsInkiLCJ6IiwiX3JlbmRlckFuaW1hdGUiLCJmb2ciLCJyb3RhdGlvbiIsInZlcnRpY2FsQ291bnQiLCJhbGxQb2ludENvdW50IiwiZGVsdGEiLCJnZXREZWx0YSIsIm1lc2hQb3NpdGlvbnMiLCJpbml0TWVzaFBvc2l0aW9ucyIsImluaXRQb3NpdGlvbiIsInB4IiwiZ2V0WCIsInB5IiwiZ2V0WSIsInB6IiwiZ2V0WiIsIml4IiwiaXkiLCJpeiIsImR4IiwiTWF0aCIsImFicyIsImR5IiwiZHoiLCJuZWVkc1VwZGF0ZSIsInJlbmRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNvbXBvbmVudCIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfc2VsZiIsIl9jIiwicmVmIl0sIm1hcHBpbmdzIjoiMkZBRUEsU0FBU0EsRUFBZUMsR0FDdEIsTUFBTSxJQUFJQyxNQUFNRCxHQUdsQkUsRUFBT0MsUUFBVSxTQUFVQyxHQU16QkEsRUFBTUMsVUFBWSxTQUFVQyxHQUUxQkMsS0FBS0QsYUFBc0JFLElBQVpGLEVBQXdCQSxFQUFVRixFQUFNSyxzQkFFdkRGLEtBQUtHLFVBQVksS0FFakJILEtBQUtJLE9BQVMsQ0FFWkMsZUFBZ0IsMEVBRWhCQyxlQUFnQiwyRUFFaEJDLFdBQVksb0RBRVpDLFlBQWEsa0RBRWJDLGVBQWdCLHNGQUVoQkMsc0JBQXVCLDBIQUV2QkMsbUJBQW9CLDhGQUVwQkMsZUFBZ0IsZ0JBRWhCQyxrQkFBbUIsb0JBRW5CQyx5QkFBMEIsV0FFMUJDLHFCQUFzQixhQUkxQmxCLEVBQU1DLFVBQVVrQixVQUFZLENBRTFCQyxZQUFhcEIsRUFBTUMsVUFFbkJvQixLQUFNLFNBQWNDLEVBQUtDLEVBQVFDLEVBQVlDLEdBRTNDLElBQUlDLEVBQVF2QixLQUNaQSxLQUFLc0IsUUFBVUEsR0FBVzlCLEVBRTFCLElBQUlnQyxFQUFTLElBQUkzQixFQUFNNEIsV0FBV0YsRUFBTXhCLFNBQ3hDeUIsRUFBT0UsUUFBUTFCLEtBQUsyQixNQUNwQkgsRUFBT04sS0FBS0MsR0FBSyxTQUFVUyxHQUV6QlIsRUFBT0csRUFBTU0sTUFBTUQsTUFDbEJQLEVBQVlDLElBR2pCSSxRQUFTLFNBQWlCSSxHQUV4QjlCLEtBQUsyQixLQUFPRyxHQUdkQyxhQUFjLFNBQXNCNUIsR0FFbENILEtBQUtHLFVBQVlBLEdBR25CNkIsbUJBQW9CLFdBRWxCLElBQUlDLEVBQVEsQ0FDVkMsUUFBUyxHQUNUQyxPQUFRLEdBRVJDLFNB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NTcwYjZmYTU2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IoZXJyKSB7XG4gIHRocm93IG5ldyBFcnJvcihlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUSFJFRSkge1xuXG4gIC8qKlxuICAgKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICAgKi9cblxuICBUSFJFRS5PQkpMb2FkZXIgPSBmdW5jdGlvbiAobWFuYWdlcikge1xuXG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlciAhPT0gdW5kZWZpbmVkID8gbWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuICAgIHRoaXMubWF0ZXJpYWxzID0gbnVsbDtcblxuICAgIHRoaXMucmVnZXhwID0ge1xuICAgICAgLy8gdiBmbG9hdCBmbG9hdCBmbG9hdFxuICAgICAgdmVydGV4X3BhdHRlcm46IC9edlxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKylcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAvLyB2biBmbG9hdCBmbG9hdCBmbG9hdFxuICAgICAgbm9ybWFsX3BhdHRlcm46IC9edm5cXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKVxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKykvLFxuICAgICAgLy8gdnQgZmxvYXQgZmxvYXRcbiAgICAgIHV2X3BhdHRlcm46IC9ednRcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAvLyBmIHZlcnRleCB2ZXJ0ZXggdmVydGV4XG4gICAgICBmYWNlX3ZlcnRleDogL15mXFxzKygtP1xcZCspXFxzKygtP1xcZCspXFxzKygtP1xcZCspKD86XFxzKygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvdXYgdmVydGV4L3V2IHZlcnRleC91dlxuICAgICAgZmFjZV92ZXJ0ZXhfdXY6IC9eZlxccysoLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcLygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbFxuICAgICAgZmFjZV92ZXJ0ZXhfdXZfbm9ybWFsOiAvXmZcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspKT8vLFxuICAgICAgLy8gZiB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbCB2ZXJ0ZXgvL25vcm1hbFxuICAgICAgZmFjZV92ZXJ0ZXhfbm9ybWFsOiAvXmZcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspXFxzKygtP1xcZCspXFwvXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKSk/LyxcbiAgICAgIC8vIG8gb2JqZWN0X25hbWUgfCBnIGdyb3VwX25hbWVcbiAgICAgIG9iamVjdF9wYXR0ZXJuOiAvXltvZ11cXHMqKC4rKT8vLFxuICAgICAgLy8gcyBib29sZWFuXG4gICAgICBzbW9vdGhpbmdfcGF0dGVybjogL15zXFxzKyhcXGQrfG9ufG9mZikvLFxuICAgICAgLy8gbXRsbGliIGZpbGVfcmVmZXJlbmNlXG4gICAgICBtYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm46IC9ebXRsbGliIC8sXG4gICAgICAvLyB1c2VtdGwgbWF0ZXJpYWxfbmFtZVxuICAgICAgbWF0ZXJpYWxfdXNlX3BhdHRlcm46IC9edXNlbXRsIC9cbiAgICB9O1xuICB9O1xuXG4gIFRIUkVFLk9CSkxvYWRlci5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvcjogVEhSRUUuT0JKTG9hZGVyLFxuXG4gICAgbG9hZDogZnVuY3Rpb24gbG9hZCh1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcikge1xuXG4gICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgdGhpcy5vbkVycm9yID0gb25FcnJvciB8fCBkZWZhdWx0T25FcnJvcjtcblxuICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKHNjb3BlLm1hbmFnZXIpO1xuICAgICAgbG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcbiAgICAgIGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKHRleHQpIHtcblxuICAgICAgICBvbkxvYWQoc2NvcGUucGFyc2UodGV4dCkpO1xuICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvcik7XG4gICAgfSxcblxuICAgIHNldFBhdGg6IGZ1bmN0aW9uIHNldFBhdGgodmFsdWUpIHtcblxuICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgfSxcblxuICAgIHNldE1hdGVyaWFsczogZnVuY3Rpb24gc2V0TWF0ZXJpYWxzKG1hdGVyaWFscykge1xuXG4gICAgICB0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcbiAgICB9LFxuXG4gICAgX2NyZWF0ZVBhcnNlclN0YXRlOiBmdW5jdGlvbiBfY3JlYXRlUGFyc2VyU3RhdGUoKSB7XG5cbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgb2JqZWN0czogW10sXG4gICAgICAgIG9iamVjdDoge30sXG5cbiAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICBub3JtYWxzOiBbXSxcbiAgICAgICAgdXZzOiBbXSxcblxuICAgICAgICBtYXRlcmlhbExpYnJhcmllczogW10sXG5cbiAgICAgICAgc3RhcnRPYmplY3Q6IGZ1bmN0aW9uIHN0YXJ0T2JqZWN0KG5hbWUsIGZyb21EZWNsYXJhdGlvbikge1xuXG4gICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgb2JqZWN0IChpbml0aWFsIGZyb20gcmVzZXQpIGlzIG5vdCBmcm9tIGEgZy9vIGRlY2xhcmF0aW9uIGluIHRoZSBwYXJzZWRcbiAgICAgICAgICAvLyBmaWxlLiBXZSBuZWVkIHRvIHVzZSBpdCBmb3IgdGhlIGZpcnN0IHBhcnNlZCBnL28gdG8ga2VlcCB0aGluZ3MgaW4gc3luYy5cbiAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LmZyb21EZWNsYXJhdGlvbiA9IGZyb21EZWNsYXJhdGlvbiAhPT0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHByZXZpb3VzTWF0ZXJpYWwgPSB0aGlzLm9iamVjdCAmJiB0eXBlb2YgdGhpcy5vYmplY3QuY3VycmVudE1hdGVyaWFsID09PSAnZnVuY3Rpb24nID8gdGhpcy5vYmplY3QuY3VycmVudE1hdGVyaWFsKCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5fZmluYWxpemUodHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vYmplY3QgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgZnJvbURlY2xhcmF0aW9uOiBmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlLFxuXG4gICAgICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgICAgICB2ZXJ0aWNlczogW10sXG4gICAgICAgICAgICAgIG5vcm1hbHM6IFtdLFxuICAgICAgICAgICAgICB1dnM6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF0ZXJpYWxzOiBbXSxcbiAgICAgICAgICAgIHNtb290aDogdHJ1ZSxcblxuICAgICAgICAgICAgc3RhcnRNYXRlcmlhbDogZnVuY3Rpb24gc3RhcnRNYXRlcmlhbChuYW1lLCBsaWJyYXJpZXMpIHtcblxuICAgICAgICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLl9maW5hbGl6ZShmYWxzZSk7XG5cbiAgICAgICAgICAgICAgLy8gTmV3IHVzZW10bCBkZWNsYXJhdGlvbiBvdmVyd3JpdGVzIGFuIGluaGVyaXRlZCBtYXRlcmlhbCwgZXhjZXB0IGlmIGZhY2VzIHdlcmUgZGVjbGFyZWRcbiAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIG1hdGVyaWFsLCB0aGVuIGl0IG11c3QgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG4gICAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiAocHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCkpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnNwbGljZShwcmV2aW91cy5pbmRleCwgMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgIG10bGxpYjogQXJyYXkuaXNBcnJheShsaWJyYXJpZXMpICYmIGxpYnJhcmllcy5sZW5ndGggPiAwID8gbGlicmFyaWVzW2xpYnJhcmllcy5sZW5ndGggLSAxXSA6ICcnLFxuICAgICAgICAgICAgICAgIHNtb290aDogcHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLnNtb290aCA6IHRoaXMuc21vb3RoLFxuICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQ6IHByZXZpb3VzICE9PSB1bmRlZmluZWQgPyBwcmV2aW91cy5ncm91cEVuZCA6IDAsXG4gICAgICAgICAgICAgICAgZ3JvdXBFbmQ6IC0xLFxuICAgICAgICAgICAgICAgIGdyb3VwQ291bnQ6IC0xLFxuICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2UsXG5cbiAgICAgICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gaW5kZXggOiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG10bGxpYjogdGhpcy5tdGxsaWIsXG4gICAgICAgICAgICAgICAgICAgIHNtb290aDogdGhpcy5zbW9vdGgsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb3VudDogLTEsXG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXRlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lLmJpbmQoY2xvbmVkKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGN1cnJlbnRNYXRlcmlhbDogZnVuY3Rpb24gY3VycmVudE1hdGVyaWFsKCkge1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWxzW3RoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIF9maW5hbGl6ZTogZnVuY3Rpb24gX2ZpbmFsaXplKGVuZCkge1xuXG4gICAgICAgICAgICAgIHZhciBsYXN0TXVsdGlNYXRlcmlhbCA9IHRoaXMuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgIGlmIChsYXN0TXVsdGlNYXRlcmlhbCAmJiBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCA9PT0gLTEpIHtcblxuICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kID0gdGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggLyAzO1xuICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwQ291bnQgPSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCAtIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwU3RhcnQ7XG4gICAgICAgICAgICAgICAgbGFzdE11bHRpTWF0ZXJpYWwuaW5oZXJpdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZ25vcmUgb2JqZWN0cyB0YWlsIG1hdGVyaWFscyBpZiBubyBmYWNlIGRlY2xhcmF0aW9ucyBmb2xsb3dlZCB0aGVtIGJlZm9yZSBhIG5ldyBvL2cgc3RhcnRlZC5cbiAgICAgICAgICAgICAgaWYgKGVuZCAmJiB0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtaSA9IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDE7IG1pID49IDA7IG1pLS0pIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGVyaWFsc1ttaV0uZ3JvdXBDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnNwbGljZShtaSwgMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gR3VhcmFudGVlIGF0IGxlYXN0IG9uZSBlbXB0eSBtYXRlcmlhbCwgdGhpcyBtYWtlcyB0aGUgY3JlYXRpb24gbGF0ZXIgbW9yZSBzdHJhaWdodCBmb3J3YXJkLlxuICAgICAgICAgICAgICBpZiAoZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgIHNtb290aDogdGhpcy5zbW9vdGhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBsYXN0TXVsdGlNYXRlcmlhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gSW5oZXJpdCBwcmV2aW91cyBvYmplY3RzIG1hdGVyaWFsLlxuICAgICAgICAgIC8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLlxuICAgICAgICAgIC8vIElmIGEgdXNlbXRsIGRlY2xhcmF0aW9uIGlzIGVuY291bnRlcmVkIHdoaWxlIHRoaXMgbmV3IG9iamVjdCBpcyBiZWluZyBwYXJzZWQsIGl0IHdpbGxcbiAgICAgICAgICAvLyBvdmVyd3JpdGUgdGhlIGluaGVyaXRlZCBtYXRlcmlhbC4gRXhjZXB0aW9uIGJlaW5nIHRoYXQgdGhlcmUgd2FzIGFscmVhZHkgZmFjZSBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG5cbiAgICAgICAgICBpZiAocHJldmlvdXNNYXRlcmlhbCAmJiBwcmV2aW91c01hdGVyaWFsLm5hbWUgJiYgdHlwZW9mIHByZXZpb3VzTWF0ZXJpYWwuY2xvbmUgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICB2YXIgZGVjbGFyZWQgPSBwcmV2aW91c01hdGVyaWFsLmNsb25lKDApO1xuICAgICAgICAgICAgZGVjbGFyZWQuaW5oZXJpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lm1hdGVyaWFscy5wdXNoKGRlY2xhcmVkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm9iamVjdHMucHVzaCh0aGlzLm9iamVjdCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIGZpbmFsaXplKCkge1xuXG4gICAgICAgICAgaWYgKHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5fZmluYWxpemUgPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgdGhpcy5vYmplY3QuX2ZpbmFsaXplKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZVZlcnRleEluZGV4OiBmdW5jdGlvbiBwYXJzZVZlcnRleEluZGV4KHZhbHVlLCBsZW4pIHtcblxuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgcmV0dXJuIChpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAzKSAqIDM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VOb3JtYWxJbmRleDogZnVuY3Rpb24gcGFyc2VOb3JtYWxJbmRleCh2YWx1ZSwgbGVuKSB7XG5cbiAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgIHJldHVybiAoaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMykgKiAzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlVVZJbmRleDogZnVuY3Rpb24gcGFyc2VVVkluZGV4KHZhbHVlLCBsZW4pIHtcblxuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgcmV0dXJuIChpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAyKSAqIDI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVmVydGV4OiBmdW5jdGlvbiBhZGRWZXJ0ZXgoYSwgYiwgYykge1xuXG4gICAgICAgICAgdmFyIHNyYyA9IHRoaXMudmVydGljZXM7XG4gICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5LnZlcnRpY2VzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAyXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVmVydGV4TGluZTogZnVuY3Rpb24gYWRkVmVydGV4TGluZShhKSB7XG5cbiAgICAgICAgICB2YXIgc3JjID0gdGhpcy52ZXJ0aWNlcztcbiAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudmVydGljZXM7XG5cbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDFdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDJdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGROb3JtYWw6IGZ1bmN0aW9uIGFkZE5vcm1hbChhLCBiLCBjKSB7XG5cbiAgICAgICAgICB2YXIgc3JjID0gdGhpcy5ub3JtYWxzO1xuICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS5ub3JtYWxzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAyXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAyXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVVY6IGZ1bmN0aW9uIGFkZFVWKGEsIGIsIGMpIHtcblxuICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnV2cztcbiAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuXG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2EgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2IgKyAxXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAwXSk7XG4gICAgICAgICAgZHN0LnB1c2goc3JjW2MgKyAxXSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkVVZMaW5lOiBmdW5jdGlvbiBhZGRVVkxpbmUoYSkge1xuXG4gICAgICAgICAgdmFyIHNyYyA9IHRoaXMudXZzO1xuICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7XG5cbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDBdKTtcbiAgICAgICAgICBkc3QucHVzaChzcmNbYSArIDFdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRGYWNlOiBmdW5jdGlvbiBhZGRGYWNlKGEsIGIsIGMsIGQsIHVhLCB1YiwgdWMsIHVkLCBuYSwgbmIsIG5jLCBuZCkge1xuXG4gICAgICAgICAgdmFyIHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuICAgICAgICAgIHZhciBpYSA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleChhLCB2TGVuKTtcbiAgICAgICAgICB2YXIgaWIgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoYiwgdkxlbik7XG4gICAgICAgICAgdmFyIGljID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KGMsIHZMZW4pO1xuICAgICAgICAgIHZhciBpZDtcblxuICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWEsIGliLCBpYyk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoZCwgdkxlbik7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVmVydGV4KGlhLCBpYiwgaWQpO1xuICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoaWIsIGljLCBpZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHVhICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgdmFyIHV2TGVuID0gdGhpcy51dnMubGVuZ3RoO1xuXG4gICAgICAgICAgICBpYSA9IHRoaXMucGFyc2VVVkluZGV4KHVhLCB1dkxlbik7XG4gICAgICAgICAgICBpYiA9IHRoaXMucGFyc2VVVkluZGV4KHViLCB1dkxlbik7XG4gICAgICAgICAgICBpYyA9IHRoaXMucGFyc2VVVkluZGV4KHVjLCB1dkxlbik7XG5cbiAgICAgICAgICAgIGlmIChkID09PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICB0aGlzLmFkZFVWKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VVVkluZGV4KHVkLCB1dkxlbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5hZGRVVihpYSwgaWIsIGlkKTtcbiAgICAgICAgICAgICAgdGhpcy5hZGRVVihpYiwgaWMsIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobmEgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAvLyBOb3JtYWxzIGFyZSBtYW55IHRpbWVzIHRoZSBzYW1lLiBJZiBzbywgc2tpcCBmdW5jdGlvbiBjYWxsIGFuZCBwYXJzZUludC5cbiAgICAgICAgICAgIHZhciBuTGVuID0gdGhpcy5ub3JtYWxzLmxlbmd0aDtcbiAgICAgICAgICAgIGlhID0gdGhpcy5wYXJzZU5vcm1hbEluZGV4KG5hLCBuTGVuKTtcblxuICAgICAgICAgICAgaWIgPSBuYSA9PT0gbmIgPyBpYSA6IHRoaXMucGFyc2VOb3JtYWxJbmRleChuYiwgbkxlbik7XG4gICAgICAgICAgICBpYyA9IG5hID09PSBuYyA/IGlhIDogdGhpcy5wYXJzZU5vcm1hbEluZGV4KG5jLCBuTGVuKTtcblxuICAgICAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGlhLCBpYiwgaWMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBpZCA9IHRoaXMucGFyc2VOb3JtYWxJbmRleChuZCwgbkxlbik7XG5cbiAgICAgICAgICAgICAgdGhpcy5hZGROb3JtYWwoaWEsIGliLCBpZCk7XG4gICAgICAgICAgICAgIHRoaXMuYWRkTm9ybWFsKGliLCBpYywgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRMaW5lR2VvbWV0cnk6IGZ1bmN0aW9uIGFkZExpbmVHZW9tZXRyeSh2ZXJ0aWNlcywgdXZzKSB7XG5cbiAgICAgICAgICB0aGlzLm9iamVjdC5nZW9tZXRyeS50eXBlID0gJ0xpbmUnO1xuXG4gICAgICAgICAgdmFyIHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgICB2YXIgdXZMZW4gPSB0aGlzLnV2cy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKHZhciB2aSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IHZpIDwgbDsgdmkrKykge1xuXG4gICAgICAgICAgICB0aGlzLmFkZFZlcnRleExpbmUodGhpcy5wYXJzZVZlcnRleEluZGV4KHZlcnRpY2VzW3ZpXSwgdkxlbikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIHV2aSA9IDAsIGwgPSB1dnMubGVuZ3RoOyB1dmkgPCBsOyB1dmkrKykge1xuXG4gICAgICAgICAgICB0aGlzLmFkZFVWTGluZSh0aGlzLnBhcnNlVVZJbmRleCh1dnNbdXZpXSwgdXZMZW4pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfTtcblxuICAgICAgc3RhdGUuc3RhcnRPYmplY3QoJycsIGZhbHNlKTtcblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG5cbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodGV4dCwgZGVidWcpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVidWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlYnVnID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUudGltZSgnT0JKTG9hZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2NyZWF0ZVBhcnNlclN0YXRlKCk7XG5cbiAgICAgIGlmICh0ZXh0LmluZGV4T2YoJ1xcclxcbicpICE9PSAtMSkge1xuXG4gICAgICAgIC8vIFRoaXMgaXMgZmFzdGVyIHRoYW4gU3RyaW5nLnNwbGl0IHdpdGggcmVnZXggdGhhdCBzcGxpdHMgb24gYm90aFxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgJ1xcbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dC5pbmRleE9mKCdcXFxcXFxuJykgIT09IC0xKSB7XG5cbiAgICAgICAgLy8gam9pbiBsaW5lcyBzZXBhcmF0ZWQgYnkgYSBsaW5lIGNvbnRpbnVhdGlvbiBjaGFyYWN0ZXIgKFxcKVxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFxcXFxuL2csICcnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgbGluZSA9ICcnLFxuICAgICAgICAgIGxpbmVGaXJzdENoYXIgPSAnJyxcbiAgICAgICAgICBsaW5lU2Vjb25kQ2hhciA9ICcnO1xuICAgICAgdmFyIGxpbmVMZW5ndGggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAvLyBGYXN0ZXIgdG8ganVzdCB0cmltIGxlZnQgc2lkZSBvZiB0aGUgbGluZS4gVXNlIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhciB0cmltTGVmdCA9IHR5cGVvZiAnJy50cmltTGVmdCA9PT0gJ2Z1bmN0aW9uJztcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblxuICAgICAgICBsaW5lID0gbGluZXNbaV07XG5cbiAgICAgICAgbGluZSA9IHRyaW1MZWZ0ID8gbGluZS50cmltTGVmdCgpIDogbGluZS50cmltKCk7XG5cbiAgICAgICAgbGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuXG4gICAgICAgIGlmIChsaW5lTGVuZ3RoID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICBsaW5lRmlyc3RDaGFyID0gbGluZS5jaGFyQXQoMCk7XG5cbiAgICAgICAgLy8gQHRvZG8gaW52b2tlIHBhc3NlZCBpbiBoYW5kbGVyIGlmIGFueVxuICAgICAgICBpZiAobGluZUZpcnN0Q2hhciA9PT0gJyMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAobGluZUZpcnN0Q2hhciA9PT0gJ3YnKSB7XG5cbiAgICAgICAgICBsaW5lU2Vjb25kQ2hhciA9IGxpbmUuY2hhckF0KDEpO1xuXG4gICAgICAgICAgaWYgKGxpbmVTZWNvbmRDaGFyID09PSAnICcgJiYgKHJlc3VsdCA9IHRoaXMucmVnZXhwLnZlcnRleF9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAxICAgICAgMiAgICAgIDNcbiAgICAgICAgICAgIC8vIFtcInYgMS4wIDIuMCAzLjBcIiwgXCIxLjBcIiwgXCIyLjBcIiwgXCIzLjBcIl1cblxuICAgICAgICAgICAgc3RhdGUudmVydGljZXMucHVzaChwYXJzZUZsb2F0KHJlc3VsdFsxXSksIHBhcnNlRmxvYXQocmVzdWx0WzJdKSwgcGFyc2VGbG9hdChyZXN1bHRbM10pKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpbmVTZWNvbmRDaGFyID09PSAnbicgJiYgKHJlc3VsdCA9IHRoaXMucmVnZXhwLm5vcm1hbF9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgMSAgICAgIDIgICAgICAzXG4gICAgICAgICAgICAvLyBbXCJ2biAxLjAgMi4wIDMuMFwiLCBcIjEuMFwiLCBcIjIuMFwiLCBcIjMuMFwiXVxuXG4gICAgICAgICAgICBzdGF0ZS5ub3JtYWxzLnB1c2gocGFyc2VGbG9hdChyZXN1bHRbMV0pLCBwYXJzZUZsb2F0KHJlc3VsdFsyXSksIHBhcnNlRmxvYXQocmVzdWx0WzNdKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5lU2Vjb25kQ2hhciA9PT0gJ3QnICYmIChyZXN1bHQgPSB0aGlzLnJlZ2V4cC51dl9wYXR0ZXJuLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAxICAgICAgMlxuICAgICAgICAgICAgLy8gW1widnQgMC4xIDAuMlwiLCBcIjAuMVwiLCBcIjAuMlwiXVxuXG4gICAgICAgICAgICBzdGF0ZS51dnMucHVzaChwYXJzZUZsb2F0KHJlc3VsdFsxXSksIHBhcnNlRmxvYXQocmVzdWx0WzJdKSk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5vbkVycm9yKFwiVW5leHBlY3RlZCB2ZXJ0ZXgvbm9ybWFsL3V2IGxpbmU6ICdcIiArIGxpbmUgKyBcIidcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmVGaXJzdENoYXIgPT09IFwiZlwiKSB7XG5cbiAgICAgICAgICBpZiAoKHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X3V2X25vcm1hbC5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsXG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICAgNyAgICA4ICAgIDkgICAxMCAgICAgICAgIDExICAgICAgICAgMTJcbiAgICAgICAgICAgIC8vIFtcImYgMS8xLzEgMi8yLzIgMy8zLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjFcIiwgXCIyXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cblxuICAgICAgICAgICAgc3RhdGUuYWRkRmFjZShyZXN1bHRbMV0sIHJlc3VsdFs0XSwgcmVzdWx0WzddLCByZXN1bHRbMTBdLCByZXN1bHRbMl0sIHJlc3VsdFs1XSwgcmVzdWx0WzhdLCByZXN1bHRbMTFdLCByZXN1bHRbM10sIHJlc3VsdFs2XSwgcmVzdWx0WzldLCByZXN1bHRbMTJdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKChyZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF91di5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91diB2ZXJ0ZXgvdXYgdmVydGV4L3V2XG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICA3ICAgICAgICAgIDhcbiAgICAgICAgICAgIC8vIFtcImYgMS8xIDIvMiAzLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCByZXN1bHRbMl0sIHJlc3VsdFs0XSwgcmVzdWx0WzZdLCByZXN1bHRbOF0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X25vcm1hbC5leGVjKGxpbmUpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAvLyBmIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsXG4gICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICA3ICAgICAgICAgIDhcbiAgICAgICAgICAgIC8vIFtcImYgMS8vMSAyLy8yIDMvLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbM10sIHJlc3VsdFs1XSwgcmVzdWx0WzddLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlc3VsdFsyXSwgcmVzdWx0WzRdLCByZXN1bHRbNl0sIHJlc3VsdFs4XSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXguZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgLy8gZiB2ZXJ0ZXggdmVydGV4IHZlcnRleFxuICAgICAgICAgICAgLy8gMCAgICAgICAgICAgIDEgICAgMiAgICAzICAgNFxuICAgICAgICAgICAgLy8gW1wiZiAxIDIgM1wiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCB1bmRlZmluZWRdXG5cbiAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UocmVzdWx0WzFdLCByZXN1bHRbMl0sIHJlc3VsdFszXSwgcmVzdWx0WzRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJVbmV4cGVjdGVkIGZhY2UgbGluZTogJ1wiICsgbGluZSArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGluZUZpcnN0Q2hhciA9PT0gXCJsXCIpIHtcblxuICAgICAgICAgIHZhciBsaW5lUGFydHMgPSBsaW5lLnN1YnN0cmluZygxKS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgIHZhciBsaW5lVmVydGljZXMgPSBbXSxcbiAgICAgICAgICAgICAgbGluZVVWcyA9IFtdO1xuXG4gICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZihcIi9cIikgPT09IC0xKSB7XG5cbiAgICAgICAgICAgIGxpbmVWZXJ0aWNlcyA9IGxpbmVQYXJ0cztcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBmb3IgKHZhciBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpKyspIHtcblxuICAgICAgICAgICAgICB2YXIgcGFydHMgPSBsaW5lUGFydHNbbGldLnNwbGl0KFwiL1wiKTtcblxuICAgICAgICAgICAgICBpZiAocGFydHNbMF0gIT09IFwiXCIpIGxpbmVWZXJ0aWNlcy5wdXNoKHBhcnRzWzBdKTtcbiAgICAgICAgICAgICAgaWYgKHBhcnRzWzFdICE9PSBcIlwiKSBsaW5lVVZzLnB1c2gocGFydHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZS5hZGRMaW5lR2VvbWV0cnkobGluZVZlcnRpY2VzLCBsaW5lVVZzKTtcbiAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAub2JqZWN0X3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgIC8vIG8gb2JqZWN0X25hbWVcbiAgICAgICAgICAvLyBvclxuICAgICAgICAgIC8vIGcgZ3JvdXBfbmFtZVxuXG4gICAgICAgICAgLy8gV09SS0FST1VORDogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2OVxuICAgICAgICAgIC8vIHZhciBuYW1lID0gcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpO1xuICAgICAgICAgIHZhciBuYW1lID0gKFwiIFwiICsgcmVzdWx0WzBdLnN1YnN0cigxKS50cmltKCkpLnN1YnN0cigxKTtcblxuICAgICAgICAgIHN0YXRlLnN0YXJ0T2JqZWN0KG5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmVnZXhwLm1hdGVyaWFsX3VzZV9wYXR0ZXJuLnRlc3QobGluZSkpIHtcblxuICAgICAgICAgIC8vIG1hdGVyaWFsXG5cbiAgICAgICAgICBzdGF0ZS5vYmplY3Quc3RhcnRNYXRlcmlhbChsaW5lLnN1YnN0cmluZyg3KS50cmltKCksIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZ2V4cC5tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4udGVzdChsaW5lKSkge1xuXG4gICAgICAgICAgLy8gbXRsIGZpbGVcblxuICAgICAgICAgIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzLnB1c2gobGluZS5zdWJzdHJpbmcoNykudHJpbSgpKTtcbiAgICAgICAgfSBlbHNlIGlmICgocmVzdWx0ID0gdGhpcy5yZWdleHAuc21vb3RoaW5nX3BhdHRlcm4uZXhlYyhsaW5lKSkgIT09IG51bGwpIHtcblxuICAgICAgICAgIC8vIHNtb290aCBzaGFkaW5nXG5cbiAgICAgICAgICAvLyBAdG9kbyBIYW5kbGUgZmlsZXMgdGhhdCBoYXZlIHZhcnlpbmcgc21vb3RoIHZhbHVlcyBmb3IgYSBzZXQgb2YgZmFjZXMgaW5zaWRlIG9uZSBnZW9tZXRyeSxcbiAgICAgICAgICAvLyBidXQgZG9lcyBub3QgZGVmaW5lIGEgdXNlbXRsIGZvciBlYWNoIGZhY2Ugc2V0LlxuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGRldGVjdGVkIGFuZCBhIGR1bW15IG1hdGVyaWFsIGNyZWF0ZWQgKGxhdGVyIE11bHRpTWF0ZXJpYWwgYW5kIGdlb21ldHJ5IGdyb3VwcykuXG4gICAgICAgICAgLy8gVGhpcyByZXF1aXJlcyBzb21lIGNhcmUgdG8gbm90IGNyZWF0ZSBleHRyYSBtYXRlcmlhbCBvbiBlYWNoIHNtb290aCB2YWx1ZSBmb3IgXCJub3JtYWxcIiBvYmogZmlsZXMuXG4gICAgICAgICAgLy8gd2hlcmUgZXhwbGljaXQgdXNlbXRsIGRlZmluZXMgZ2VvbWV0cnkgZ3JvdXBzLlxuICAgICAgICAgIC8vIEV4YW1wbGUgYXNzZXQ6IGV4YW1wbGVzL21vZGVscy9vYmovY2VyYmVydXMvQ2VyYmVydXMub2JqXG5cbiAgICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgc3RhdGUub2JqZWN0LnNtb290aCA9IHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICdvbic7XG5cbiAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBzdGF0ZS5vYmplY3QuY3VycmVudE1hdGVyaWFsKCk7XG4gICAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsLnNtb290aCA9IHN0YXRlLm9iamVjdC5zbW9vdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgLy8gSGFuZGxlIG51bGwgdGVybWluYXRlZCBmaWxlcyB3aXRob3V0IGV4Y2VwdGlvblxuICAgICAgICAgIGlmIChsaW5lID09PSAnXFwwJykgY29udGludWU7XG5cbiAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJVbmV4cGVjdGVkIGxpbmU6ICdcIiArIGxpbmUgKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhdGUuZmluYWxpemUoKTtcblxuICAgICAgdmFyIGNvbnRhaW5lciA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgY29udGFpbmVyLm1hdGVyaWFsTGlicmFyaWVzID0gW10uY29uY2F0KHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdGF0ZS5vYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXG4gICAgICAgIHZhciBvYmplY3QgPSBzdGF0ZS5vYmplY3RzW2ldO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG4gICAgICAgIHZhciBtYXRlcmlhbHMgPSBvYmplY3QubWF0ZXJpYWxzO1xuICAgICAgICB2YXIgaXNMaW5lID0gZ2VvbWV0cnkudHlwZSA9PT0gJ0xpbmUnO1xuXG4gICAgICAgIC8vIFNraXAgby9nIGxpbmUgZGVjbGFyYXRpb25zIHRoYXQgZGlkIG5vdCBmb2xsb3cgd2l0aCBhbnkgZmFjZXNcbiAgICAgICAgaWYgKGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgdmFyIGJ1ZmZlcmdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cbiAgICAgICAgYnVmZmVyZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS52ZXJ0aWNlcyksIDMpKTtcblxuICAgICAgICBpZiAoZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS5ub3JtYWxzKSwgMykpO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZW9tZXRyeS51dnMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgYnVmZmVyZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS51dnMpLCAyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgbWF0ZXJpYWxzXG5cbiAgICAgICAgdmFyIGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBtaSA9IDAsIG1pTGVuID0gbWF0ZXJpYWxzLmxlbmd0aDsgbWkgPCBtaUxlbjsgbWkrKykge1xuXG4gICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5tYXRlcmlhbHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFscy5jcmVhdGUoc291cmNlTWF0ZXJpYWwubmFtZSk7XG5cbiAgICAgICAgICAgIC8vIG10bCBldGMuIGxvYWRlcnMgcHJvYmFibHkgY2FuJ3QgY3JlYXRlIGxpbmUgbWF0ZXJpYWxzIGNvcnJlY3RseSwgY29weSBwcm9wZXJ0aWVzIHRvIGEgbGluZSBtYXRlcmlhbC5cbiAgICAgICAgICAgIGlmIChpc0xpbmUgJiYgbWF0ZXJpYWwgJiYgIShtYXRlcmlhbCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKSkge1xuXG4gICAgICAgICAgICAgIHZhciBtYXRlcmlhbExpbmUgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgbWF0ZXJpYWxMaW5lLmNvcHkobWF0ZXJpYWwpO1xuICAgICAgICAgICAgICBtYXRlcmlhbCA9IG1hdGVyaWFsTGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gIWlzTGluZSA/IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpIDogbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgICAgICBtYXRlcmlhbC5uYW1lID0gc291cmNlTWF0ZXJpYWwubmFtZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRlcmlhbC5zaGFkaW5nID0gc291cmNlTWF0ZXJpYWwuc21vb3RoID8gVEhSRUUuU21vb3RoU2hhZGluZyA6IFRIUkVFLkZsYXRTaGFkaW5nO1xuXG4gICAgICAgICAgY3JlYXRlZE1hdGVyaWFscy5wdXNoKG1hdGVyaWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBtZXNoXG5cbiAgICAgICAgdmFyIG1lc2g7XG5cbiAgICAgICAgaWYgKGNyZWF0ZWRNYXRlcmlhbHMubGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgZm9yICh2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW47IG1pKyspIHtcblxuICAgICAgICAgICAgdmFyIHNvdXJjZU1hdGVyaWFsID0gbWF0ZXJpYWxzW21pXTtcbiAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEdyb3VwKHNvdXJjZU1hdGVyaWFsLmdyb3VwU3RhcnQsIHNvdXJjZU1hdGVyaWFsLmdyb3VwQ291bnQsIG1pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbXVsdGlNYXRlcmlhbCA9IG5ldyBUSFJFRS5NdWx0aU1hdGVyaWFsKGNyZWF0ZWRNYXRlcmlhbHMpO1xuICAgICAgICAgIG1lc2ggPSAhaXNMaW5lID8gbmV3IFRIUkVFLk1lc2goYnVmZmVyZ2VvbWV0cnksIG11bHRpTWF0ZXJpYWwpIDogbmV3IFRIUkVFLkxpbmVTZWdtZW50cyhidWZmZXJnZW9tZXRyeSwgbXVsdGlNYXRlcmlhbCk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBtZXNoID0gIWlzTGluZSA/IG5ldyBUSFJFRS5NZXNoKGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWzBdKSA6IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzaC5uYW1lID0gb2JqZWN0Lm5hbWU7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZChtZXNoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnT0JKTG9hZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gIH07XG59OyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyx7cmVmOlwicmVuZGVyRG9tXCJ9KX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICA8c2VjdGlvbiByZWY9XCJyZW5kZXJEb21cIj48L3NlY3Rpb24+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCAqIGFzIFRocmVlIGZyb20gXCJ0aHJlZVwiO1xyXG5pbXBvcnQgT0JKTG9hZGVyIGZyb20gXCJ0aHJlZS1vYmotbG9hZGVyXCI7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2NlbmU6IG51bGwsXHJcbiAgICAgIGNhbWVyYTogbnVsbCxcclxuICAgICAgcmVuZGVyZXI6IG51bGwsXHJcbiAgICAgIGZvZ051bTogMC4wMSxcclxuICAgICAgZ2VvbWV0cnk6IG51bGwsXHJcbiAgICAgIHBhcnRpY2xlOiBudWxsLFxyXG4gICAgICBwYXJ0aWNsZXM6IFtdLFxyXG4gICAgICBncm91cDogbnVsbCxcclxuICAgICAgY2xvY2s6IG51bGwsXHJcbiAgICAgIG5ld01lc2g6IG51bGwsXHJcbiAgICAgIG1lc2hlczogW10sXHJcbiAgICAgIGRpcjogMSAvL+WQkeS4ilxyXG4gICAgfTtcclxuICB9LFxyXG4gIG1vdW50ZWQoKSB7XHJcbiAgICBkb2N1bWVudC50aXRsZSA9IFwib2JqIGxvYWRlclwiO1xyXG4gICAgdGhpcy5faW5pdFNjZW5lKCk7XHJcbiAgICAvLyB0aGlzLl9pbml0Q3ViZSgpO1xyXG4gICAgdGhpcy5fZ2V0T2JqRGF0YSgpO1xyXG4gICAgLy8gdGhpcy5fcmVuZGVyQW5pbWF0ZSgpO1xyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgX2luaXRTY2VuZSgpIHtcclxuICAgICAgLy8gICDnm7jmnLpcclxuICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgVGhyZWUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgICAgNDUsXHJcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsXHJcbiAgICAgICAgMSxcclxuICAgICAgICA1MDAwMFxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi5zZXQoMTAwLCAxMDAsIDgwMCk7XHJcbiAgICAgIC8vICAg5Zy65pmvXHJcbiAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVGhyZWUuU2NlbmUoKTtcclxuICAgICAgdGhpcy5zY2VuZS5hZGQobmV3IFRocmVlLkF4aXNIZWxwZXIoNTUpKTtcclxuXHJcbiAgICAgIC8vICAgbGV0IGRpckxpZ2h0ID0gbmV3IFRocmVlLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xyXG4gICAgICAvLyAgIGRpckxpZ2h0LnBvc2l0aW9uLnNldCg4LCAxMCwgNik7XHJcbiAgICAgIC8vICAgdGhpcy5zY2VuZS5hZGQoZGlyTGlnaHQpO1xyXG4gICAgICAvLyDorqHml7blmahcclxuICAgICAgdGhpcy5jbG9jayA9IG5ldyBUaHJlZS5DbG9jaygpO1xyXG4gICAgICAvLyAgIOa4suafk+WZqFxyXG4gICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRocmVlLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgbGV0IHJlbkRvbSA9IHRoaXMuJHJlZnMucmVuZGVyRG9tO1xyXG4gICAgICByZW5Eb20uYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgIH0sXHJcbiAgICBfaW5pdEN1YmUoKSB7XHJcbiAgICAgIGxldCBjdWJlID0gbmV3IFRocmVlLkJveEJ1ZmZlckdlb21ldHJ5KDEsIDEsIDEpO1xyXG4gICAgICBsZXQgbWF0ZXJpYWxDdWJlID0gbmV3IFRocmVlLk1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4MDBmZjAwIH0pO1xyXG4gICAgICBsZXQgY3ViZU1lc2ggPSBuZXcgVGhyZWUuTWVzaChjdWJlLCBtYXRlcmlhbEN1YmUpO1xyXG4gICAgICB0aGlzLnNjZW5lLmFkZChjdWJlTWVzaCk7XHJcbiAgICB9LFxyXG4gICAgX2dldE9iakRhdGEoKSB7XHJcbiAgICAgIE9CSkxvYWRlcihUaHJlZSk7XHJcbiAgICAgIGxldCBsb2FkZXIgPSBuZXcgVGhyZWUuT0JKTG9hZGVyKCk7XHJcbiAgICAgIGxvYWRlci5sb2FkKFwibWFsZTAyLm9ialwiLCBtb2R1bGUgPT4ge1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVGhyZWUuR3JvdXAoKTtcclxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmdyb3VwKTtcclxuICAgICAgICAvLyB0aGlzLmdlb21ldHJ5ID0gbW9kdWxlLmNoaWxkcmVuWzFdLmdlb21ldHJ5O1xyXG5cclxuICAgICAgICAvLyBsZXQgcG9zaXRpb25zID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gc3ByaXRl5a6e546wXHJcbiAgICAgICAgLy8gbGV0IG1hdGVyaWFsID0gbmV3IFRocmVlLlNwcml0ZU1hdGVyaWFsKHtcclxuICAgICAgICAvLyAgICAgY29sb3I6IDB4MDgwODA4ICogTWF0aC5yYW5kb20oKSArIDB4MDgwODA4LFxyXG4gICAgICAgIC8vICAgICBzaXplOiAyXHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgLy8gbGV0IHBhcnRpY2xlID0gbmV3IFRocmVlLlNwcml0ZShtYXRlcmlhbCk7XHJcbiAgICAgICAgLy8gcGFydGljbGUucG9zaXRpb24ueCA9IHBvc2l0aW9ucy5nZXRYKGkpO1xyXG4gICAgICAgIC8vIHBhcnRpY2xlLnBvc2l0aW9uLnkgPSAtMTA7XHJcbiAgICAgICAgLy8gcGFydGljbGUucG9zaXRpb24ueiA9IHBvc2l0aW9ucy5nZXRaKGkpO1xyXG4gICAgICAgIC8vIHRoaXMuZ3JvdXAuYWRkKHBhcnRpY2xlKTtcclxuICAgICAgICAvLyB0aGlzLnBhcnRpY2xlcy5wdXNoKHBhcnRpY2xlKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gcG9pbnTlrp7njrBcclxuICAgICAgICBsZXQgbWVzaCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGxldCBnZW9tZXRyeSA9IG1vZHVsZS5jaGlsZHJlbltpXS5nZW9tZXRyeTtcclxuICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uc2V0VXNhZ2UoVGhyZWUuRHluYW1pY0RyYXdVc2FnZSk7XHJcbiAgICAgICAgICBsZXQgcG9zaXRpb25zID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuICAgICAgICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImluaXRQb3NpdGlvblwiLCBwb3NpdGlvbnMuY2xvbmUoKSk7XHJcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvc2l0aW9ucy5jb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9ucy5zZXRYWVooaiwgMCwgMCwgMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBtZXNoID0gbmV3IFRocmVlLlBvaW50cyhcclxuICAgICAgICAgICAgZ2VvbWV0cnksXHJcbiAgICAgICAgICAgIG5ldyBUaHJlZS5Qb2ludHNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgc2l6ZTogMyxcclxuICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmZcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBtZXNoLnBvc2l0aW9uLnggPSAzMDtcclxuICAgICAgICAgIG1lc2gucG9zaXRpb24ueSA9IDA7XHJcbiAgICAgICAgICBtZXNoLnBvc2l0aW9uLnogPSAzMDtcclxuXHJcbiAgICAgICAgICB0aGlzLmdyb3VwLmFkZChtZXNoKTtcclxuICAgICAgICAgIHRoaXMubWVzaGVzLnB1c2gobWVzaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlbmRlckFuaW1hdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckFuaW1hdGUoKSB7XHJcbiAgICAgIGlmICh0aGlzLmZvZ051bSA+IDApIHtcclxuICAgICAgICB0aGlzLmZvZ051bSAtPSAwLjAwMDE7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5mb2dOdW0gPCAwLjUpIHtcclxuICAgICAgICB0aGlzLmZvZ051bSArPSAwLjAwMDE7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zY2VuZS5mb2cgPSBuZXcgVGhyZWUuRm9nRXhwMihcIiNmZmZcIiwgdGhpcy5mb2dOdW0pO1xyXG5cclxuICAgICAgdGhpcy5ncm91cC5yb3RhdGlvbi55IC09IDAuMDAyO1xyXG4gICAgICBsZXQgdmVydGljYWxDb3VudCA9IDA7XHJcbiAgICAgIGxldCBhbGxQb2ludENvdW50ID0gMDtcclxuICAgICAgLy8gICDojrflj5blnZDmoIfngrnmlbDph49cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBtZXNoID0gdGhpcy5tZXNoZXNbaV07XHJcbiAgICAgICAgbGV0IG1lc2hQb3NpdGlvbnMgPSBtZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcbiAgICAgICAgYWxsUG9pbnRDb3VudCArPSBtZXNoUG9zaXRpb25zLmNvdW50O1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBkZWx0YSA9IHRoaXMuY2xvY2suZ2V0RGVsdGEoKSAqIDEwMDtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBtZXNoID0gdGhpcy5tZXNoZXNbaV07XHJcblxyXG4gICAgICAgIGxldCBtZXNoUG9zaXRpb25zID0gbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG4gICAgICAgIGxldCBpbml0TWVzaFBvc2l0aW9ucyA9IG1lc2guZ2VvbWV0cnkuYXR0cmlidXRlcy5pbml0UG9zaXRpb247XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtZXNoUG9zaXRpb25zLmNvdW50OyBqKyspIHtcclxuICAgICAgICAgIGxldCBweCA9IG1lc2hQb3NpdGlvbnMuZ2V0WChqKTtcclxuICAgICAgICAgIGxldCBweSA9IG1lc2hQb3NpdGlvbnMuZ2V0WShqKTtcclxuICAgICAgICAgIGxldCBweiA9IG1lc2hQb3NpdGlvbnMuZ2V0WihqKTtcclxuICAgICAgICAgIGlmICh0aGlzLmRpciA+IDApIHtcclxuICAgICAgICAgICAgLy8gICDlkJHkuIpcclxuICAgICAgICAgICAgbGV0IGl4ID0gaW5pdE1lc2hQb3NpdGlvbnMuZ2V0WChqKTtcclxuICAgICAgICAgICAgbGV0IGl5ID0gaW5pdE1lc2hQb3NpdGlvbnMuZ2V0WShqKTtcclxuICAgICAgICAgICAgbGV0IGl6ID0gaW5pdE1lc2hQb3NpdGlvbnMuZ2V0WihqKTtcclxuICAgICAgICAgICAgbGV0IGR4ID0gTWF0aC5hYnMocHggLSBpeCk7XHJcbiAgICAgICAgICAgIGxldCBkeSA9IE1hdGguYWJzKHB5IC0gaXkpO1xyXG4gICAgICAgICAgICBsZXQgZHogPSBNYXRoLmFicyhweiAtIGl6KTtcclxuICAgICAgICAgICAgaWYgKGR4ICsgZHkgKyBkeiA+IDEpIHtcclxuICAgICAgICAgICAgICBtZXNoUG9zaXRpb25zLnNldFhZWihcclxuICAgICAgICAgICAgICAgIGosXHJcbiAgICAgICAgICAgICAgICBweCArICgoaXggLSBweCkgLyBkeCkgKiBkZWx0YSAqIE1hdGgucmFuZG9tKCksXHJcbiAgICAgICAgICAgICAgICBweSArICgoaXkgLSBweSkgLyBkeSkgKiBkZWx0YSAqIE1hdGgucmFuZG9tKCksXHJcbiAgICAgICAgICAgICAgICBweiArICgoaXogLSBweikgLyBkeikgKiBkZWx0YSAqIE1hdGgucmFuZG9tKClcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHZlcnRpY2FsQ291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmVydGljYWxDb3VudCA9PT0gYWxsUG9pbnRDb3VudCkgdGhpcy5kaXIgPSAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAg5ZCR5LiLXHJcbiAgICAgICAgICAgIGlmIChweSA+IDAuMSkge1xyXG4gICAgICAgICAgICAgIGxldCBpeSA9IGluaXRNZXNoUG9zaXRpb25zLmdldFkoaSk7XHJcbiAgICAgICAgICAgICAgbWVzaFBvc2l0aW9ucy5zZXRYWVooXHJcbiAgICAgICAgICAgICAgICBqLFxyXG4gICAgICAgICAgICAgICAgcHggKyAoMC41IC0gTWF0aC5yYW5kb20oKSkgKiBkZWx0YSxcclxuICAgICAgICAgICAgICAgIHB5ICsgKDAuMjUgLSBNYXRoLnJhbmRvbSgpKSAqIGRlbHRhLFxyXG4gICAgICAgICAgICAgICAgcHogKyAoMC41IC0gTWF0aC5yYW5kb20oKSkgKiBkZWx0YVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmVydGljYWxDb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2ZXJ0aWNhbENvdW50ID09PSBhbGxQb2ludENvdW50KSB0aGlzLmRpciA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lc2hQb3NpdGlvbnMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9yZW5kZXJBbmltYXRlKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+PC9zdHlsZT5cclxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDJjODFkOTQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjAyYzgxZDk0XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==