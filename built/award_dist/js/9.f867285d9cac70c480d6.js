(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{106:function(e,t,s){"use strict";var c=s(40);s.n(c).a},107:function(e,t,s){"use strict";var c=s(41);s.n(c).a},108:function(e,t,s){"use strict";var c=s(42);s.n(c).a},117:function(e,t,s){"use strict";s.r(t);var c=s(3),a=s(16),u=s(13),i={data:()=>({touchStartX:0,touchEndX:0,iconInfos:[{bg:"rgba(248,169,97,1)",icon:"book"},{bg:"rgba(172,97,248,1)",icon:"language"},{bg:"rgba(247,35,111,1)",icon:"cutlery"},{bg:"rgba(0,178,255,1)",icon:"bell"}]}),props:{schedule:{type:Object,default:()=>({})},order:{type:Number,default:0}},model:{prop:"schedule",event:"update"},computed:{...Object(c.d)("weekly",["editing"])},mounted(){console.log(this.order,73)},methods:{...Object(c.c)("weekly",["updateCurSchedule","updateEditing","initTask","insertSchedule","updateSchedule","deleteSchedule"]),editScheduleContent(){this.updateCurSchedule(this.schedule),this.updateEditing(!0)},editScheduleNum(){this.$emit("editScheduleNum",this.schedule)},handleTouchStart(e){this.touchStartX=e.targetTouches[0].pageX,console.log(e.targetTouches[0].pageX,"-----start----")},handleTouchMove(e){this.touchEndX=e.targetTouches[0].pageX,console.log(e.targetTouches[0].pageX,"-----move----")},handleTouchEnd(e){console.log("handleTouchEnd"),console.log(`touchStartX:${this.touchStartX},toucheEndX:${this.touchEndX}`)}}},n=(s(106),s(4)),l=Object(n.a)(i,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{class:["schedule-wrapper schedule-item",e.order%2==0?"odd":"even"],on:{touchstart:e.handleTouchStart,touchmove:e.handleTouchMove,touchend:e.handleTouchEnd,click:e.editScheduleContent}},[s("i",{class:["icon","fa","fa-"+e.iconInfos[e.order%4].icon],style:{background:e.iconInfos[e.order%4].bg}}),e._v(" "),s("div",{class:["content",e.schedule.content?"":"content_blank"]},[e._v("\n    "+e._s(e.schedule.content||"add some schedules ~")+"\n")]),e._v(" "),s("div",{staticClass:"grade"})])}),[],!1,null,"07afeb42",null).exports,d={props:{score:{type:Number,default:0}}},r=(s(107),{components:{headerTool:()=>s.e(2).then(s.bind(null,139)),schedule:l,circleChart:Object(n.a)(d,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"circle-chart-wrapper"},[t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg"}},[t("circle",{staticClass:"circle_path_bg"}),this._v(" "),t("circle",{staticClass:"circle_path",attrs:{"stroke-dasharray":200*this.score+" 500"}}),this._v(" "),1===this.score?t("path",{staticClass:"circle_mark_full",attrs:{d:"M 25 23 L 30 38 L 48 20"}}):t("text",{staticClass:"circle_mark",attrs:{x:"23",y:"35"}},[this._v("\n      "+this._s(Math.ceil(100*this.score))+"\n    ")])])])}),[],!1,null,"09a6f4a4",null).exports},data:()=>({}),computed:{...Object(c.d)("weekly",["scheduleList","taskId","curUser"]),...Object(c.b)("weekly",["totalValue","score"])},mounted(){this._initTask()},beforeDestroy(){this._saveTask()},methods:{...Object(c.c)("weekly",["initTask","insertSchedule","updateSchedule","deleteSchedule","updateCurUser"]),back(){let e=[];e=this.scheduleList&&this.scheduleList.length>1?this.scheduleList.filter((e,t)=>!!(e.content&&e.content.length>0)):this.scheduleList,this.initTask({taskId:this.taskId,schedules:e}),this._saveTask(),this.updateCurUser(null)},_initTask(){u.a.get("/task/task?userId="+this.curUser.userId).then(e=>{200===e.status&&e.data?(this.initTask(e.data[0]),console.log(this.scheduleList,104)):u.a.get("/task/createTask?userId="+this.curUser.userId).then(e=>{200===e.status&&e.data&&this.initTask(e.data)})})},addSchedule(){let e={subId:Math.random(),content:"",worth:null,process:null};this.insertSchedule(e)},editScheduleNum(e){Object(a.a)(()=>{e=this._checkNum(e),this.updateSchedule(e),this._saveTask()},500)()},_saveTask(){let e=encodeURIComponent(JSON.stringify(this.scheduleList));u.a.get(`/task/updateTask?taskId=${this.taskId}&scheduleStr=${e}`).then(e=>{if(200===e.status)return e.data})},_checkNum:e=>(Number(e.worth)<Number(e.process)||Number(e.worth)<0||Number(e.process)<0?e.errStatus=!0:e.errStatus=!1,e)}}),h=(s(108),Object(n.a)(r,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"task-wrapper"},[s("header",{staticClass:"user"}),e._v(" "),s("div",{staticClass:"content"},[s("div",{staticClass:"title"},[e._v("\n                Your Schedules\n            ")]),e._v(" "),e.scheduleList?s("div",{staticClass:"schedule"},e._l(e.scheduleList,(function(t,c){return s("schedule",{key:t.subId,staticClass:"schedule-item",attrs:{order:c},on:{editScheduleNum:e.editScheduleNum,deleteSchedule:e.deleteSchedule},model:{value:e.scheduleList[c],callback:function(t){e.$set(e.scheduleList,c,t)},expression:"scheduleList[index]"}})})),1):e._e()]),e._v(" "),s("i",{staticClass:"icon fa fa-plus",on:{click:e.addSchedule}})])}),[],!1,null,"84810196",null));t.default=h.exports},13:function(e,t,s){"use strict";var c=s(15);let a=s.n(c).a.create({timeout:3e4,headers:{}});t.a=a},16:function(e,t,s){"use strict";s.d(t,"a",(function(){return a}));let c=(new Date).getTime();function a(e,t){return function(){(new Date).getTime()-c<=t||(c=(new Date).getTime(),e(arguments))}}},40:function(e,t,s){},41:function(e,t,s){},42:function(e,t,s){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,