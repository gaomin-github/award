(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{14:function(t,e,n){"use strict";n.r(e);var o={components:{lottieComponent:n(47).default},mounted(){document.title="lottie Demo"},data:()=>({jsUrlList:["./q8-bg-3.json"]})},s=(n(67),n(1)),i=Object(s.a)(o,(function(){var t=this.$createElement,e=this._self._c||t;return e("section",{staticClass:"animate-wrapper"},[this._v("\n    this is lottie img test 12345\n    "),this._l(this.jsUrlList,(function(t,n){return e("section",{key:n},[e("lottie-component",{staticClass:"img-item",attrs:{jsUrl:t}})],1)}))],2)}),[],!1,null,"4ed37d9d",null);e.default=i.exports},18:function(t,e,n){},19:function(t,e,n){},47:function(t,e,n){"use strict";n.r(e);var o=n(64),s=n.n(o),i={props:{jsUrl:{type:String,default:""}},data:()=>({remoteJsonUrl:"http://192.168.31.252:9080/lottie.json",remoteJsUrl:"http://192.168.31.252:9080/jsDemoA.js",jsonImgUrl:"./q4-bg.json",style:{height:""}}),mounted(){this._loadJsonImg()},methods:{_loadJsonImg(){let t=this;this.$refs.lottieCon;n(65)(""+this.jsUrl).then(e=>{this.style={height:e.h/2+"px"},requestAnimationFrame(()=>{console.log(this.style,44),s.a.loadAnimation({container:t.$refs.lottieCon,renderer:"canvas",loop:!1,autoplay:!0,animationData:e,className:"canvas-default",rendererSettings:{}})})})},_loadRemoteJs(){let t=document.createElement("script");t.src=this.jsUrl,window.executeJson=t=>{console.log("executeJson",t,26)},document.getElementsByTagName("head")[0].append(t)},_loadRemoteJson(){},_loadLocalJson(){}}},r=(n(66),n(1)),a=Object(r.a)(i,(function(){var t=this.$createElement;return(this._self._c||t)("section",{ref:"lottieCon",staticClass:"lottie-wrapper",style:this.style})}),[],!1,null,"ac43d0c6",null);e.default=a.exports},65:function(t,e,n){var o={".":[14,9],"./":[14,9],"./index":[14,9],"./index.vue":[14,9],"./jsDemo":[57,7,4],"./jsDemo.js":[57,7,4],"./lottieComponent":[47,9],"./lottieComponent.vue":[47,9],"./q4-bg":[58,3,6],"./q4-bg.json":[58,3,6],"./q8-bg-3":[59,3,7],"./q8-bg-3.json":[59,3,7]};function s(t){if(!n.o(o,t))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}));var e=o[t],s=e[0];return Promise.all(e.slice(2).map(n.e)).then((function(){return n.t(s,e[1])}))}s.keys=function(){return Object.keys(o)},s.id=65,t.exports=s},66:function(t,e,n){"use strict";var o=n(18);n.n(o).a},67:function(t,e,n){"use strict";var o=n(19);n.n(o).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,