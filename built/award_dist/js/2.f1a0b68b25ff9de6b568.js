(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,function(t,e,n){"use strict";n.r(e);var s=[{id:1,msg:1},{id:2,msg:2}],i={components:{},data:()=>({timeMsg:"this is timeMsg",count:1}),computed:{configList:function(){return s}},mounted(){},methods:{getConfigList(){}}};n(6);var o=function(t,e,n,s,i,o,r,a){var c,d="function"==typeof t?t.options:t;if(e&&(d.render=e,d.staticRenderFns=n,d._compiled=!0),s&&(d.functional=!0),o&&(d._scopeId="data-v-"+o),r?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(r)},d._ssrRegister=c):i&&(c=a?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(d.functional){d._injectStyles=c;var _=d.render;d.render=function(t,e){return c.call(e),_(t,e)}}else{var p=d.beforeCreate;d.beforeCreate=p?[].concat(p,c):[c]}return{exports:t,options:d}}(i,(function(){var t=this.$createElement,e=this._self._c||t;return e("section",{staticClass:"test-wrapper"},[this._v("\n test_index vue file\n "+this._s(this.configList)+"\n "),e("img",{attrs:{src:n(4)}}),this._v(" "),e("img",{attrs:{src:n(5)}})])}),[],!1,null,"6e43d880",null);e.default=o.exports},function(t,e,n){},function(t,e,n){t.exports=n.p+"award_dist/imgs/01_cb089a0_01.jpg"},function(t,e,n){t.exports=n.p+"award_dist/imgs/02_e5e064f_01.png"},function(t,e,n){"use strict";var s=n(3);n.n(s).a}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,