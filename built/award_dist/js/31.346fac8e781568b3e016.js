(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{127:function(e,t,r){"use strict";r.r(t);var i=r(48),s=r(69),n=r.n(s),a={data:()=>({scene:null,camera:null,renderer:null,fogNum:.01,geometry:null,particle:null,particles:[],group:null,clock:null,newMesh:null,meshes:[],dir:1}),mounted(){document.title="obj loader",this._initScene(),this._getObjData()},methods:{_initScene(){this.camera=new i.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,5e4),this.camera.position.set(100,100,800),this.scene=new i.Scene,this.scene.add(new i.AxisHelper(55)),this.clock=new i.Clock,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.$refs.renderDom.appendChild(this.renderer.domElement)},_initCube(){let e=new i.BoxBufferGeometry(1,1,1),t=new i.MeshBasicMaterial({color:65280}),r=new i.Mesh(e,t);this.scene.add(r)},_getObjData(){n()(i),(new i.OBJLoader).load("male02.obj",e=>{this.group=new i.Group,this.scene.add(this.group);let t=null;for(let r=0;r<e.children.length;r++){let s=e.children[r].geometry;s.attributes.position.setUsage(i.DynamicDrawUsage);let n=s.attributes.position;s.setAttribute("initPosition",n.clone());for(let e=0;e<n.count;e++)n.setXYZ(e,0,0,0);t=new i.Points(s,new i.PointsMaterial({size:3,color:16777215})),t.position.x=30,t.position.y=0,t.position.z=30,this.group.add(t),this.meshes.push(t)}this._renderAnimate()})},_renderAnimate(){this.fogNum>0?this.fogNum-=1e-4:this.fogNum<.5&&(this.fogNum+=1e-4),this.scene.fog=new i.FogExp2("#fff",this.fogNum),this.group.rotation.y-=.002;let e=0,t=0;for(let e=0;e<this.meshes.length;e++){t+=this.meshes[e].geometry.attributes.position.count}let r=100*this.clock.getDelta();for(let i=0;i<this.meshes.length;i++){let s=this.meshes[i],n=s.geometry.attributes.position,a=s.geometry.attributes.initPosition;for(let s=0;s<n.count;s++){let o=n.getX(s),h=n.getY(s),l=n.getZ(s);if(this.dir>0){let i=a.getX(s),d=a.getY(s),u=a.getZ(s),c=Math.abs(o-i),p=Math.abs(h-d),m=Math.abs(l-u);c+p+m>1?n.setXYZ(s,o+(i-o)/c*r*Math.random(),h+(d-h)/p*r*Math.random(),l+(u-l)/m*r*Math.random()):e++,e===t&&(this.dir=-1)}else{if(h>.1){a.getY(i);n.setXYZ(s,o+(.5-Math.random())*r,h+(.25-Math.random())*r,l+(.5-Math.random())*r)}else e++;e===t&&(this.dir=1)}}n.needsUpdate=!0}this.renderer.render(this.scene,this.camera),requestAnimationFrame(this._renderAnimate)}}},o=r(1),h=Object(o.a)(a,(function(){var e=this.$createElement;return(this._self._c||e)("section",{ref:"renderDom"})}),[],!1,null,"02c81d94",null);t.default=h.exports},69:function(e,t,r){"use strict";function i(e){throw new Error(e)}e.exports=function(e){e.OBJLoader=function(t){this.manager=void 0!==t?t:e.DefaultLoadingManager,this.materials=null,this.regexp={vertex_pattern:/^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,normal_pattern:/^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,uv_pattern:/^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,face_vertex:/^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,face_vertex_uv:/^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,face_vertex_uv_normal:/^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,face_vertex_normal:/^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,object_pattern:/^[og]\s*(.+)?/,smoothing_pattern:/^s\s+(\d+|on|off)/,material_library_pattern:/^mtllib /,material_use_pattern:/^usemtl /}},e.OBJLoader.prototype={constructor:e.OBJLoader,load:function(t,r,s,n){var a=this;this.onError=n||i;var o=new e.FileLoader(a.manager);o.setPath(this.path),o.load(t,(function(e){r(a.parse(e))}),s,n)},setPath:function(e){this.path=e},setMaterials:function(e){this.materials=e},_createParserState:function(){var e={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var i={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(i),i},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var i=r.clone(0);i.inherited=!0,this.object.materials.push(i)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var i=this.vertices,s=this.object.geometry.vertices;s.push(i[e+0]),s.push(i[e+1]),s.push(i[e+2]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[t+2]),s.push(i[r+0]),s.push(i[r+1]),s.push(i[r+2])},addVertexLine:function(e){var t=this.vertices,r=this.object.geometry.vertices;r.push(t[e+0]),r.push(t[e+1]),r.push(t[e+2])},addNormal:function(e,t,r){var i=this.normals,s=this.object.geometry.normals;s.push(i[e+0]),s.push(i[e+1]),s.push(i[e+2]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[t+2]),s.push(i[r+0]),s.push(i[r+1]),s.push(i[r+2])},addUV:function(e,t,r){var i=this.uvs,s=this.object.geometry.uvs;s.push(i[e+0]),s.push(i[e+1]),s.push(i[t+0]),s.push(i[t+1]),s.push(i[r+0]),s.push(i[r+1])},addUVLine:function(e){var t=this.uvs,r=this.object.geometry.uvs;r.push(t[e+0]),r.push(t[e+1])},addFace:function(e,t,r,i,s,n,a,o,h,l,d,u){var c,p=this.vertices.length,m=this.parseVertexIndex(e,p),f=this.parseVertexIndex(t,p),g=this.parseVertexIndex(r,p);if(void 0===i?this.addVertex(m,f,g):(c=this.parseVertexIndex(i,p),this.addVertex(m,f,c),this.addVertex(f,g,c)),void 0!==s){var v=this.uvs.length;m=this.parseUVIndex(s,v),f=this.parseUVIndex(n,v),g=this.parseUVIndex(a,v),void 0===i?this.addUV(m,f,g):(c=this.parseUVIndex(o,v),this.addUV(m,f,c),this.addUV(f,g,c))}if(void 0!==h){var b=this.normals.length;m=this.parseNormalIndex(h,b),f=h===l?m:this.parseNormalIndex(l,b),g=h===d?m:this.parseNormalIndex(d,b),void 0===i?this.addNormal(m,f,g):(c=this.parseNormalIndex(u,b),this.addNormal(m,f,c),this.addNormal(f,g,c))}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,i=this.uvs.length,s=0,n=e.length;s<n;s++)this.addVertexLine(this.parseVertexIndex(e[s],r));var a=0;for(n=t.length;a<n;a++)this.addUVLine(this.parseUVIndex(t[a],i))}};return e.startObject("",!1),e},parse:function(t,r){void 0===r&&(r=!0),r&&console.time("OBJLoader");var i=this._createParserState();-1!==t.indexOf("\r\n")&&(t=t.replace(/\r\n/g,"\n")),-1!==t.indexOf("\\\n")&&(t=t.replace(/\\\n/g,""));for(var s=t.split("\n"),n="",a="",o="",h=[],l="function"==typeof"".trimLeft,d=0,u=s.length;d<u;d++)if(n=s[d],0!==(n=l?n.trimLeft():n.trim()).length&&"#"!==(a=n.charAt(0)))if("v"===a)" "===(o=n.charAt(1))&&null!==(h=this.regexp.vertex_pattern.exec(n))?i.vertices.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"n"===o&&null!==(h=this.regexp.normal_pattern.exec(n))?i.normals.push(parseFloat(h[1]),parseFloat(h[2]),parseFloat(h[3])):"t"===o&&null!==(h=this.regexp.uv_pattern.exec(n))?i.uvs.push(parseFloat(h[1]),parseFloat(h[2])):this.onError("Unexpected vertex/normal/uv line: '"+n+"'");else if("f"===a)null!==(h=this.regexp.face_vertex_uv_normal.exec(n))?i.addFace(h[1],h[4],h[7],h[10],h[2],h[5],h[8],h[11],h[3],h[6],h[9],h[12]):null!==(h=this.regexp.face_vertex_uv.exec(n))?i.addFace(h[1],h[3],h[5],h[7],h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex_normal.exec(n))?i.addFace(h[1],h[3],h[5],h[7],void 0,void 0,void 0,void 0,h[2],h[4],h[6],h[8]):null!==(h=this.regexp.face_vertex.exec(n))?i.addFace(h[1],h[2],h[3],h[4]):this.onError("Unexpected face line: '"+n+"'");else if("l"===a){var c=n.substring(1).trim().split(" "),p=[],m=[];if(-1===n.indexOf("/"))p=c;else for(var f=0,g=c.length;f<g;f++){var v=c[f].split("/");""!==v[0]&&p.push(v[0]),""!==v[1]&&m.push(v[1])}i.addLineGeometry(p,m)}else if(null!==(h=this.regexp.object_pattern.exec(n))){var b=(" "+h[0].substr(1).trim()).substr(1);i.startObject(b)}else if(this.regexp.material_use_pattern.test(n))i.object.startMaterial(n.substring(7).trim(),i.materialLibraries);else if(this.regexp.material_library_pattern.test(n))i.materialLibraries.push(n.substring(7).trim());else if(null!==(h=this.regexp.smoothing_pattern.exec(n))){var x=h[1].trim().toLowerCase();i.object.smooth="1"===x||"on"===x,(U=i.object.currentMaterial())&&(U.smooth=i.object.smooth)}else{if("\0"===n)continue;this.onError("Unexpected line: '"+n+"'")}i.finalize();var _=new e.Group;_.materialLibraries=[].concat(i.materialLibraries);for(d=0,u=i.objects.length;d<u;d++){var w=i.objects[d],j=w.geometry,y=w.materials,M="Line"===j.type;if(0!==j.vertices.length){var L=new e.BufferGeometry;L.addAttribute("position",new e.BufferAttribute(new Float32Array(j.vertices),3)),j.normals.length>0?L.addAttribute("normal",new e.BufferAttribute(new Float32Array(j.normals),3)):L.computeVertexNormals(),j.uvs.length>0&&L.addAttribute("uv",new e.BufferAttribute(new Float32Array(j.uvs),2));for(var V,E=[],F=0,I=y.length;F<I;F++){var A=y[F],U=void 0;if(null!==this.materials&&(U=this.materials.create(A.name),M&&U&&!(U instanceof e.LineBasicMaterial))){var B=new e.LineBasicMaterial;B.copy(U),U=B}U||((U=M?new e.LineBasicMaterial:new e.MeshPhongMaterial).name=A.name),U.shading=A.smooth?e.SmoothShading:e.FlatShading,E.push(U)}if(E.length>1){for(F=0,I=y.length;F<I;F++){A=y[F];L.addGroup(A.groupStart,A.groupCount,F)}var N=new e.MultiMaterial(E);V=M?new e.LineSegments(L,N):new e.Mesh(L,N)}else V=M?new e.LineSegments(L,E[0]):new e.Mesh(L,E[0]);V.name=w.name,_.add(V)}}return r&&console.timeEnd("OBJLoader"),_}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,