(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{124:function(t,i,e){"use strict";e.r(i);e(61);var s={components:{"ui-modal":()=>e.e(1).then(e.bind(null,122))},data:()=>({memberList:[],btnTypes:[{label:"一等奖",value:5},{label:"二等奖",value:10},{label:"三等奖",value:30}],curBtnType:0,isRunning:!1,showResult:!1,showAllResult:!1,curResultList:[]}),watch:{showResult:function(t){t||(TagCanvas.SetSpeed("myCanvas",this._normalSpeed()),this.showAllResult=!1,this.curResultList=[])}},mounted(){document.title="云抽奖",this.curBtnType=this.btnTypes[0].value,this._initSize(),this._initData(),window.addEventListener("resize",this._initSize)},beforeDestroy(){window.removeEventListener("resize",this._initSize)},methods:{_initSize(){let t=document.documentElement.clientWidth||document.body.clientWidth,i=document.documentElement.clientHeight||document.body.clientHeight,e=t>i?i:t,s=this.$refs.myCanvas;s.width=.85*e,s.height=.85*e},_initData(){e.e(32).then(e.bind(null,117)).then(t=>{this.memberList=t.default,this.$nextTick(()=>{this._initPic()})})},_initPic(){TagCanvas.Start("myCanvas","tags",{textColour:"#fff",textHeight:10,initial:this._normalSpeed(),reverse:!0,shape:"sphere"})},_normalSpeed:()=>[.08*Math.random()+.001,-(.08*Math.random()+.001)],_getAward(){let t=this.memberList.filter((t,i)=>(t.score=100*Math.random(),!this._getResult(t)));t=t.sort((t,i)=>i.score-t.score).slice(0,this.curBtnType),this.curResultList=t,this._storeResult(t)},_storeResult(t){let i=localStorage.getItem("award"),e={};i&&(e=JSON.parse(i)),t.map(t=>{t.awardType=this.curBtnType,e[`${t.phone}_${t.name}`]=t}),localStorage.setItem("award",JSON.stringify(e))},_getResult(t){let i=localStorage.getItem("award");if(i){return JSON.parse(i)[`${t.phone}_${t.name}`]}return null},getAllResult(){let t=localStorage.getItem("award");if(t){let i=JSON.parse(t);this.curResultList=i,this.showAllResult=!0,this.showResult=!0}},changeBtnType(t){this.isRunning||this.showResult||(this.curBtnType=t)},handleAward(){if(this.isRunning){this._getAward();this.showResult=!0,TagCanvas.SetSpeed("myCanvas",[0,0])}else this.curResultList=[],TagCanvas.SetSpeed("myCanvas",[1,5]);this.isRunning=!this.isRunning},reset(){localStorage.removeItem("award"),localStorage.clear()},testPanel(){this.showResult=!0}}},n=(e(62),e(1)),h=Object(n.a)(s,(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("section",{staticClass:"cloud-wrapper"},[e("section",{staticClass:"content-pic"},[e("canvas",{ref:"myCanvas",attrs:{id:"myCanvas"}}),t._v(" "),e("ul",{staticClass:"tags",attrs:{id:"tags"}},t._l(t.memberList,(function(i,s){return e("li",{key:s,staticClass:"tags-item"},[e("a",{attrs:{href:"#",target:"_blank"}},[t._v("\n          "+t._s(i.name)+"\n        ")])])})),0)]),t._v(" "),e("section",{staticClass:"console"},[t._l(t.btnTypes,(function(i){return e("section",{key:i.value,staticClass:"console-btn",class:t.curBtnType===i.value?"console-btn-active":"",on:{click:function(e){return t.changeBtnType(i.value)}}},[t._v("\n      "+t._s(i.value)+"\n    ")])})),t._v(" "),e("section",{staticClass:"console-switch",class:t.isRunning?"console-switch-on":"console-switch-off",on:{click:t.handleAward}},[t._v("\n      "+t._s(t.isRunning?"停":"开始")+"\n    ")]),t._v(" "),e("section",{staticClass:"console-showall",on:{click:t.getAllResult}},[t._v("\n      获取完整名单\n    ")]),t._v(" "),e("section",{staticClass:"console-clear",on:{click:t.reset}},[t._v("重置")])],2),t._v(" "),e("ui-modal",{model:{value:t.showResult,callback:function(i){t.showResult=i},expression:"showResult"}},[t.showAllResult?e("section",t._l(t.btnTypes,(function(i){return e("section",{staticClass:"award"},[e("section",{staticClass:"award-title"},[t._v("\n          "+t._s(i.label)+"："+t._s(i.value)+"名\n        ")]),t._v(" "),e("section",{staticClass:"person"},t._l(t.curResultList,(function(s){return e("section",{key:s.phone+"_"+s.name+"_item.awardType"},[s.awardType===i.value?e("section",{staticClass:"person-item"},[e("section",{staticClass:"person-item-name"},[t._v(t._s(s.name))]),t._v(" "),e("section",{staticClass:"person-item-phone"},[t._v(t._s(s.phone))])]):t._e()])})),0)])})),0):e("section",{staticClass:"person"},t._l(t.curResultList,(function(i){return e("section",{key:i.phone+"_"+i.name,staticClass:"person-item"},[e("section",{staticClass:"person-item-name"},[t._v(t._s(i.name))]),t._v(" "),e("section",{staticClass:"person-item-phone"},[t._v(t._s(i.phone))])])})),0)])],1)}),[],!1,null,"536c26b4",null);i.default=h.exports},16:function(t,i,e){},61:function(t,i){!function(){"use strict";var t,i,e,s,n,h,a,o,r,l,u=Math.abs,c=Math.sin,g=Math.cos,d=Math.max,f=Math.min,m=Math.ceil,w=Math.sqrt,p=Math.pow,x={},v={},y={0:"0,",1:"17,",2:"34,",3:"51,",4:"68,",5:"85,",6:"102,",7:"119,",8:"136,",9:"153,",a:"170,",A:"170,",b:"187,",B:"187,",c:"204,",C:"204,",d:"221,",D:"221,",e:"238,",E:"238,",f:"255,",F:"255,"},T=document,C={};for(t=0;t<256;++t)i=t.toString(16),t<16&&(i="0"+i),v[i]=v[i.toUpperCase()]=t.toString()+",";function S(t){return void 0!==t}function b(t){return"object"==typeof t&&null!=t}function z(t,i,e){return isNaN(t)?e:f(e,d(i,t))}function A(){return!1}function D(){return(new Date).valueOf()}function _(t){for(var i,e,s=t.length-1;s;)e=~~(Math.random()*s),i=t[s],t[s]=t[e],t[e]=i,--s}function I(t,i,e){this.x=t,this.y=i,this.z=e}function M(t){this[1]={1:t[0],2:t[1],3:t[2]},this[2]={1:t[3],2:t[4],3:t[5]},this[3]={1:t[6],2:t[7],3:t[8]}}function O(t,i,e,s){var n,h,a,o,r=[],l=Math.PI*(3-w(5)),u=2/t;for(n=0;n<t;++n)a=w(1-(h=n*u-1+u/2)*h),o=n*l,r.push([g(o)*a*i,h*e,c(o)*a*s]);return r}function k(t,i,e,s,n){var h,a,o,r,l,u=[],d=Math.PI*(3-w(5)),f=2/t;for(a=0;a<t;++a)o=a*f-1+f/2,r=g(h=a*d),l=c(h),u.push(i?[o*e,r*s,l*n]:[r*e,o*s,l*n]);return u}function R(t,i,e,s,n,h){var a,o,r,l,u=[],d=2*Math.PI/i;for(o=0;o<i;++o)r=g(a=o*d),l=c(a),u.push(t?[h*e,r*s,l*n]:[r*e,h*s,l*n]);return u}function F(t,i,e,s){return k(t,0,i,e,s)}function E(t,i,e,s){return k(t,1,i,e,s)}function B(t,i,e,s,n){return R(0,t,i,e,s,n=isNaN(n)?0:1*n)}function P(t,i,e,s,n){return R(1,t,i,e,s,n=isNaN(n)?0:1*n)}function L(t,i){if(window.G_vmlCanvasManager)return null;var e=T.createElement("canvas");return e.width=t,e.height=i,e}function N(t,i,e,s){var n,h=t.createLinearGradient(0,0,i,0);for(n in s)h.addColorStop(1-n,s[n]);t.fillStyle=h,t.fillRect(0,e,i,1)}function H(t,i,e){var s,n,h,a,o=1024,r=1,l=t.weightGradient;if(t.gCanvas)n=t.gCanvas.getContext("2d"),r=t.gCanvas.height;else{if(b(l[0])?r=l.length:l=[l],t.gCanvas=s=L(o,r),!s)return null;for(n=s.getContext("2d"),h=0;h<r;++h)N(n,o,h,l[h])}return e=d(f(e||0,r-1),0),"rgba("+(a=n.getImageData(~~(1023*i),e,1,1).data)[0]+","+a[1]+","+a[2]+","+a[3]/255+")"}function W(t,i,e,s,n,h,a,o,r,l,c,g){var d,f,m=n+(o||0)+(r.length&&r[0]<0?u(r[0]):0),w=h+(o||0)+(r.length&&r[1]<0?u(r[1]):0);for(t.font=i,t.textBaseline="top",t.fillStyle=e,a&&(t.shadowColor=a),o&&(t.shadowBlur=o),r.length&&(t.shadowOffsetX=r[0],t.shadowOffsetY=r[1]),d=0;d<s.length;++d)f=0,c&&("right"==g?f=l-c[d]:"centre"==g&&(f=(l-c[d])/2)),t.fillText(s[d],m+f,w),w+=parseInt(i)}function X(t,i,e,s,n,h,a){h?(t.beginPath(),t.moveTo(i,e+n-h),t.arcTo(i,e,i+h,e,h),t.arcTo(i+s,e,i+s,e+h,h),t.arcTo(i+s,e+n,i+s-h,e+n,h),t.arcTo(i,e+n,i,e+n-h,h),t.closePath(),t[a?"stroke":"fill"]()):t[a?"strokeRect":"fillRect"](i,e,s,n)}function Y(t,i,e,s,n,h,a,o,r){this.strings=t,this.font=i,this.width=e,this.height=s,this.maxWidth=n,this.stringWidths=h,this.align=a,this.valign=o,this.scale=r}function U(t,i,e){var s=L(i,e);return s?(s.getContext("2d").drawImage(t,(i-t.width)/2,(e-t.height)/2),s):null}function V(t,i,e){var s=L(i,e);return s?(s.getContext("2d").drawImage(t,0,0,i,e),s):null}function q(t,i,e,s,n,h,a,o,r,l){var u,c,g,d,f,m,w,p=i+(2*o+h)*s,x=e+(2*o+h)*s,v=L(p,x);return v?(r*=s,d=p-(h*=s),f=x-h,o=o*s+(c=g=h/2),u=v.getContext("2d"),n&&(u.fillStyle=n,X(u,c,g,d,f,r)),h&&(u.strokeStyle=a,u.lineWidth=h,X(u,c,g,d,f,r,!0)),l?((w=(m=L(p,x)).getContext("2d")).drawImage(t,o,o,i,e),w.globalCompositeOperation="source-in",w.fillStyle=a,w.fillRect(0,0,p,x),w.globalCompositeOperation="destination-over",w.drawImage(v,0,0),w.globalCompositeOperation="source-over",u.drawImage(m,0,0)):u.drawImage(t,o,o,t.width,t.height),{image:v,width:p/s,height:x/s}):null}function G(t,i,e){var s,n,h,a,o,r,l,u,c=parseInt(t.toString().length*e),g=parseInt(2*e*t.length),d=L(c,g);if(!d)return null;for((s=d.getContext("2d")).fillStyle="#000",s.fillRect(0,0,c,g),W(s,e+"px "+i,"#fff",t,0,0,0,0,[],"centre"),u={min:{x:h=(n=s.getImageData(0,0,c,g)).width,y:a=n.height},max:{x:-1,y:-1}},r=0;r<a;++r)for(o=0;o<h;++o)l=4*(r*h+o),n.data[l+1]>0&&(o<u.min.x&&(u.min.x=o),o>u.max.x&&(u.max.x=o),r<u.min.y&&(u.min.y=r),r>u.max.y&&(u.max.y=r));return h!=c&&(u.min.x*=c/h,u.max.x*=c/h),a!=g&&(u.min.y*=c/a,u.max.y*=c/a),d=null,u}function Z(t){return"'"+t.replace(/(\'|\")/g,"").replace(/\s*,\s*/g,"', '")+"'"}function j(t,i,e){(e=e||T).addEventListener?e.addEventListener(t,i,!1):e.attachEvent("on"+t,i)}function $(t,i,e,s){var n,h,a,o,r,l,c=s.imageScale;return i.complete?t.complete?(i.width=i.width,i.height=i.height,c&&(t.width=i.width*c,t.height=i.height*c),e.iw=t.width,e.ih=t.height,s.txtOpt&&(h=t,n=s.zoomMax*s.txtScale,r=e.iw*n,l=e.ih*n,r<i.naturalWidth||l<i.naturalHeight?(h=V(t,r,l))&&(e.fimage=h):(r=e.iw,l=e.ih,n=1),e.HasText()||(s.shadow&&(h=function(t,i,e,s,n,h,a){var o,r,l=u(a[0]),c=u(a[1]),g=i+(l>h?l+h:2*h)*s,d=e+(c>h?c+h:2*h)*s,f=s*((h||0)+(a[0]<0?l:0)),m=s*((h||0)+(a[1]<0?c:0));return(o=L(g,d))?(r=o.getContext("2d"),n&&(r.shadowColor=n),h&&(r.shadowBlur=h*s),a&&(r.shadowOffsetX=a[0]*s,r.shadowOffsetY=a[1]*s),r.drawImage(t,f,m,i,e),{image:o,width:g/s,height:d/s}):null}(e.image,r,l,n,s.shadow,s.shadowBlur,s.shadowOffset))&&(e.fimage=h.image,e.w=h.width,e.h=h.height),(s.bgColour||s.bgOutlineThickness)&&(a="tag"==s.bgColour?J(e.a,"background-color"):s.bgColour,o="tag"==s.bgOutline?J(e.a,"color"):s.bgOutline||s.textColour,r=e.fimage.width,l=e.fimage.height,"colour"==s.outlineMethod&&(h=q(e.fimage,r,l,n,a,s.bgOutlineThickness,s.outlineColour,s.padding,s.bgRadius,1))&&(e.oimage=h.image),(h=q(e.fimage,r,l,n,a,s.bgOutlineThickness,o,s.padding,s.bgRadius))&&(e.fimage=h.image,e.w=h.width,e.h=h.height)),"size"==s.outlineMethod&&(s.outlineIncrease>0?(e.iw+=2*s.outlineIncrease,e.ih+=2*s.outlineIncrease,r=n*e.iw,l=n*e.ih,h=V(e.fimage,r,l),e.oimage=h,e.fimage=U(e.fimage,e.oimage.width,e.oimage.height)):(r=n*(e.iw+2*s.outlineIncrease),l=n*(e.ih+2*s.outlineIncrease),h=V(e.fimage,r,l),e.oimage=U(h,e.fimage.width,e.fimage.height))))),void e.Init()):j("load",(function(){$(t,i,e,s)}),t):j("load",(function(){$(t,i,e,s)}),i)}function J(t,i){var e=T.defaultView,s=i.replace(/\-([a-z])/g,(function(t){return t.charAt(1).toUpperCase()}));return e&&e.getComputedStyle&&e.getComputedStyle(t,null).getPropertyValue(i)||t.currentStyle&&t.currentStyle[s]}function K(t,i,e){var s,n=1;return i?n=1*(t.getAttribute(i)||e):(s=J(t,"font-size"))&&(n=s.indexOf("px")>-1&&1*s.replace("px","")||s.indexOf("pt")>-1&&1.25*s.replace("pt","")||3.3*s),n}function Q(t){return t.target&&S(t.target.id)?t.target.id:t.srcElement.parentNode.id}function tt(t,i){var e,s,n=parseInt(J(i,"width"))/i.width,h=parseInt(J(i,"height"))/i.height;return S(t.offsetX)?e={x:t.offsetX,y:t.offsetY}:(s=ct(i.id),S(t.changedTouches)&&(t=t.changedTouches[0]),t.pageX&&(e={x:t.pageX-s.x,y:t.pageY-s.y})),e&&n&&h&&(e.x/=n,e.y/=h),e}function it(t){var i=t.target||t.fromElement.parentNode,e=mt.tc[i.id];e&&(e.mx=e.my=-1,e.UnFreeze(),e.EndDrag())}function et(t){}function st(t){var i=mt,e=T.addEventListener?0:1,s=Q(t);s&&t.button==e&&i.tc[s]&&i.tc[s].BeginDrag(t)}function nt(t){var i,e=mt,s=T.addEventListener?0:1,n=Q(t);n&&t.button==s&&e.tc[n]&&((i=e.tc[n]).EndDrag()||i.touchState||i.Clicked(t))}function ht(t){var i,e=Q(t),s=e&&mt.tc[e];s&&t.changedTouches&&(1==t.touches.length&&0==s.touchState?(s.touchState=1,s.BeginDrag(t),(i=tt(t,s.canvas))&&(s.mx=i.x,s.my=i.y,s.drawn=0)):2==t.targetTouches.length&&s.pinchZoom?(s.touchState=3,s.EndDrag(),s.BeginPinch(t)):(s.EndDrag(),s.EndPinch(),s.touchState=0))}function at(t){var i=Q(t),e=i&&mt.tc[i];if(e&&t.changedTouches){switch(e.touchState){case 1:e.Draw(),e.Clicked();break;case 2:e.EndDrag();break;case 3:e.EndPinch()}e.touchState=0}}function ot(t){var i,e,s,n=mt,h=Q(t);for(i in n.tc)(e=n.tc[i]).tttimer&&(clearTimeout(e.tttimer),e.tttimer=null);if((e=h&&n.tc[h])&&t.changedTouches&&e.touchState){switch(e.touchState){case 1:case 2:(s=tt(t,e.canvas))&&(e.mx=s.x,e.my=s.y,e.Drag(t,s)&&(e.touchState=2));break;case 3:e.Pinch(t)}e.drawn=0}}function rt(t){var i=mt,e=Q(t);e&&i.tc[e]&&(t.cancelBubble=!0,t.returnValue=!1,t.preventDefault&&t.preventDefault(),i.tc[e].Wheel((t.wheelDelta||t.detail)>0))}function lt(){ut(D())}function ut(t){var i,e=mt.tc;for(i in mt.NextFrame(mt.interval),t=t||D(),e)e[i].Draw(t)}function ct(t){var i=T.getElementById(t).getBoundingClientRect(),e=T.documentElement,s=T.body,n=window,h=n.pageXOffset||e.scrollLeft,a=n.pageYOffset||e.scrollTop,o=e.clientLeft||s.clientLeft,r=e.clientTop||s.clientTop;return{x:i.left+h-o,y:i.top+a-r}}function gt(t){this.e=t,this.br=0,this.line=[],this.text=[],this.original=t.innerText||t.textContent}function dt(t,i){this.ts=D(),this.tc=t,this.tag=i,this.x=this.y=this.w=this.h=this.sc=1,this.z=0,this.Draw=t.pulsateTo<1&&"colour"!=t.outlineMethod?this.DrawPulsate:this.DrawSimple,this.radius=0|t.outlineRadius,this.SetMethod(t.outlineMethod)}function ft(t,i,e,s,n,h,a,o,r,l,u,c,g,d){this.tc=t,this.image=null,this.text=i,this.text_original=d,this.line_widths=[],this.title=e.title||null,this.a=e,this.position=new I(s[0],s[1],s[2]),this.x=this.y=this.z=0,this.w=n,this.h=h,this.colour=a||t.textColour,this.bgColour=o||t.bgColour,this.bgRadius=0|r,this.bgOutline=l||this.colour,this.bgOutlineThickness=0|u,this.textFont=c||t.textFont,this.padding=0|g,this.sc=this.alpha=1,this.weighted=!t.weight}function mt(t,i,e){var s,n,h,a,o=T.getElementById(t),r=["id","class","innerHTML"];if(!o)throw 0;if(S(window.G_vmlCanvasManager)&&(o=window.G_vmlCanvasManager.initElement(o),this.ie=parseFloat(navigator.appVersion.split("MSIE")[1])),o&&(!o.getContext||!o.getContext("2d").fillText)){for(n=T.createElement("DIV"),s=0;s<r.length;++s)n[r[s]]=o[r[s]];throw o.parentNode.insertBefore(n,o),o.parentNode.removeChild(o),0}for(s in mt.options)this[s]=e&&S(e[s])?e[s]:S(mt[s])?mt[s]:mt.options[s];if(this.canvas=o,this.ctxt=o.getContext("2d"),this.z1=250/d(this.depth,.001),this.z2=this.z1/this.zoom,this.radius=.0075*f(o.height,o.width),this.max_radius=100,this.max_weight=[],this.min_weight=[],this.textFont=this.textFont&&Z(this.textFont),this.textHeight*=1,this.pulsateTo=z(this.pulsateTo,0,1),this.minBrightness=z(this.minBrightness,0,1),this.maxBrightness=z(this.maxBrightness,this.minBrightness,1),this.ctxt.textBaseline="top",this.lx=(this.lock+"").indexOf("x")+1,this.ly=(this.lock+"").indexOf("y")+1,this.frozen=this.dx=this.dy=this.fixedAnim=this.touchState=0,this.fixedAlpha=1,this.source=i||t,this.repeatTags=f(64,~~this.repeatTags),this.minTags=f(200,~~this.minTags),this.minTags>0&&this.repeatTags<1&&(s=this.GetTags().length)&&(this.repeatTags=m(this.minTags/s)-1),this.transform=M.Identity(),this.startTime=this.time=D(),this.mx=this.my=-1,this.centreImage&&function(t){var i=new Image;i.onload=function(){var e=i.width/2,s=i.height/2;t.centreFunc=function(t,n,h,a,o){t.setTransform(1,0,0,1,0,0),t.globalAlpha=1,t.drawImage(i,a-e,o-s)}},i.src=t.centreImage}(this),this.Animate=this.dragControl?this.AnimateDrag:this.AnimatePosition,this.animTiming="function"==typeof mt[this.animTiming]?mt[this.animTiming]:mt.Smooth,this.shadowBlur||this.shadowOffset[0]||this.shadowOffset[1]?(this.ctxt.shadowColor=this.shadow,this.shadow=this.ctxt.shadowColor,this.shadowAlpha=function(){var t,i=L(3,3);return!!i&&((t=i.getContext("2d")).strokeStyle="#000",t.shadowColor="#fff",t.shadowBlur=3,t.globalAlpha=0,t.strokeRect(2,2,2,2),t.globalAlpha=1,i=null,t.getImageData(2,2,1,1).data[0]>0)}()):delete this.shadow,this.Load(),i&&this.hideTags&&(a=this,mt.loaded?a.HideTags():j("load",(function(){a.HideTags()}),window)),this.yaw=this.initial?this.initial[0]*this.maxSpeed:0,this.pitch=this.initial?this.initial[1]*this.maxSpeed:0,this.tooltip?(this.ctitle=o.title,o.title="","native"==this.tooltip?this.Tooltip=this.TooltipNative:(this.Tooltip=this.TooltipDiv,this.ttdiv||(this.ttdiv=T.createElement("div"),this.ttdiv.className=this.tooltipClass,this.ttdiv.style.position="absolute",this.ttdiv.style.zIndex=o.style.zIndex+1,j("mouseover",(function(t){t.target.style.display="none"}),this.ttdiv),T.body.appendChild(this.ttdiv)))):this.Tooltip=this.TooltipNone,!this.noMouse&&!C[t])for(C[t]=[["mousemove",et],["mouseout",it],["mouseup",nt],["touchstart",ht],["touchend",at],["touchcancel",at],["touchmove",ot]],this.dragControl&&(C[t].push(["mousedown",st]),C[t].push(["selectstart",A])),this.wheelZoom&&(C[t].push(["mousewheel",rt]),C[t].push(["DOMMouseScroll",rt])),s=0;s<C[t].length;++s)j(C[t][s][0],C[t][s][1],o);mt.started||(h=window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,mt.NextFrame=h?mt.NextFrameRAF:mt.NextFrameTimeout,mt.interval=this.interval,mt.NextFrame(this.interval),mt.started=1)}function wt(t){var i=t.targetTouches[0],e=t.targetTouches[1];return w(p(e.pageX-i.pageX,2)+p(e.pageY-i.pageY,2))}function pt(t,i){mt.tc[i]&&mt.tc[i][t]()}for(t in(a=I.prototype).length=function(){return w(this.x*this.x+this.y*this.y+this.z*this.z)},a.dot=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},a.cross=function(t){return new I(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)},a.angle=function(t){var i,e=this.dot(t);return 0==e?Math.PI/2:(i=e/(this.length()*t.length()))>=1?0:i<=-1?Math.PI:Math.acos(i)},a.unit=function(){var t=this.length();return new I(this.x/t,this.y/t,this.z/t)},h=M.prototype,M.Identity=function(){return new M([1,0,0,0,1,0,0,0,1])},M.Rotation=function(t,i){var e=c(t),s=g(t),n=1-s;return new M([s+p(i.x,2)*n,i.x*i.y*n-i.z*e,i.x*i.z*n+i.y*e,i.y*i.x*n+i.z*e,s+p(i.y,2)*n,i.y*i.z*n-i.x*e,i.z*i.x*n-i.y*e,i.z*i.y*n+i.x*e,s+p(i.z,2)*n])},h.mul=function(t){var i,e,s=[],n=t.xform?1:0;for(i=1;i<=3;++i)for(e=1;e<=3;++e)n?s.push(this[i][1]*t[1][e]+this[i][2]*t[2][e]+this[i][3]*t[3][e]):s.push(this[i][e]*t);return new M(s)},h.xform=function(t){var i={},e=t.x,s=t.y,n=t.z;return i.x=e*this[1][1]+s*this[2][1]+n*this[3][1],i.y=e*this[1][2]+s*this[2][2]+n*this[3][2],i.z=e*this[1][3]+s*this[2][3]+n*this[3][3],i},(r=Y.prototype).SetImage=function(t,i,e,s,n,h,a,o){this.image=t,this.iwidth=i*this.scale,this.iheight=e*this.scale,this.ipos=s,this.ipad=n*this.scale,this.iscale=o,this.ialign=h,this.ivalign=a},r.Align=function(t,i,e){var s=0;return"right"==e||"bottom"==e?s=i-t:"left"!=e&&"top"!=e&&(s=(i-t)/2),s},r.Create=function(t,i,e,s,n,h,a,o,r){var l,c,g,f,m,w,p,x,v,y,T,C,S,b,z,A,D=u(a[0]),_=u(a[1]);return m=2*((o=d(o,D+h,_+h))+s),p=2*(o+s),c=this.width+m,g=this.height+p,v=y=o+s,this.image&&(T=C=o+s,S=this.iwidth,b=this.iheight,"top"==this.ipos||"bottom"==this.ipos?(S<this.width?T+=this.Align(S,this.width,this.ialign):v+=this.Align(this.width,S,this.align),"top"==this.ipos?y+=b+this.ipad:C+=this.height+this.ipad,c=d(c,S+m),g+=b+this.ipad):(b<this.height?C+=this.Align(b,this.height,this.ivalign):y+=this.Align(this.height,b,this.valign),"right"==this.ipos?T+=this.width+this.ipad:v+=S+this.ipad,c+=S+this.ipad,g=d(g,b+p))),(l=L(c,g))?(m=p=s/2,w=c-s,x=g-s,f=l.getContext("2d"),i&&(f.fillStyle=i,X(f,m,p,w,x,r)),s&&(f.strokeStyle=e,f.lineWidth=s,X(f,m,p,w,x,r,!0)),(h||D||_)&&(z=L(c,g))&&(A=f,f=z.getContext("2d")),W(f,this.font,t,this.strings,v,y,0,0,[],this.maxWidth,this.stringWidths,this.align),this.image&&f.drawImage(this.image,T,C,S,b),A&&(f=A,n&&(f.shadowColor=n),h&&(f.shadowBlur=h),f.shadowOffsetX=a[0],f.shadowOffsetY=a[1],f.drawImage(z,0,0)),l):null},(o=gt.prototype).Empty=function(){for(var t=0;t<this.text.length;++t)if(this.text[t].length)return!1;return!0},o.Lines=function(t){var i,e,s,n=t?1:0;for(e=(i=(t=t||this.e).childNodes).length,s=0;s<e;++s)"BR"==i[s].nodeName?(this.text.push(this.line.join(" ")),this.br=1):3==i[s].nodeType?this.br?(this.line=[i[s].nodeValue],this.br=0):this.line.push(i[s].nodeValue):this.Lines(i[s]);return n||this.br||this.text.push(this.line.join(" ")),this.text},o.SplitWidth=function(t,i,e,s){var n,h,a,o=[];for(i.font=s+"px "+e,n=0;n<this.text.length;++n){for(a=this.text[n].split(/\s+/),this.line=[a[0]],h=1;h<a.length;++h)i.measureText(this.line.join(" ")+" "+a[h]).width>t?(o.push(this.line.join(" ")),this.line=[a[h]]):this.line.push(a[h]);o.push(this.line.join(" "))}return this.text=o},(e=dt.prototype).SetMethod=function(t){var i={block:["PreDraw","DrawBlock"],colour:["PreDraw","DrawColour"],outline:["PostDraw","DrawOutline"],classic:["LastDraw","DrawOutline"],size:["PreDraw","DrawColour"],none:["LastDraw"]},e=i[t]||i.outline;"none"==t?this.Draw=function(){return 1}:this.drawFunc=this[e[1]],this[e[0]]=this.Draw},e.Update=function(t,i,e,s,n,h,a,o){var r=this.tc.outlineOffset,l=2*r;this.x=n*t+a-r,this.y=n*i+o-r,this.w=n*e+l,this.h=n*s+l,this.sc=n,this.z=h},e.DrawOutline=function(t,i,e,s,n,h){t.strokeStyle=h,X(t,i,e,s,n,this.radius,!0)},e.DrawColour=function(t,i,e,s,n,h,a,o,r){return a.oimage?(a.alpha=1,a.Draw(t,o,r,a.oimage),1):this[a.image?"DrawColourImage":"DrawColourText"](t,i,e,s,n,h,a,o,r)},e.DrawColourText=function(t,i,e,s,n,h,a,o,r){var l=a.colour;return a.colour=h,a.alpha=1,a.Draw(t,o,r),a.colour=l,1},e.DrawColourImage=function(t,i,e,s,n,h,a,o,r){var u=t.canvas,c=~~d(i,0),g=~~d(e,0),m=f(u.width-c,s)+.5|0,w=f(u.height-g,n)+.5|0;return l?(l.width=m,l.height=w):l=L(m,w),l?(l.getContext("2d").drawImage(u,c,g,m,w,0,0,m,w),t.clearRect(c,g,m,w),a.alpha=1,a.Draw(t,o,r),t.setTransform(1,0,0,1,0,0),t.save(),t.beginPath(),t.rect(c,g,m,w),t.clip(),t.globalCompositeOperation="source-in",t.fillStyle=h,t.fillRect(c,g,m,w),t.restore(),t.globalCompositeOperation="destination-over",t.drawImage(l,0,0,m,w,c,g,m,w),t.globalCompositeOperation="source-over",1):this.SetMethod("outline")},e.DrawBlock=function(t,i,e,s,n,h){t.fillStyle=h,X(t,i,e,s,n,this.radius)},e.DrawSimple=function(t,i,e,s){var n=this.tc;return t.setTransform(1,0,0,1,0,0),t.strokeStyle=n.outlineColour,t.lineWidth=n.outlineThickness,t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0,t.globalAlpha=1,this.drawFunc(t,this.x,this.y,this.w,this.h,n.outlineColour,i,e,s)},e.DrawPulsate=function(t,i,e,s){var n=D()-this.ts,h=this.tc;return t.setTransform(1,0,0,1,0,0),t.strokeStyle=h.outlineColour,t.lineWidth=h.outlineThickness,t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0,t.globalAlpha=h.pulsateTo+(1-h.pulsateTo)*(.5+g(2*Math.PI*n/(1e3*h.pulsateTime))/2),this.drawFunc(t,this.x,this.y,this.w,this.h,h.outlineColour,i,e,s)},e.Active=function(t,i,e){return i>=this.x&&e>=this.y&&i<=this.x+this.w&&e<=this.y+this.h},e.PreDraw=e.PostDraw=e.LastDraw=A,(s=ft.prototype).Init=function(t){var i=this.tc;this.outline=new dt(i,this),this.textHeight=i.textHeight,this.HasText()?this.Measure(i.ctxt,i):(this.w=this.iw,this.h=this.ih),this.SetShadowColour=i.shadowAlpha?this.SetShadowColourAlpha:this.SetShadowColourFixed,this.SetDraw(i)},s.Draw=A,s.HasText=function(){return this.text&&this.text[0].length>0},s.EqualTo=function(t){var i=t.getElementsByTagName("img");return this.a.href!=t.href?0:i.length?this.image.src==i[0].src:(t.innerText||t.textContent)==this.text_original},s.SetImage=function(t){this.image=this.fimage=t},s.SetDraw=function(t){this.Draw=this.fimage?t.ie>7?this.DrawImageIE:this.DrawImage:this.DrawText,t.noSelect&&(this.CheckActive=A)},s.MeasureText=function(t){var i,e,s=this.text.length,n=0;for(i=0;i<s;++i)this.line_widths[i]=e=t.measureText(this.text[i]).width,n=d(n,e);return n},s.Measure=function(t,i){var e,s,n,h,a,o,r,l,u,c=G(this.text,this.textFont,this.textHeight);r=c?c.max.y+c.min.y:this.textHeight,t.font=this.font=this.textHeight+"px "+this.textFont,o=this.MeasureText(t),i.txtOpt&&(n=(s=(e=i.txtScale)*this.textHeight)+"px "+this.textFont,h=[e*i.shadowOffset[0],e*i.shadowOffset[1]],t.font=n,a=this.MeasureText(t),u=new Y(this.text,n,a+e,e*r+e,a,this.line_widths,i.textAlign,i.textVAlign,e),this.image&&u.SetImage(this.image,this.iw,this.ih,i.imagePosition,i.imagePadding,i.imageAlign,i.imageVAlign,i.imageScale),l=u.Create(this.colour,this.bgColour,this.bgOutline,e*this.bgOutlineThickness,i.shadow,e*i.shadowBlur,h,e*this.padding,e*this.bgRadius),"colour"==i.outlineMethod?this.oimage=u.Create(i.outlineColour,this.bgColour,i.outlineColour,e*this.bgOutlineThickness,i.shadow,e*i.shadowBlur,h,e*this.padding,e*this.bgRadius):"size"==i.outlineMethod&&(s=(c=G(this.text,this.textFont,this.textHeight+i.outlineIncrease)).max.y+c.min.y,n=e*(this.textHeight+i.outlineIncrease)+"px "+this.textFont,t.font=n,a=this.MeasureText(t),u=new Y(this.text,n,a+e,e*s+e,a,this.line_widths,i.textAlign,i.textVAlign,e),this.image&&u.SetImage(this.image,this.iw+i.outlineIncrease,this.ih+i.outlineIncrease,i.imagePosition,i.imagePadding,i.imageAlign,i.imageVAlign,i.imageScale),this.oimage=u.Create(this.colour,this.bgColour,this.bgOutline,e*this.bgOutlineThickness,i.shadow,e*i.shadowBlur,h,e*this.padding,e*this.bgRadius),i.outlineIncrease>0?l=U(l,this.oimage.width,this.oimage.height):this.oimage=U(this.oimage,l.width,l.height)),l&&(this.fimage=l,o=this.fimage.width/e,r=this.fimage.height/e),this.SetDraw(i),i.txtOpt=!!this.fimage),this.h=r,this.w=o},s.SetFont=function(t,i,e,s){this.textFont=t,this.colour=i,this.bgColour=e,this.bgOutline=s,this.Measure(this.tc.ctxt,this.tc)},s.SetWeight=function(t){var i,e,s=this.tc,n=s.weightMode.split(/[, ]/),h=t.length;if(this.HasText()){for(this.weighted=!0,e=0;e<h;++e)"both"==(i=n[e]||"size")?(this.Weight(t[e],s.ctxt,s,"size",s.min_weight[e],s.max_weight[e],e),this.Weight(t[e],s.ctxt,s,"colour",s.min_weight[e],s.max_weight[e],e)):this.Weight(t[e],s.ctxt,s,i,s.min_weight[e],s.max_weight[e],e);this.Measure(s.ctxt,s)}},s.Weight=function(t,i,e,s,n,h,a){var o=((t=isNaN(t)?1:t)-n)/(h-n);"colour"==s?this.colour=H(e,o,a):"bgcolour"==s?this.bgColour=H(e,o,a):"bgoutline"==s?this.bgOutline=H(e,o,a):"size"==s&&(e.weightSizeMin>0&&e.weightSizeMax>e.weightSizeMin?this.textHeight=e.weightSize*(e.weightSizeMin+(e.weightSizeMax-e.weightSizeMin)*o):this.textHeight=d(1,t*e.weightSize))},s.SetShadowColourFixed=function(t,i,e){t.shadowColor=i},s.SetShadowColourAlpha=function(t,i,e){t.shadowColor=function(t,i){var e,s,n=t,h=(1*i).toPrecision(3)+")";return"#"===t[0]?(x[t]||(4===t.length?x[t]="rgba("+y[t[1]]+y[t[2]]+y[t[3]]:x[t]="rgba("+v[t.substr(1,2)]+v[t.substr(3,2)]+v[t.substr(5,2)]),n=x[t]+h):"rgb("===t.substr(0,4)||"hsl("===t.substr(0,4)?n=t.replace("(","a(").replace(")",","+h):"rgba("!==t.substr(0,5)&&"hsla("!==t.substr(0,5)||(e=t.lastIndexOf(",")+1,s=t.indexOf(")"),i*=parseFloat(t.substring(e,s)),n=t.substr(0,e)+i.toPrecision(3)+")"),n}(i,e)},s.DrawText=function(t,i,e){var s,n,h=this.tc,a=this.x,o=this.y,r=this.sc;for(t.globalAlpha=this.alpha,t.fillStyle=this.colour,h.shadow&&this.SetShadowColour(t,h.shadow,this.alpha),t.font=this.font,a+=i/r,o+=e/r-this.h/2,s=0;s<this.text.length;++s)n=a,"right"==h.textAlign?n+=this.w/2-this.line_widths[s]:"centre"==h.textAlign?n-=this.line_widths[s]/2:n-=this.w/2,t.setTransform(r,0,0,r,r*n,r*o),t.fillText(this.text[s],0,0),o+=this.textHeight},s.DrawImage=function(t,i,e,s){var n=this.x,h=this.y,a=this.sc,o=s||this.fimage,r=this.w,l=this.h,u=this.alpha,c=this.shadow;t.globalAlpha=u,c&&this.SetShadowColour(t,c,u),n+=i/a-r/2,h+=e/a-l/2,t.setTransform(a,0,0,a,a*n,a*h),t.drawImage(o,0,0,r,l)},s.DrawImageIE=function(t,i,e){var s=this.fimage,n=this.sc,h=s.width=this.w*n,a=s.height=this.h*n,o=this.x*n+i-h/2,r=this.y*n+e-a/2;t.setTransform(1,0,0,1,0,0),t.globalAlpha=this.alpha,t.drawImage(s,o,r)},s.Calc=function(t,i){var e,s=this.tc,n=s.minBrightness,h=s.maxBrightness,a=s.max_radius;e=t.xform(this.position),this.xformed=e,e=function(t,i,e,s){var n=t.radius*t.z1/(t.z1+t.z2+i.z);return{x:i.x*n*e,y:i.y*n*s,z:i.z,w:(t.z1-i.z)/t.z2}}(s,e,s.stretchX,s.stretchY),this.x=e.x,this.y=e.y,this.z=e.z,this.sc=e.w,this.alpha=i*z(n+(h-n)*(a-this.z)/(2*a),0,1)},s.UpdateActive=function(t,i,e){var s=this.outline,n=this.w,h=this.h,a=this.x-n/2,o=this.y-h/2;return s.Update(a,o,n,h,this.sc,this.z,i,e),s},s.CheckActive=function(t,i,e){var s=this.tc,n=this.UpdateActive(t,i,e);return n.Active(t,s.mx,s.my)?n:null},s.Clicked=function(t){var i,e=this.a,s=e.target,n=e.href;if(""==s||"_self"==s){if(T.createEvent){if((i=T.createEvent("MouseEvents")).initMouseEvent("click",1,1,window,0,0,0,0,0,0,0,0,0,0,null),!e.dispatchEvent(i))return}else if(e.fireEvent&&!e.fireEvent("onclick"))return;T.location=n}else if(self.frames[s])self.frames[s].document.location=n;else{try{if(top.frames[s])return void(top.frames[s].document.location=n)}catch(t){}window.open(n,s)}},(n=mt.prototype).SourceElements=function(){return T.querySelectorAll?T.querySelectorAll("#"+this.source):[T.getElementById(this.source)]},n.HideTags=function(){var t,i=this.SourceElements();for(t=0;t<i.length;++t)i[t].style.display="none"},n.GetTags=function(){var t,i,e,s,n=this.SourceElements(),h=[];for(s=0;s<=this.repeatTags;++s)for(i=0;i<n.length;++i)for(t=n[i].getElementsByTagName("a"),e=0;e<t.length;++e)h.push(t[e]);return h},n.Message=function(t){var i,e,s,n,h,a,o=[],r=t.split("");for(i=0;i<r.length;++i)" "!=r[i]&&(e=i-r.length/2,(s=T.createElement("A")).href="#",s.innerText=r[i],h=100*c(e/9),a=-100*g(e/9),(n=new ft(this,r[i],s,[h,0,a],2,18,"#000","#fff",0,0,0,"monospace",2,r[i])).Init(),o.push(n));return o},n.CreateTag=function(t){var i,e,s,n,h,a,o,r,l=[0,0,0];return"text"!=this.imageMode&&(i=t.getElementsByTagName("img")).length&&((e=new Image).src=i[0].src,!this.imageMode)?((s=new ft(this,"",t,l,0,0)).SetImage(e),$(e,i[0],s,this),s):("image"!=this.imageMode&&(n=(h=new gt(t)).Lines(),h.Empty()?h=null:(a=this.textFont||Z(J(t,"font-family")),this.splitWidth&&(n=h.SplitWidth(this.splitWidth,this.ctxt,a,this.textHeight)),o="tag"==this.bgColour?J(t,"background-color"):this.bgColour,r="tag"==this.bgOutline?J(t,"color"):this.bgOutline)),h||e?(s=new ft(this,n,t,l,2,this.textHeight+2,this.textColour||J(t,"color"),o,this.bgRadius,r,this.bgOutlineThickness,a,this.padding,h&&h.original),e?(s.SetImage(e),$(e,i[0],s,this)):s.Init(),s):void 0)},n.UpdateTag=function(t,i){var e=this.textColour||J(i,"color"),s=this.textFont||Z(J(i,"font-family")),n="tag"==this.bgColour?J(i,"background-color"):this.bgColour,h="tag"==this.bgOutline?J(i,"color"):this.bgOutline;t.a=i,t.title=i.title,t.colour==e&&t.textFont==s&&t.bgColour==n&&t.bgOutline==h||t.SetFont(s,e,n,h)},n.Weight=function(t){var i,e,s,n,h=t.length,a=[],o=this.weightFrom?this.weightFrom.split(/[, ]/):[null],r=o.length;for(e=0;e<h;++e)for(a[e]=[],s=0;s<r;++s)i=K(t[e].a,o[s],this.textHeight),(!this.max_weight[s]||i>this.max_weight[s])&&(this.max_weight[s]=i),(!this.min_weight[s]||i<this.min_weight[s])&&(this.min_weight[s]=i),a[e][s]=i;for(s=0;s<r;++s)this.max_weight[s]>this.min_weight[s]&&(n=1);if(n)for(e=0;e<h;++e)t[e].SetWeight(a[e])},n.Load=function(){var t,i,e,s,n,h,a,o,r=this.GetTags(),l=[],u=[],c={sphere:O,vcylinder:F,hcylinder:E,vring:B,hring:P};if(r.length){for(u.length=r.length,o=0;o<r.length;++o)u[o]=o;for(this.shuffleTags&&_(u),s=100*this.radiusX,n=100*this.radiusY,h=100*this.radiusZ,this.max_radius=d(s,d(n,h)),o=0;o<r.length;++o)(i=this.CreateTag(r[u[o]]))&&l.push(i);for(this.weight&&this.Weight(l,!0),this.shapeArgs?this.shapeArgs[0]=l.length:(t=(e=this.shape.toString().split(/[(),]/)).shift(),"function"==typeof window[t]?this.shape=window[t]:this.shape=c[t]||c.sphere,this.shapeArgs=[l.length,s,n,h].concat(e)),a=this.shape.apply(this,this.shapeArgs),this.listLength=l.length,o=0;o<l.length;++o)l[o].position=new I(a[o][0],a[o][1],a[o][2])}this.noTagsMessage&&!l.length&&(l=this.Message("No tags")),this.taglist=l},n.Update=function(){var t,i,e,s,n,h,a=this.GetTags(),o=[],r=this.taglist,l=[],u=[];if(!this.shapeArgs)return this.Load();if(a.length){for(s=this.listLength=a.length,e=r.length,n=0;n<e;++n)o.push(r[n]),u.push(n);for(n=0;n<s;++n){for(h=0,t=0;h<e;++h)r[h].EqualTo(a[n])&&(this.UpdateTag(o[h],a[n]),t=u[h]=-1);t||l.push(n)}for(n=0,h=0;n<e;++n)-1==u[h]?u.splice(h,1):++h;if(u.length){for(_(u);u.length&&l.length;)n=u.shift(),h=l.shift(),o[n]=this.CreateTag(a[h]);for(u.sort((function(t,i){return t-i}));u.length;)o.splice(u.pop(),1)}for(h=o.length/(l.length+1),n=0;l.length;)o.splice(m(++n*h),0,this.CreateTag(a[l.shift()]));for(this.shapeArgs[0]=s=o.length,i=this.shape.apply(this,this.shapeArgs),n=0;n<s;++n)o[n].position=new I(i[n][0],i[n][1],i[n][2]);this.weight&&this.Weight(o)}this.taglist=o},n.SetShadow=function(t){t.shadowBlur=this.shadowBlur,t.shadowOffsetX=this.shadowOffset[0],t.shadowOffsetY=this.shadowOffset[1]},n.Draw=function(t){if(!this.paused){var i,e,s,n,h=this.canvas,a=h.width,o=h.height,r=0,l=(t-this.time)*mt.interval/1e3,u=a/2+this.offsetX,c=o/2+this.offsetY,g=this.ctxt,d=-1,f=this.taglist,m=f.length,w=this.frontSelect,p=this.centreFunc==A;if(this.time=t,this.frozen&&this.drawn)return this.Animate(a,o,l);for(n=this.AnimateFixed(),g.setTransform(1,0,0,1,0,0),s=0;s<m;++s)f[s].Calc(this.transform,this.fixedAlpha);if(f=function(t,i){var e,s=[],n=t.length;for(e=0;e<n;++e)s.push(t[e]);return s.sort(i),s}(f,(function(t,i){return i.z-t.z})),n&&this.fixedAnim.active)i=this.fixedAnim.tag.UpdateActive(g,u,c);else{for(this.active=null,s=0;s<m;++s)(e=this.mx>=0&&this.my>=0&&this.taglist[s].CheckActive(g,u,c))&&e.sc>r&&(!w||e.z<=0)&&(d=s,(i=e).tag=this.taglist[s],r=e.sc);this.active=i}for(this.txtOpt||this.shadow&&this.SetShadow(g),g.clearRect(0,0,a,o),s=0;s<m;++s){if(!p&&f[s].z<=0){try{this.centreFunc(g,a,o,u,c)}catch(t){alert(t),this.centreFunc=A}p=!0}i&&i.tag==f[s]&&i.PreDraw(g,f[s],u,c)||f[s].Draw(g,u,c),i&&i.tag==f[s]&&i.PostDraw(g)}this.freezeActive&&i?this.Freeze():(this.UnFreeze(),this.drawn=m==this.listLength),this.fixedCallback&&(this.fixedCallback(this,this.fixedCallbackTag),this.fixedCallback=null),n||this.Animate(a,o,l),i&&i.LastDraw(g),h.style.cursor=i?this.activeCursor:"",this.Tooltip(i,this.taglist[d])}},n.TooltipNone=function(){},n.TooltipNative=function(t,i){this.canvas.title=t?i&&i.title?i.title:"":this.ctitle},n.SetTTDiv=function(t,i){var e=this,s=e.ttdiv.style;t!=e.ttdiv.innerHTML&&(s.display="none"),e.ttdiv.innerHTML=t,i&&(i.title=e.ttdiv.innerHTML),"none"!=s.display||e.tttimer||(e.tttimer=setTimeout((function(){var t=ct(e.canvas.id);s.display="block",s.left=t.x+e.mx+"px",s.top=t.y+e.my+24+"px",e.tttimer=null}),e.tooltipDelay))},n.TooltipDiv=function(t,i){t&&i&&i.title?this.SetTTDiv(i.title,i):!t&&-1!=this.mx&&-1!=this.my&&this.ctitle.length?this.SetTTDiv(this.ctitle):this.ttdiv.style.display="none"},n.Transform=function(t,i,e){if(i||e){var s=c(i),n=g(i),h=c(e),a=g(e),o=new M([a,0,h,0,1,0,-h,0,a]),r=new M([1,0,0,0,n,-s,0,s,n]);t.transform=t.transform.mul(o.mul(r))}},n.AnimateFixed=function(){var t,i,e,s,n;return this.fadeIn&&((i=D()-this.startTime)>=this.fadeIn?(this.fadeIn=0,this.fixedAlpha=1):this.fixedAlpha=i/this.fadeIn),!!this.fixedAnim&&(this.fixedAnim.transform||(this.fixedAnim.transform=this.transform),t=this.fixedAnim,i=D()-t.t0,e=t.angle,n=this.animTiming(t.t,i),this.transform=t.transform,i>=t.t?(this.fixedCallbackTag=t.tag,this.fixedCallback=t.cb,this.fixedAnim=this.yaw=this.pitch=0):e*=n,s=M.Rotation(e,t.axis),this.transform=this.transform.mul(s),0!=this.fixedAnim)},n.AnimatePosition=function(t,i,e){var s,n,h=this,a=h.mx,o=h.my;!h.frozen&&a>=0&&o>=0&&a<t&&o<i?(s=h.maxSpeed,n=h.reverse?-1:1,h.lx||(h.yaw=(2*a*s/t-s)*n*e),h.ly||(h.pitch=(2*o*s/i-s)*-n*e),h.initial=null):h.initial||(h.frozen&&!h.freezeDecel?h.yaw=h.pitch=0:h.Decel(h)),this.Transform(h,h.pitch,h.yaw)},n.AnimateDrag=function(t,i,e){var s=this,n=100*e*s.maxSpeed/s.max_radius/s.zoom;s.dx||s.dy?(s.lx||(s.yaw=s.dx*n/s.stretchX),s.ly||(s.pitch=s.dy*-n/s.stretchY),s.dx=s.dy=0,s.initial=null):s.initial||s.Decel(s),this.Transform(s,s.pitch,s.yaw)},n.Freeze=function(){this.frozen||(this.preFreeze=[this.yaw,this.pitch],this.frozen=1,this.drawn=0)},n.UnFreeze=function(){this.frozen&&(this.yaw=this.preFreeze[0],this.pitch=this.preFreeze[1],this.frozen=0)},n.Decel=function(t){var i=t.minSpeed,e=u(t.yaw),s=u(t.pitch);!t.lx&&e>i&&(t.yaw=e>t.z0?t.yaw*t.decel:0),!t.ly&&s>i&&(t.pitch=s>t.z0?t.pitch*t.decel:0)},n.Zoom=function(t){this.z2=this.z1*(1/t),this.drawn=0},n.Clicked=function(t){var i=this.active;try{i&&i.tag&&(!1===this.clickToFront||null===this.clickToFront?i.tag.Clicked(t):this.TagToFront(i.tag,this.clickToFront,(function(){i.tag.Clicked(t)}),!0))}catch(t){}},n.Wheel=function(t){var i=this.zoom+this.zoomStep*(t?1:-1);this.zoom=f(this.zoomMax,d(this.zoomMin,i)),this.Zoom(this.zoom)},n.BeginDrag=function(t){this.down=tt(t,this.canvas),t.cancelBubble=!0,t.returnValue=!1,t.preventDefault&&t.preventDefault()},n.Drag=function(t,i){if(this.dragControl&&this.down){var e=this.dragThreshold*this.dragThreshold,s=i.x-this.down.x,n=i.y-this.down.y;(this.dragging||s*s+n*n>e)&&(this.dx=s,this.dy=n,this.dragging=1,this.down=i)}return this.dragging},n.EndDrag=function(){var t=this.dragging;return this.dragging=this.down=null,t},n.BeginPinch=function(t){this.pinched=[wt(t),this.zoom],t.preventDefault&&t.preventDefault()},n.Pinch=function(t){var i,e,s=this.pinched;s&&(e=wt(t),i=s[1]*e/s[0],this.zoom=f(this.zoomMax,d(this.zoomMin,i)),this.Zoom(this.zoom))},n.EndPinch=function(t){this.pinched=null},n.Pause=function(){this.paused=!0},n.Resume=function(){this.paused=!1},n.SetSpeed=function(t){this.initial=t,this.yaw=t[0]*this.maxSpeed,this.pitch=t[1]*this.maxSpeed},n.FindTag=function(t){if(!S(t))return null;if(S(t.index)&&(t=t.index),!b(t))return this.taglist[t];var i,e,s;for(S(t.id)?(i="id",e=t.id):S(t.text)&&(i="innerText",e=t.text),s=0;s<this.taglist.length;++s)if(this.taglist[s].a[i]==e)return this.taglist[s]},n.RotateTag=function(t,i,e,s,n,h){var a=t.xformed,o=new I(a.x,a.y,a.z),r=function(t,i){return i=i*Math.PI/180,t=t*Math.PI/180,new I(c(t)*g(i),-c(i),-g(t)*g(i))}(e,i),l=o.angle(r),u=o.cross(r).unit();0==l?(this.fixedCallbackTag=t,this.fixedCallback=n):this.fixedAnim={angle:-l,axis:u,t:s,t0:D(),cb:n,tag:t,active:h}},n.TagToFront=function(t,i,e,s){this.RotateTag(t,0,0,i,e,s)},mt.Start=function(t,i,e){mt.Delete(t),mt.tc[t]=new mt(t,i,e)},mt.Linear=function(t,i){return i/t},mt.Smooth=function(t,i){return.5-g(i*Math.PI/t)/2},mt.Pause=function(t){pt("Pause",t)},mt.Resume=function(t){pt("Resume",t)},mt.Reload=function(t){pt("Load",t)},mt.Update=function(t){pt("Update",t)},mt.SetSpeed=function(t,i){return!(!b(i)||!mt.tc[t]||isNaN(i[0])||isNaN(i[1]))&&(mt.tc[t].SetSpeed(i),!0)},mt.TagToFront=function(t,i){return!!b(i)&&(i.lat=i.lng=0,mt.RotateTag(t,i))},mt.RotateTag=function(t,i){if(b(i)&&mt.tc[t]){isNaN(i.time)&&(i.time=500);var e=mt.tc[t].FindTag(i);if(e)return mt.tc[t].RotateTag(e,i.lat,i.lng,i.time,i.callback,i.active),!0}return!1},mt.Delete=function(t){var i,e,s,n,h;if(C[t]&&(e=T.getElementById(t)))for(i=0;i<C[t].length;++i)s=C[t][i][0],n=C[t][i][1],(h=(h=e)||T).removeEventListener?h.removeEventListener(s,n):h.detachEvent("on"+s,n);delete C[t],delete mt.tc[t]},mt.NextFrameRAF=function(){requestAnimationFrame(ut)},mt.NextFrameTimeout=function(t){setTimeout(lt,t)},mt.tc={},mt.options={z1:2e4,z2:2e4,z0:2e-4,freezeActive:!1,freezeDecel:!1,activeCursor:"pointer",pulsateTo:1,pulsateTime:3,reverse:!1,depth:.5,maxSpeed:.05,minSpeed:0,decel:.95,interval:20,minBrightness:.1,maxBrightness:1,outlineColour:"#ffff99",outlineThickness:2,outlineOffset:5,outlineMethod:"outline",outlineRadius:0,textColour:"#ff99ff",textHeight:15,textFont:"Helvetica, Arial, sans-serif",shadow:"#000",shadowBlur:0,shadowOffset:[0,0],initial:null,hideTags:!0,zoom:1,weight:!1,weightMode:"size",weightFrom:null,weightSize:1,weightSizeMin:null,weightSizeMax:null,weightGradient:{0:"#f00",.33:"#ff0",.66:"#0f0",1:"#00f"},txtOpt:!0,txtScale:2,frontSelect:!1,wheelZoom:!0,zoomMin:.3,zoomMax:3,zoomStep:.05,shape:"sphere",lock:null,tooltip:null,tooltipDelay:300,tooltipClass:"tctooltip",radiusX:1,radiusY:1,radiusZ:1,stretchX:1,stretchY:1,offsetX:0,offsetY:0,shuffleTags:!1,noSelect:!1,noMouse:!1,imageScale:1,paused:!1,dragControl:!1,dragThreshold:4,centreFunc:A,splitWidth:0,animTiming:"Smooth",clickToFront:!1,fadeIn:0,padding:0,bgColour:null,bgRadius:0,bgOutline:null,bgOutlineThickness:0,outlineIncrease:4,textAlign:"centre",textVAlign:"middle",imageMode:null,imagePosition:null,imagePadding:2,imageAlign:"centre",imageVAlign:"middle",noTagsMessage:!0,centreImage:null,pinchZoom:!1,repeatTags:0,minTags:0},mt.options)mt[t]=mt.options[t];window.TagCanvas=mt,j("load",(function(){mt.loaded=1}),window)}()},62:function(t,i,e){"use strict";var s=e(16);e.n(s).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,