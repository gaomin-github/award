(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{10:function(e,t,s){"use strict";var i=s(12),a=s.n(i),r=s(4),n=s.n(r);s(2);var c={namespaced:!0,state:()=>({taskId:"",scheduleList:null,curUser:null,curSchedule:null,subId:"",taskHistory:null,editing:!1,pathArr:"",pageMove:""}),getters:{totalValue:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].worth);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.worth)+Number(t.worth):Number(e)+Number(t.worth));return Number(t)},score:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].process);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.process)+Number(t.process):Number(e)+Number(t.process));return Number(t)}},mutations:{initTask(e,t){e.scheduleList=t.schedules,e.taskId=t.taskId},insertSchedule(e,t){e.scheduleList.push(t)},updateSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subId===e.subId)return!0});s>=0&&e.scheduleList.splice(s,1,t)},deleteSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subid===e.subid)return!0});e.scheduleList.splice(s,1)},updateCurUser(e,t){e.curUser=t},updateCurSchedule(e,t){e.curSchedule=t},updateSubId(e,t){e.subId=t},updateEditing(e,t){e.editing=t},pushPathArr(e,t){e.pathArr+="/"+t},popPathArr(e){let t=e.pathArr.split("/");t.pop(),e.pathArr=t.join("/")},setPageMove(e,t){e.pageMove=t}}};var o={namespaced:!0,state:()=>({curArea:null}),getters:{getCurArea:e=>e.curArea},mutations:{setCurArea(e,t){e.curArea=t}}};var l={namespaced:!0,state:()=>({userInfo:{userId:"",token:""}}),getters:{getUserInfo:e=>{if(e.userInfo&&e.userInfo.token)return e.userInfo;let t=localStorage.getItem("userInfo");return t?(e.userInfo=JSON.parse(t),JSON.parse(t)):null}},mutations:{updateUserInfo(e,t){console.log(t,"params",25),e.userInfo=t}}};var u=new n.a.Store({modules:{weekly:c,estate:o,rbac:l}});let h=a.a.create({timeout:3e4,headers:{}});h.interceptors.request.use(e=>{let t=u.getters["rbac/getUserInfo"];return e.headers.Authorization=""+(t&&t.token||""),e}),h.interceptors.response.use(e=>{if(401!==e.status)return e;location.reload()});t.a=h},106:function(e,t,s){"use strict";var i=s(37);s.n(i).a},107:function(e,t,s){"use strict";var i=s(38);s.n(i).a},108:function(e,t,s){"use strict";var i=s(39);s.n(i).a},116:function(e,t,s){"use strict";s.r(t);var i={props:{value:{type:Number,default:0}}},a=(s(106),s(1)),r=Object(a.a)(i,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"progress-wrapper"},[t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[t("line",{staticClass:"progress-path ",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),this._v(" "),this.value?t("line",{staticClass:"progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":100*this.value+" 500",y2:"5"}}):this._e()])])}),[],!1,null,"2215f8b0",null).exports;var n={components:{uiProgress:r},props:{imgUrl:String,imgLoading:{type:Boolean,default:!1}},data:()=>({loadingValue:0,timerTask:null,touchStartTime:0,showDel:!1}),watch:{imgUrl(e,t){console.log("49"),console.log(e,49)}},mounted(){},methods:{chooseImg(){this.$refs.imgPicker.click()},changeImg(e){this.$emit("changeLoading",!0);let t=[],s=this.$refs.imgPicker.files;if(s&&0!==s.length)for(let e in s)if(e<s.length){let i=s[e],a={id:Math.random(),fileObj:i};t.push(a),this.loadingValue=t.length/s.length,t.length===s.length&&(this.$emit("chooseImg",t),requestAnimationFrame(()=>{this.$emit("changeImgLoading",!1),this.loadingValue=0}))}},handleTouchStart(){this.imgUrl&&(this.touchStartTime=(new Date).getTime(),this.timerTask=setTimeout(()=>{this.showDel=!0},1e3))},handleTouchEnd(){(new Date).getTime()-this.touchStartTime<1e3&&(this.showDel=!1,clearTimeout(this.timerTask),this.timerTask=null)},handleDropFile(){this.$emit("dropImg",this.imgUrl)}}},c=(s(107),Object(a.a)(n,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"img-uploader-wrapper"},[e.imgUrl?s("img",{class:["assess-img",e.showDel?"assess-img-del":""],attrs:{src:e.imgUrl},on:{touchstart:e.handleTouchStart,touchend:e.handleTouchEnd}}):e._e(),e._v(" "),e.imgUrl?e._e():s("div",{staticClass:"assess-bg",on:{click:e.chooseImg}},[e._v("+")]),e._v(" "),e.imgUrl?e._e():s("input",{ref:"imgPicker",staticStyle:{opacity:"0"},attrs:{type:"file",accept:"image/*",multiple:"multiple"},on:{change:e.changeImg}}),e._v(" "),!e.imgUrl&&e.imgLoading?s("div",{staticClass:"loading"},[s("ui-progress",{attrs:{value:e.loadingValue}})],1):e._e(),e._v(" "),e.showDel?s("div",{staticClass:"del"},[s("i",{staticClass:"icon fa fa-times",on:{click:e.handleDropFile}})]):e._e()])}),[],!1,null,"44845176",null));t.default=c.exports},13:function(e,t,s){"use strict";s.d(t,"a",(function(){return a}));let i=(new Date).getTime();function a(e,t){return function(){(new Date).getTime()-i<=t||(i=(new Date).getTime(),e(arguments))}}},140:function(e,t,s){"use strict";s.r(t);var i=s(10),a=s(4),r=s(13),n=(s(116),{components:{headerTool:()=>s.e(3).then(s.bind(null,144)),imgUploader:()=>Promise.resolve().then(s.bind(null,116))},data:()=>({content:"",worth:0,process:0,pics:[],curPics:[],curPicPath:[],imgLoading:!1}),computed:{...Object(a.mapState)("weekly",["scheduleList","taskId","curSchedule","subId"])},mounted(){this._prevData(),this.$refs.content.focus()},beforeDestroy(){this.back()},methods:{...Object(a.mapMutations)("weekly",["updateSchedule","updateEditing"]),back(){if(console.log(this.curPicPath,111),this.curPicPath&&this.curPicPath.length>0){let e=new Date,t=`${e.getFullYear()}-${e.getMonth()+1}-${e.getDay()}`;t=t.replace(/\b(?=\d(\s|\:|\-|\b))/g,0),this.pics.push({createTime:t,urls:this.curPicPath})}this.curPicPath=[],this._saveSchedule(),this.updateEditing(!1)},_prevData(){this.content=this.curSchedule.content,this.worth=this.curSchedule.worth,this.process=this.curSchedule.process,this.pics=this.curSchedule.pics||[],console.log(this.pics,128)},inputHandler(){Object(r.a)(()=>{this._saveSchedule()},500)()},_saveSchedule(){this.updateSchedule(Object.assign(this.curSchedule,{content:this.content,worth:this.worth,process:this.process,pics:this.pics}));let e=encodeURIComponent(JSON.stringify(this.scheduleList));i.a.get(`/task/updateTask?taskId=${this.taskId}&scheduleStr=${e}`).then(e=>{if(200===e.status)return e.data})},changeImgLoading(e){console.log(e,174),this.imgLoading=e},async chooseImg(e){this.curPics.push(...e);let t=new FormData;e.map(e=>{t.append("file",e.fileObj)}),t.append("path","pictures/weekly"),Object(i.a)({url:"/common/file",method:"post",data:t,headers:{"content-type":"multipart/form-data"}}).then(e=>{200===e.status&&(this.curPicPath.push(...e.data),this.imgLoading=!1)})},deleteImg(e){Object(i.a)({url:"/common/dropfile",method:"post",data:{filePath:e}}).then(t=>{if(200===t.status&&t.data){let t=this.curPicPath.findIndex(t=>t===e);this.curPicPath.splice(t,1),this.imgLoading=!1}})}}}),c=(s(108),s(1)),o=Object(c.a)(n,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"editor-wrapper"},[s("header-tool",{on:{back:e.back}}),e._v(" "),s("div",{staticClass:"container"},[s("div",{staticClass:"grade"},[s("div",{staticClass:"grade-progress"},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[s("line",{staticClass:"grade-progress-path",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),e._v(" "),e.process&&e.worth?s("line",{staticClass:"grade-progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":(e.process<e.worth?100*e.process/e.worth:100)+" 500",y2:"5"}}):e._e()])]),e._v(" "),s("div",{staticClass:"grade-worth"},[e._v("\n        总分\n        "),s("input",{directives:[{name:"model",rawName:"v-model",value:e.worth,expression:"worth"}],attrs:{type:"number"},domProps:{value:e.worth},on:{input:function(t){t.target.composing||(e.worth=t.target.value)}}})]),e._v(" "),s("div",{staticClass:"grade-process"},[e._v("\n        ,现得分\n        "),s("span",[s("input",{directives:[{name:"model",rawName:"v-model",value:e.process,expression:"process"}],attrs:{type:"number"},domProps:{value:e.process},on:{input:function(t){t.target.composing||(e.process=t.target.value)}}})])])]),e._v(" "),s("textarea",{directives:[{name:"model",rawName:"v-model",value:e.content,expression:"content"}],ref:"content",staticClass:"content",attrs:{placeholder:"add some content"},domProps:{value:e.content},on:{input:[function(t){t.target.composing||(e.content=t.target.value)},e.inputHandler]}}),e._v(" "),s("div",{staticClass:"schedule"},[e.curPicPath&&e.curPicPath.length>0?s("div",{staticClass:"schedule-cur"},[e._l(e.curPicPath,(function(t){return s("img-uploader",{key:t,staticClass:"schedule-cur-item",attrs:{imgUrl:t},on:{chooseImg:e.chooseImg,dropImg:e.deleteImg}})})),e._v(" "),s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:e.imgLoading},on:{chooseImg:e.chooseImg,changeLoading:e.changeImgLoading}})],2):s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:e.imgLoading},on:{chooseImg:e.chooseImg,changeLoading:e.changeImgLoading}})],1),e._v(" "),e.pics&&e.pics.length>0?s("div",{staticClass:"schedule history"},e._l(e.pics,(function(t,i){return s("div",{key:i,staticClass:"history-item"},[s("div",{staticClass:"history-item-time"},[e._v(e._s(t.createTime))]),e._v(" "),t.urls&&t.urls.length>0?s("div",{staticClass:"history-item-pics"},e._l(t.urls,(function(e){return s("img-uploader",{key:e,staticClass:"history-item-pics-item",attrs:{imgUrl:e}})})),1):e._e()])})),0):e._e()])],1)}),[],!1,null,"1edf3b9c",null);t.default=o.exports},37:function(e,t,s){},38:function(e,t,s){},39:function(e,t,s){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,