(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{136:function(t,e,a){"use strict";a.r(e);var i=a(3),n=a(13);const o="108.8371912900,34.2032353700",r=[610103,610104,610113];var s={data:()=>({gardens:[],driveRoutes:[],mapObj:null,pathObj:null}),computed:{...Object(i.b)("estate",["getCurArea"])},async mounted(){await this._initMapScript(),await this._initMapUi(),await this._initGardens(),this._initDriveRoute(),setTimeout(async()=>{},1e3)},methods:{async _initMapScript(){return new Promise((t,e)=>{window.onLoad=async()=>(this._initMapContainer(),t());let a=document.createElement("script");a.charset="utf-8",a.src="https://webapi.amap.com/maps?v=1.4.15&key=17569efbd54a284b8bd0ce338ae71616&callback=onLoad",document.head.appendChild(a)})},_initMapContainer(){let t=this._initLocation(o),e=this._initLocation(this.getCurArea.location);this.mapObj=new AMap.Map("map-container",{zoom:11,center:[(Number(t[0])+Number(e[0]))/2,(Number(t[1])+Number(e[1]))/2],mapStyle:"amap://styles/light"})},async _initMapUi(){return new Promise((t,e)=>{let a=document.createElement("script");a.charset="utf-8",a.src="https://webapi.amap.com/ui/1.0/main.js?v=1.0.11",document.head.appendChild(a);let i=this;a.onload=()=>{AMapUI.loadUI(["overlay/SimpleMarker"],(function(e){return new e({iconTheme:"default",iconStyle:"orange",map:i.mapObj,position:i._initLocation(o),label:{content:"高新软件园",offset:new AMap.Pixel(-10,-20)}}),new e({iconTheme:"default",iconStyle:"orange",map:i.mapObj,position:i._initLocation(i.getCurArea.location),label:{content:i.getCurArea.label,offset:new AMap.Pixel(-10,-20)}}),t()}))}})},_initGardens(){n.a.get("/xian/aroundGarden?originLocation="+this.getCurArea.location).then(t=>{if(200===t.status&&(this.gardens=t.data,this.gardens&&this.gardens.length>0)){let t=this;AMapUI.loadUI(["overlay/SvgMarker"],(function(e){t.gardens.map((a,i)=>{var n=new e.Shape.Circle({height:16,strokeWidth:1,strokeColor:"#fff",fillColor:"#177261"});n.getCenter();new e(n,{map:t.mapObj,position:t._initLocation(a.location),containerClassNames:"shape-Circle",iconLabel:{innerHTML:i+1,style:{color:"#fff",fontSize:"12px"}}})})}))}})},_initPathLns(){let t=this;AMapUI&&AMapUI.load(["ui/misc/PathSimplifier","lib/$"],(function(e,a){let i=new e({zIndex:100,map:t.mapObj,getPath:(t,e)=>t.path,renderOptions:{renderAllPointsIfNumberBelow:100}});i.setData([{name:"路线0",path:[...t.driveRoutes]}]),i.createPathNavigator(0,{loop:!0,speed:5e3}).start()}))},_initDistrict(){let t=this;AMapUI.load(["ui/geo/DistrictExplorer","lib/$"],(function(e){let a=new e({map:t.mapObj});var i=["#3366cc","#dc3912","#ff9900","#aa9900","#ff1901","#aa0101","red","green"];r.map((t,e)=>{a.loadAreaNode(t,(function(t,n){a.renderSubFeatures(n,(function(t,e){return{cursor:"default",bubble:!0,strokeColor:"blue",strokeOpacity:1,strokeWeight:1,fillColor:"red",fillOpacity:.35}})),a.renderParentFeature(n,{cursor:"default",bubble:!0,strokeColor:null,strokeOpacity:1,strokeWeight:1,fillColor:i[e],fillOpacity:.35})}))})}))},_initDriveRoute(){n.a.get(`/xian/drivingRoute?originLocation=${this.getCurArea.location}&destination=${o}`).then(t=>{200===t.status&&t.data.steps&&t.data.steps.length>0&&(t.data.steps.forEach(t=>{if(t.polyline){this._formatPolyline(t.polyline);this.driveRoutes.push(...this._formatPolyline(t.polyline))}}),this._initPathLns())})},_initLocation:t=>t.split(","),_formatPolyline(t){return t.split(";").map(t=>{let e=this._initLocation(t);return[Number(e[0]),Number(e[1])]})}}},l=(a(98),a(4)),c=Object(l.a)(s,(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"map-wrapper"},[t.gardens&&t.gardens.length>0?a("section",{staticClass:"garden"},t._l(t.gardens,(function(e,i){return a("section",{key:i,staticClass:"garden-item"},[a("section",{staticClass:"garden-item-icon"},[t._v(t._s(i+1))]),t._v(" "),a("section",{staticClass:"garden-item-label"},[t._v("\n        "+t._s(e.name)+",距离"+t._s(e.distance)+"米\n      ")])])})),0):t._e(),t._v(" "),a("section",{staticClass:"map-container",attrs:{id:"map-container"}})])}),[],!1,null,"57b8c1c3",null);e.default=c.exports},33:function(t,e,a){},98:function(t,e,a){"use strict";var i=a(33);a.n(i).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,