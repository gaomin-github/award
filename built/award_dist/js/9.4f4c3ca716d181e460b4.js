(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{101:function(t,e,s){"use strict";var i=s(34);s.n(i).a},102:function(t,e,s){"use strict";var i=s(35);s.n(i).a},103:function(t,e,s){"use strict";var i=s(36);s.n(i).a},11:function(t,e,s){"use strict";s.d(e,"a",(function(){return a}));let i=(new Date).getTime();function a(t,e){return function(){(new Date).getTime()-i<=e||(i=(new Date).getTime(),t(arguments))}}},110:function(t,e,s){"use strict";s.r(e);var i={props:{value:{type:Number,default:0}}},a=(s(101),s(1)),r=Object(a.a)(i,(function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"progress-wrapper"},[e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[e("line",{staticClass:"progress-path ",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),this._v(" "),this.value?e("line",{staticClass:"progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":100*this.value+" 500",y2:"5"}}):this._e()])])}),[],!1,null,"2215f8b0",null).exports;var c={components:{uiProgress:r},props:{imgUrl:String,imgLoading:{type:Boolean,default:!1}},data:()=>({loadingValue:0,timerTask:null,touchStartTime:0,showDel:!1}),watch:{imgUrl(t,e){console.log("49"),console.log(t,49)}},mounted(){},methods:{chooseImg(){this.$refs.imgPicker.click()},changeImg(t){this.$emit("changeLoading",!0);let e=[],s=this.$refs.imgPicker.files;if(s&&0!==s.length)for(let t in s)if(t<s.length){let i=s[t],a={id:Math.random(),fileObj:i};e.push(a),this.loadingValue=e.length/s.length,e.length===s.length&&(this.$emit("chooseImg",e),requestAnimationFrame(()=>{this.$emit("changeImgLoading",!1),this.loadingValue=0}))}},handleTouchStart(){this.imgUrl&&(this.touchStartTime=(new Date).getTime(),this.timerTask=setTimeout(()=>{this.showDel=!0},1e3))},handleTouchEnd(){(new Date).getTime()-this.touchStartTime<1e3&&(this.showDel=!1,clearTimeout(this.timerTask),this.timerTask=null)},handleDropFile(){this.$emit("dropImg",this.imgUrl)}}},o=(s(102),Object(a.a)(c,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"img-uploader-wrapper"},[t.imgUrl?s("img",{class:["assess-img",t.showDel?"assess-img-del":""],attrs:{src:t.imgUrl},on:{touchstart:t.handleTouchStart,touchend:t.handleTouchEnd}}):t._e(),t._v(" "),t.imgUrl?t._e():s("div",{staticClass:"assess-bg",on:{click:t.chooseImg}},[t._v("+")]),t._v(" "),t.imgUrl?t._e():s("input",{ref:"imgPicker",staticStyle:{opacity:"0"},attrs:{type:"file",accept:"image/*",multiple:"multiple"},on:{change:t.changeImg}}),t._v(" "),!t.imgUrl&&t.imgLoading?s("div",{staticClass:"loading"},[s("ui-progress",{attrs:{value:t.loadingValue}})],1):t._e(),t._v(" "),t.showDel?s("div",{staticClass:"del"},[s("i",{staticClass:"icon fa fa-times",on:{click:t.handleDropFile}})]):t._e()])}),[],!1,null,"d5e1226c",null));e.default=o.exports},125:function(t,e,s){"use strict";s.r(e);var i=s(8),a=s(7),r=s(11),c=(s(110),{components:{headerTool:()=>s.e(2).then(s.bind(null,133)),imgUploader:()=>Promise.resolve().then(s.bind(null,110))},data:()=>({content:"",worth:0,process:0,pics:[],curPics:[],curPicPath:[],imgLoading:!1}),computed:{...Object(a.mapState)("weekly",["scheduleList","taskId","curSchedule","subId"])},mounted(){this._prevData(),this.$refs.content.focus()},beforeDestroy(){this.back()},methods:{...Object(a.mapMutations)("weekly",["updateSchedule","updateEditing"]),back(){if(console.log(this.curPicPath,111),this.curPicPath&&this.curPicPath.length>0){let t=new Date,e=`${t.getFullYear()}-${t.getMonth()+1}-${t.getDay()}`;e=e.replace(/\b(?=\d(\s|\:|\-|\b))/g,0),this.pics.push({createTime:e,urls:this.curPicPath})}this.curPicPath=[],this._saveSchedule(),this.updateEditing(!1)},_prevData(){this.content=this.curSchedule.content,this.worth=this.curSchedule.worth,this.process=this.curSchedule.process,this.pics=this.curSchedule.pics||[],console.log(this.pics,128)},inputHandler(){Object(r.a)(()=>{this._saveSchedule()},500)()},_saveSchedule(){this.updateSchedule(Object.assign(this.curSchedule,{content:this.content,worth:this.worth,process:this.process,pics:this.pics}));let t=encodeURIComponent(JSON.stringify(this.scheduleList));i.a.get(`/task/updateTask?taskId=${this.taskId}&scheduleStr=${t}`).then(t=>{if(200===t.status)return t.data})},changeImgLoading(t){console.log(t,174),this.imgLoading=t},async chooseImg(t){this.curPics.push(...t);let e=new FormData;t.map(t=>{e.append("file",t.fileObj)}),e.append("path","pictures/weekly"),Object(i.a)({url:"/common/file",method:"post",data:e,headers:{"content-type":"multipart/form-data"}}).then(t=>{200===t.status&&(this.curPicPath.push(...t.data),this.imgLoading=!1)})},deleteImg(t){Object(i.a)({url:"/common/dropfile",method:"post",data:{filePath:t}}).then(e=>{if(200===e.status&&e.data){let e=this.curPicPath.findIndex(e=>e===t);this.curPicPath.splice(e,1),this.imgLoading=!1}})}}}),o=(s(103),s(1)),n=Object(o.a)(c,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"editor-wrapper"},[s("header-tool",{on:{back:t.back}}),t._v(" "),s("div",{staticClass:"container"},[s("div",{staticClass:"grade"},[s("div",{staticClass:"grade-progress"},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[s("line",{staticClass:"grade-progress-path",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),t._v(" "),t.process&&t.worth?s("line",{staticClass:"grade-progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":(t.process<t.worth?100*t.process/t.worth:100)+" 500",y2:"5"}}):t._e()])]),t._v(" "),s("div",{staticClass:"grade-worth"},[t._v("\n        总分\n        "),s("input",{directives:[{name:"model",rawName:"v-model",value:t.worth,expression:"worth"}],attrs:{type:"number"},domProps:{value:t.worth},on:{input:function(e){e.target.composing||(t.worth=e.target.value)}}})]),t._v(" "),s("div",{staticClass:"grade-process"},[t._v("\n        ,现得分\n        "),s("span",[s("input",{directives:[{name:"model",rawName:"v-model",value:t.process,expression:"process"}],attrs:{type:"number"},domProps:{value:t.process},on:{input:function(e){e.target.composing||(t.process=e.target.value)}}})])])]),t._v(" "),s("textarea",{directives:[{name:"model",rawName:"v-model",value:t.content,expression:"content"}],ref:"content",staticClass:"content",attrs:{placeholder:"add some content"},domProps:{value:t.content},on:{input:[function(e){e.target.composing||(t.content=e.target.value)},t.inputHandler]}}),t._v(" "),s("div",{staticClass:"schedule"},[t.curPicPath&&t.curPicPath.length>0?s("div",{staticClass:"schedule-cur"},[t._l(t.curPicPath,(function(e){return s("img-uploader",{key:e,staticClass:"schedule-cur-item",attrs:{imgUrl:e},on:{chooseImg:t.chooseImg,dropImg:t.deleteImg}})})),t._v(" "),s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:t.imgLoading},on:{chooseImg:t.chooseImg,changeLoading:t.changeImgLoading}})],2):s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:t.imgLoading},on:{chooseImg:t.chooseImg,changeLoading:t.changeImgLoading}})],1),t._v(" "),t.pics&&t.pics.length>0?s("div",{staticClass:"schedule history"},t._l(t.pics,(function(e,i){return s("div",{key:i,staticClass:"history-item"},[s("div",{staticClass:"history-item-time"},[t._v(t._s(e.createTime))]),t._v(" "),e.urls&&e.urls.length>0?s("div",{staticClass:"history-item-pics"},t._l(e.urls,(function(t){return s("img-uploader",{key:t,staticClass:"history-item-pics-item",attrs:{imgUrl:t}})})),1):t._e()])})),0):t._e()])],1)}),[],!1,null,"cf68433c",null);e.default=n.exports},34:function(t,e,s){},35:function(t,e,s){},36:function(t,e,s){},8:function(t,e,s){"use strict";var i=s(10);let a=s.n(i).a.create({timeout:3e4,headers:{}});e.a=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,