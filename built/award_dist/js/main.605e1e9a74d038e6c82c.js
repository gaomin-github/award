!function(e){function t(t){for(var n,r,i=t[0],a=t[1],s=0,u=[];s<i.length;s++)r=i[s],Object.prototype.hasOwnProperty.call(o,r)&&o[r]&&u.push(o[r][0]),o[r]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(c&&c(t);u.length;)u.shift()()}var n={},r={0:0},o={0:0};function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(e){var t=[];r[e]?t.push(r[e]):0!==r[e]&&{1:1}[e]&&t.push(r[e]=new Promise((function(t,n){for(var o="award_dist/css/"+e+"cb705f5.css",a=i.p+o,s=document.getElementsByTagName("link"),u=0;u<s.length;u++){var c=(f=s[u]).getAttribute("data-href")||f.getAttribute("href");if("stylesheet"===f.rel&&(c===o||c===a))return t()}var l=document.getElementsByTagName("style");for(u=0;u<l.length;u++){var f;if((c=(f=l[u]).getAttribute("data-href"))===o||c===a)return t()}var d=document.createElement("link");d.rel="stylesheet",d.type="text/css",d.onload=t,d.onerror=function(t){var o=t&&t.target&&t.target.src||a,i=new Error("Loading CSS chunk "+e+" failed.\n("+o+")");i.code="CSS_CHUNK_LOAD_FAILED",i.request=o,delete r[e],d.parentNode.removeChild(d),n(i)},d.href=a,0!==d.href.indexOf(window.location.origin+"/")&&(d.crossOrigin="anonymous"),document.getElementsByTagName("head")[0].appendChild(d)})).then((function(){r[e]=0})));var n=o[e];if(0!==n)if(n)t.push(n[2]);else{var a=new Promise((function(t,r){n=o[e]=[t,r]}));t.push(n[2]=a);var s,u=document.createElement("script");u.charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.src=function(e){return i.p+"award_dist/js/"+({}[e]||e)+"."+{1:"3e9c14a8c80203d17ccd"}[e]+".js"}(e),0!==u.src.indexOf(window.location.origin+"/")&&(u.crossOrigin="anonymous");var c=new Error;s=function(t){u.onerror=u.onload=null,clearTimeout(l);var n=o[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;c.message="Loading chunk "+e+" failed.\n("+r+": "+i+")",c.name="ChunkLoadError",c.type=r,c.request=i,n[1](c)}o[e]=void 0}};var l=setTimeout((function(){s({type:"timeout",target:u})}),12e4);u.onerror=u.onload=s,document.head.appendChild(u)}return Promise.all(t)},i.m=e,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i.oe=function(e){throw console.error(e),e};var a=window.webpackJsonp=window.webpackJsonp||[],s=a.push.bind(a);a.push=t,a=a.slice();for(var u=0;u<a.length;u++)t(a[u]);var c=s;i(i.s=4)}([function(e,t,n){},function(e,t){e.exports=Vue},function(e,t){e.exports=VueRouter},function(e,t,n){"use strict";function r(e,t,n,r,o,i,a,s){var u,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},c._ssrRegister=u):o&&(u=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(c.functional){c._injectStyles=u;var l=c.render;c.render=function(e,t){return u.call(t),l(e,t)}}else{var f=c.beforeCreate;c.beforeCreate=f?[].concat(f,u):[u]}return{exports:e,options:c}}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(6)},function(e,t,n){"use strict";var r=n(0);n.n(r).a},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),i=n(2),a=n.n(i);o.a.use(a.a);var s=new a.a({mode:"history",routes:[{path:"/",redirect:"/test/a"},{path:"/test/a",component:()=>n.e(1).then(n.bind(null,10))}]}),u={components:{},name:"App",data:()=>({}),mounted(){console.log((new Date).getTime()-performance.timing.navigationStart,27)}},c=(n(5),n(3)),l=Object(c.a)(u,(function(){var e=this.$createElement,t=this._self._c||e;return t("section",{staticClass:"app"},[t("router-view")],1)}),[],!1,null,null,null).exports;new o.a({el:"#app",components:{App:l},template:"<App/>",router:s})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,