(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{10:function(e,t,s){"use strict";var u=s(12),r=s.n(u),a=s(4),c=s.n(a);s(2);var n={namespaced:!0,state:()=>({taskId:"",scheduleList:null,curUser:null,curSchedule:null,subId:"",taskHistory:null,editing:!1,pathArr:"",pageMove:""}),getters:{totalValue:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].worth);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.worth)+Number(t.worth):Number(e)+Number(t.worth));return Number(t)},score:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].process);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.process)+Number(t.process):Number(e)+Number(t.process));return Number(t)}},mutations:{initTask(e,t){e.scheduleList=t.schedules,e.taskId=t.taskId},insertSchedule(e,t){e.scheduleList.push(t)},updateSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subId===e.subId)return!0});s>=0&&e.scheduleList.splice(s,1,t)},deleteSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subid===e.subid)return!0});e.scheduleList.splice(s,1)},updateCurUser(e,t){e.curUser=t},updateCurSchedule(e,t){e.curSchedule=t},updateSubId(e,t){e.subId=t},updateEditing(e,t){e.editing=t},pushPathArr(e,t){e.pathArr+="/"+t},popPathArr(e){let t=e.pathArr.split("/");t.pop(),e.pathArr=t.join("/")},setPageMove(e,t){e.pageMove=t}}};var l={namespaced:!0,state:()=>({curArea:null}),getters:{getCurArea:e=>e.curArea},mutations:{setCurArea(e,t){e.curArea=t}}};var i={namespaced:!0,state:()=>({userInfo:{userId:"",token:""}}),getters:{getUserInfo:e=>{if(e.userInfo&&e.userInfo.token)return e.userInfo;let t=localStorage.getItem("userInfo");return t?(e.userInfo=JSON.parse(t),JSON.parse(t)):null}},mutations:{updateUserInfo(e,t){console.log(t,"params",25),e.userInfo=t}}};var d=new c.a.Store({modules:{weekly:n,estate:l,rbac:i}});let o=r.a.create({timeout:3e4,headers:{}});o.interceptors.request.use(e=>{let t=d.getters["rbac/getUserInfo"];return e.headers.Authorization=""+(t&&t.token||""),e}),o.interceptors.response.use(e=>{if(401!==e.status)return e;location.reload()});t.a=o},109:function(e,t,s){"use strict";var u=s(40);s.n(u).a},110:function(e,t,s){"use strict";var u=s(41);s.n(u).a},111:function(e,t,s){"use strict";var u=s(42);s.n(u).a},120:function(e,t,s){"use strict";s.r(t);var u=s(4),r=s(13),a=s(10),c={data:()=>({touchStartX:0,touchEndX:0,iconInfos:[{bg:"rgba(248,169,97,1)",icon:"book"},{bg:"rgba(172,97,248,1)",icon:"language"},{bg:"rgba(247,35,111,1)",icon:"cutlery"},{bg:"rgba(0,178,255,1)",icon:"bell"}]}),props:{schedule:{type:Object,default:()=>({})},order:{type:Number,default:0}},model:{prop:"schedule",event:"update"},computed:{...Object(u.mapState)("weekly",["editing"])},mounted(){console.log(this.order,73)},methods:{...Object(u.mapMutations)("weekly",["updateCurSchedule","updateEditing","initTask","insertSchedule","updateSchedule","deleteSchedule"]),editScheduleContent(){this.updateCurSchedule(this.schedule),this.updateEditing(!0)},editScheduleNum(){this.$emit("editScheduleNum",this.schedule)},handleTouchStart(e){this.touchStartX=e.targetTouches[0].pageX,console.log(e.targetTouches[0].pageX,"-----start----")},handleTouchMove(e){this.touchEndX=e.targetTouches[0].pageX,console.log(e.targetTouches[0].pageX,"-----move----")},handleTouchEnd(e){console.log("handleTouchEnd"),console.log(`touchStartX:${this.touchStartX},toucheEndX:${this.touchEndX}`)}}},n=(s(109),s(1)),l=Object(n.a)(c,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{class:["schedule-wrapper schedule-item",e.order%2==0?"odd":"even"],on:{touchstart:e.handleTouchStart,touchmove:e.handleTouchMove,touchend:e.handleTouchEnd,click:e.editScheduleContent}},[s("i",{class:["icon","fa","fa-"+e.iconInfos[e.order%4].icon],style:{background:e.iconInfos[e.order%4].bg}}),e._v(" "),s("div",{class:["content",e.schedule.content?"":"content_blank"]},[e._v("\n    "+e._s(e.schedule.content||"add some schedules ~")+"\n")]),e._v(" "),s("div",{staticClass:"grade"})])}),[],!1,null,"4040b5c0",null).exports,i={props:{score:{type:Number,default:0}}},d=(s(110),{components:{headerTool:()=>s.e(3).then(s.bind(null,144)),schedule:l,circleChart:Object(n.a)(i,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"circle-chart-wrapper"},[t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg"}},[t("circle",{staticClass:"circle_path_bg"}),this._v(" "),t("circle",{staticClass:"circle_path",attrs:{"stroke-dasharray":200*this.score+" 500"}}),this._v(" "),1===this.score?t("path",{staticClass:"circle_mark_full",attrs:{d:"M 25 23 L 30 38 L 48 20"}}):t("text",{staticClass:"circle_mark",attrs:{x:"23",y:"35"}},[this._v("\n      "+this._s(Math.ceil(100*this.score))+"\n    ")])])])}),[],!1,null,"549b4f98",null).exports},data:()=>({}),computed:{...Object(u.mapState)("weekly",["scheduleList","taskId","curUser"]),...Object(u.mapGetters)("weekly",["totalValue","score"])},mounted(){this._initTask()},beforeDestroy(){this._saveTask()},methods:{...Object(u.mapMutations)("weekly",["initTask","insertSchedule","updateSchedule","deleteSchedule","updateCurUser"]),back(){let e=[];e=this.scheduleList&&this.scheduleList.length>1?this.scheduleList.filter((e,t)=>!!(e.content&&e.content.length>0)):this.scheduleList,this.initTask({taskId:this.taskId,schedules:e}),this._saveTask(),this.updateCurUser(null)},_initTask(){a.a.get("/task/task?userId="+this.curUser.userId).then(e=>{200===e.status&&e.data?(this.initTask(e.data[0]),console.log(this.scheduleList,104)):a.a.get("/task/createTask?userId="+this.curUser.userId).then(e=>{200===e.status&&e.data&&this.initTask(e.data)})})},addSchedule(){let e={subId:Math.random(),content:"",worth:null,process:null};this.insertSchedule(e)},editScheduleNum(e){Object(r.a)(()=>{e=this._checkNum(e),this.updateSchedule(e),this._saveTask()},500)()},_saveTask(){let e=encodeURIComponent(JSON.stringify(this.scheduleList));a.a.get(`/task/updateTask?taskId=${this.taskId}&scheduleStr=${e}`).then(e=>{if(200===e.status)return e.data})},_checkNum:e=>(Number(e.worth)<Number(e.process)||Number(e.worth)<0||Number(e.process)<0?e.errStatus=!0:e.errStatus=!1,e)}}),o=(s(111),Object(n.a)(d,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"task-wrapper"},[s("header",{staticClass:"user"}),e._v(" "),s("div",{staticClass:"content"},[s("div",{staticClass:"title"},[e._v("\r\n                Your Schedules\r\n            ")]),e._v(" "),e.scheduleList?s("div",{staticClass:"schedule"},e._l(e.scheduleList,(function(t,u){return s("schedule",{key:t.subId,staticClass:"schedule-item",attrs:{order:u},on:{editScheduleNum:e.editScheduleNum,deleteSchedule:e.deleteSchedule},model:{value:e.scheduleList[u],callback:function(t){e.$set(e.scheduleList,u,t)},expression:"scheduleList[index]"}})})),1):e._e()]),e._v(" "),s("i",{staticClass:"icon fa fa-plus",on:{click:e.addSchedule}})])}),[],!1,null,"bb9a29f6",null));t.default=o.exports},13:function(e,t,s){"use strict";s.d(t,"a",(function(){return r}));let u=(new Date).getTime();function r(e,t){return function(){(new Date).getTime()-u<=t||(u=(new Date).getTime(),e(arguments))}}},40:function(e,t,s){},41:function(e,t,s){},42:function(e,t,s){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,