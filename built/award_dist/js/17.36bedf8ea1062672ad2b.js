(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{10:function(e,t,s){"use strict";var r=s(12),u=s.n(r),a=s(4),n=s.n(a);s(2);var i={namespaced:!0,state:()=>({taskId:"",scheduleList:null,curUser:null,curSchedule:null,subId:"",taskHistory:null,editing:!1,pathArr:"",pageMove:""}),getters:{totalValue:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].worth);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.worth)+Number(t.worth):Number(e)+Number(t.worth));return Number(t)},score:e=>{if(!e.scheduleList||0==e.scheduleList.length)return 0;if(1===e.scheduleList.length)return Number(e.scheduleList[0].process);let t=e.scheduleList.reduce((e,t,s)=>1===s?Number(e.process)+Number(t.process):Number(e)+Number(t.process));return Number(t)}},mutations:{initTask(e,t){e.scheduleList=t.schedules,e.taskId=t.taskId},insertSchedule(e,t){e.scheduleList.push(t)},updateSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subId===e.subId)return!0});s>=0&&e.scheduleList.splice(s,1,t)},deleteSchedule(e,t){let s=e.scheduleList.findIndex(e=>{if(t.subid===e.subid)return!0});e.scheduleList.splice(s,1)},updateCurUser(e,t){e.curUser=t},updateCurSchedule(e,t){e.curSchedule=t},updateSubId(e,t){e.subId=t},updateEditing(e,t){e.editing=t},pushPathArr(e,t){e.pathArr+="/"+t},popPathArr(e){let t=e.pathArr.split("/");t.pop(),e.pathArr=t.join("/")},setPageMove(e,t){e.pageMove=t}}};var l={namespaced:!0,state:()=>({curArea:null}),getters:{getCurArea:e=>e.curArea},mutations:{setCurArea(e,t){e.curArea=t}}};var c={namespaced:!0,state:()=>({userInfo:{userId:"",token:""}}),getters:{getUserInfo:e=>{if(e.userInfo&&e.userInfo.token)return e.userInfo;let t=localStorage.getItem("userInfo");return t?(e.userInfo=JSON.parse(t),JSON.parse(t)):null}},mutations:{updateUserInfo(e,t){console.log(t,"params",25),e.userInfo=t}}};var d=new n.a.Store({modules:{weekly:i,estate:l,rbac:c}});let o=u.a.create({timeout:3e4,headers:{}});o.interceptors.request.use(e=>{let t=d.getters["rbac/getUserInfo"];return e.headers.Authorization=""+(t&&t.token||""),e}),o.interceptors.response.use(e=>{if(401!==e.status)return e;location.reload()});t.a=o},105:function(e,t,s){"use strict";var r=s(36);s.n(r).a},137:function(e,t,s){"use strict";s.r(t);var r=s(4),u=s(10),a={computed:{},data:()=>({users:[]}),computed:{...Object(r.mapState)("weekly",["pathArr"])},mounted(){this._initUsers(),this.pathArr&&this.pathArr.length>0||this.pushPathArr("user")},methods:{...Object(r.mapMutations)("weekly",["updateCurUser","pushPathArr"]),_initUsers(){u.a.get("/task/users").then(e=>{200===e.status&&e.data&&(this.users=e.data)})},selectUser(e){this.updateCurUser(e),this.pushPathArr("task")}}},n=(s(105),s(1)),i=Object(n.a)(a,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"user-wrapper"},[s("header"),e._v(" "),e.users&&e.users.length>0?s("div",{staticClass:"user"},e._l(e.users,(function(t){return s("div",{key:t.userId,staticClass:"user-item",on:{click:function(s){return e.selectUser(t)}}},[e._v(e._s(t.userName))])})),0):e._e()])}),[],!1,null,"1ebcbe25",null);t.default=i.exports},36:function(e,t,s){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,