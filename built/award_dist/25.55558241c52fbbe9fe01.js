(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{126:function(t,e,i){"use strict";var a=i(46);i.n(a).a},156:function(t,e,i){"use strict";i.r(e);var a=i(3),n=i(17);const o="108.8371912900,34.2032353700",r=[610103,610104,610113];var s={data:()=>({gardens:[],driveRoutes:[],mapObj:null,pathObj:null}),computed:{...Object(a.b)("estate",["getCurArea"])},mounted(){setTimeout(async()=>{await this._initMapScript(),await this._initMapUi(),await this._initGardens(),this._initDriveRoute()},1e3)},methods:{async _initMapScript(){return new Promise((t,e)=>{window.onLoad=async()=>(this._initMapContainer(),t());let i=document.createElement("script");i.charset="utf-8",i.src="https://webapi.amap.com/maps?v=1.4.15&key=17569efbd54a284b8bd0ce338ae71616&callback=onLoad",document.head.appendChild(i)})},_initMapContainer(){let t=this._initLocation(o),e=this._initLocation(this.getCurArea.location);this.mapObj=new AMap.Map("map-container",{zoom:11,center:[(Number(t[0])+Number(e[0]))/2,(Number(t[1])+Number(e[1]))/2],mapStyle:"amap://styles/light"})},async _initMapUi(){return new Promise((t,e)=>{let i=document.createElement("script");i.charset="utf-8",i.src="https://webapi.amap.com/ui/1.0/main.js?v=1.0.11",document.head.appendChild(i);let a=this;i.onload=()=>{AMapUI.loadUI(["overlay/SimpleMarker"],(function(e){return new e({iconTheme:"default",iconStyle:"orange",map:a.mapObj,position:a._initLocation(o),label:{content:"高新软件园",offset:new AMap.Pixel(-10,-20)}}),new e({iconTheme:"default",iconStyle:"orange",map:a.mapObj,position:a._initLocation(a.getCurArea.location),label:{content:a.getCurArea.label,offset:new AMap.Pixel(-10,-20)}}),t()}))}})},_initGardens(){n.a.get(`/xian/aroundGarden?originLocation=${this.getCurArea.location}`).then(t=>{if(200===t.status&&(this.gardens=t.data,this.gardens&&this.gardens.length>0)){let t=this;AMapUI.loadUI(["overlay/SvgMarker"],(function(e){t.gardens.map((i,a)=>{var n=new e.Shape.Circle({height:16,strokeWidth:1,strokeColor:"#fff",fillColor:"#177261"});n.getCenter();new e(n,{map:t.mapObj,position:t._initLocation(i.location),containerClassNames:"shape-Circle",iconLabel:{innerHTML:a+1,style:{color:"#fff",fontSize:"12px"}}})})}))}})},_initPathLns(){let t=this;AMapUI||console.log("AMapUI false",175),AMapUI.load(["ui/misc/PathSimplifier","lib/$"],(function(e,i){let a=new e({zIndex:100,map:t.mapObj,getPath:(t,e)=>t.path,renderOptions:{renderAllPointsIfNumberBelow:100}});a.setData([{name:"路线0",path:[...t.driveRoutes]}]);a.createPathNavigator(0,{loop:!0,speed:5e3})}))},_initDistrict(){let t=this;AMapUI.load(["ui/geo/DistrictExplorer","lib/$"],(function(e){let i=new e({map:t.mapObj});var a=["#3366cc","#dc3912","#ff9900","#aa9900","#ff1901","#aa0101","red","green"];r.map((t,e)=>{i.loadAreaNode(t,(function(t,n){i.renderSubFeatures(n,(function(t,e){return{cursor:"default",bubble:!0,strokeColor:"blue",strokeOpacity:1,strokeWeight:1,fillColor:"red",fillOpacity:.35}})),i.renderParentFeature(n,{cursor:"default",bubble:!0,strokeColor:null,strokeOpacity:1,strokeWeight:1,fillColor:a[e],fillOpacity:.35})}))})}))},_initDriveRoute(){n.a.get(`/xian/drivingRoute?originLocation=${this.getCurArea.location}&destination=${o}`).then(t=>{200===t.status&&t.data.steps&&t.data.steps.length>0&&(t.data.steps.forEach(t=>{if(t.polyline){this._formatPolyline(t.polyline);this.driveRoutes.push(...this._formatPolyline(t.polyline))}}),this._initPathLns())})},_initLocation:t=>t.split(","),_formatPolyline(t){return t.split(";").map(t=>{let e=this._initLocation(t);return[Number(e[0]),Number(e[1])]})}}},l=(i(126),i(5)),c=Object(l.a)(s,(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"map-wrapper"},[t.gardens&&t.gardens.length>0?i("section",{staticClass:"garden"},t._l(t.gardens,(function(e,a){return i("section",{key:a,staticClass:"garden-item"},[i("section",{staticClass:"garden-item-icon"},[t._v(t._s(a+1))]),t._v(" "),i("section",{staticClass:"garden-item-label"},[t._v(t._s(e.name)+",距离"+t._s(e.distance)+"米")])])})),0):t._e(),t._v(" "),i("section",{staticClass:"map-container",attrs:{id:"map-container"}})])}),[],!1,null,"3e811bd6",null);e.default=c.exports},46:function(t,e,i){var a=i(8),n=i(47);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var o={insert:"head",singleton:!1},r=a(n,o),s=n.locals?n.locals:{};n.locals||t.hot.accept(47,(function(){var e=i(47);"string"==typeof(e=e.__esModule?e.default:e)&&(e=[[t.i,e,""]]),r(e)})),t.hot.dispose((function(){r()})),t.exports=s},47:function(t,e,i){(e=i(9)(!1)).push([t.i,'.map-con[data-v-3e811bd6]{padding:0 1.333vw 1.333vw;flex:1;display:flex;flex-direction:column;content:"viewport-units-buggyfill; padding: 0px 1.333vw 1.333vw"}.garden[data-v-3e811bd6]{flex-shrink:1;font-size:3.733vw;color:rgba(0,0,0,.8);padding-bottom:2.667vw;max-height:42.667vw;overflow:scroll;content:"viewport-units-buggyfill; font-size: 3.733vw; padding-bottom: 2.667vw; max-height: 42.667vw"}.garden-item[data-v-3e811bd6]{line-height:6.933vw;display:flex;content:"viewport-units-buggyfill; line-height: 6.933vw"}.garden-item-icon[data-v-3e811bd6]{width:5.333vw;background:#177261;color:#fff;border-radius:50%;text-align:center;height:5.333vw;line-height:5.333vw;margin:.8vw 2.667vw;content:"viewport-units-buggyfill; width: 5.333vw; height: 5.333vw; line-height: 5.333vw; margin: 0.8vw 2.667vw"}.map-container[data-v-3e811bd6]{width:100%;flex:1;overflow:scroll;position:relative}.amap-markers[data-v-3e811bd6]{overflow:visible!important}',""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,