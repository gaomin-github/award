(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{123:function(t,e,i){"use strict";var a=i(44);i.n(a).a},152:function(t,e,i){"use strict";i.r(e);var a=i(3),n=i(17);const o="108.8371912900,34.2032353700",r=[610103,610104,610113];var s={data:()=>({gardens:[],driveRoutes:[],mapObj:null,pathObj:null}),computed:{...Object(a.b)("estate",["getCurArea"])},async mounted(){await this._initMapScript(),await this._initMapUi(),await this._initGardens(),await this._initDriveRoute()},methods:{async _initMapScript(){return new Promise((t,e)=>{window.onLoad=async()=>(this._initMapContainer(),t());let i=document.createElement("script");return i.charset="utf-8",i.src="https://webapi.amap.com/maps?v=1.4.15&key=17569efbd54a284b8bd0ce338ae71616&callback=onLoad",document.head.appendChild(i),t()})},_initMapContainer(){let t=this._initLocation(o),e=this._initLocation(this.getCurArea.location);this.mapObj=new AMap.Map("map-container",{zoom:11,center:[(Number(t[0])+Number(e[0]))/2,(Number(t[1])+Number(e[1]))/2],mapStyle:"amap://styles/light"})},async _initMapUi(){return new Promise((t,e)=>{let i=document.createElement("script");i.charset="utf-8",i.src="https://webapi.amap.com/ui/1.0/main.js?v=1.0.11",document.head.appendChild(i);let a=this;i.onload=()=>{AMapUI.loadUI(["overlay/SimpleMarker"],(function(e){return new e({iconTheme:"default",iconStyle:"orange",map:a.mapObj,position:a._initLocation(o),label:{content:"高新软件园",offset:new AMap.Pixel(-10,-20)}}),new e({iconTheme:"default",iconStyle:"orange",map:a.mapObj,position:a._initLocation(a.getCurArea.location),label:{content:a.getCurArea.label,offset:new AMap.Pixel(-10,-20)}}),t()}))}})},_initGardens(){n.a.get(`/xian/aroundGarden?originLocation=${this.getCurArea.location}`).then(t=>{if(200===t.status&&(this.gardens=t.data,this.gardens&&this.gardens.length>0)){let t=this;AMapUI.loadUI(["overlay/SvgMarker"],(function(e){t.gardens.map((i,a)=>{var n=new e.Shape.Circle({height:16,strokeWidth:1,strokeColor:"#fff",fillColor:"#177261"});n.getCenter();new e(n,{map:t.mapObj,position:t._initLocation(i.location),containerClassNames:"shape-Circle",iconLabel:{innerHTML:a+1,style:{color:"#fff",fontSize:"12px"}}})})}))}})},_initPathLns(){let t=this;AMapUI.load(["ui/misc/PathSimplifier","lib/$"],(function(e,i){let a=new e({zIndex:100,map:t.mapObj,getPath:(t,e)=>t.path,renderOptions:{renderAllPointsIfNumberBelow:100}});a.setData([{name:"路线0",path:[...t.driveRoutes]}]);a.createPathNavigator(0,{loop:!0,speed:5e3})}))},_initDistrict(){let t=this;AMapUI.load(["ui/geo/DistrictExplorer","lib/$"],(function(e){let i=new e({map:t.mapObj});var a=["#3366cc","#dc3912","#ff9900","#aa9900","#ff1901","#aa0101","red","green"];r.map((t,e)=>{i.loadAreaNode(t,(function(t,n){i.renderSubFeatures(n,(function(t,e){return{cursor:"default",bubble:!0,strokeColor:"blue",strokeOpacity:1,strokeWeight:1,fillColor:"red",fillOpacity:.35}})),i.renderParentFeature(n,{cursor:"default",bubble:!0,strokeColor:null,strokeOpacity:1,strokeWeight:1,fillColor:a[e],fillOpacity:.35})}))})}))},_initDriveRoute(){n.a.get(`/xian/drivingRoute?originLocation=${this.getCurArea.location}&destination=${o}`).then(t=>{200===t.status&&t.data.steps&&t.data.steps.length>0&&(t.data.steps.forEach(t=>{if(t.polyline){this._formatPolyline(t.polyline);this.driveRoutes.push(...this._formatPolyline(t.polyline))}}),this._initPathLns())})},_initLocation:t=>t.split(","),_formatPolyline(t){return t.split(";").map(t=>{let e=this._initLocation(t);return[Number(e[0]),Number(e[1])]})}}},l=(i(123),i(5)),c=Object(l.a)(s,(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"map-wrapper"},[t.gardens&&t.gardens.length>0?i("section",{staticClass:"garden"},t._l(t.gardens,(function(e,a){return i("section",{key:a,staticClass:"garden-item"},[i("section",{staticClass:"garden-item-icon"},[t._v(t._s(a+1))]),t._v(" "),i("section",{staticClass:"garden-item-label"},[t._v(t._s(e.name)+",距离"+t._s(e.distance)+"米")])])})),0):t._e(),t._v(" "),i("section",{staticClass:"map-container",attrs:{id:"map-container"}})])}),[],!1,null,"7684c092",null);e.default=c.exports},44:function(t,e,i){var a=i(8),n=i(45);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var o={insert:"head",singleton:!1},r=a(n,o),s=n.locals?n.locals:{};n.locals||t.hot.accept(45,(function(){var e=i(45);"string"==typeof(e=e.__esModule?e.default:e)&&(e=[[t.i,e,""]]),r(e)})),t.hot.dispose((function(){r()})),t.exports=s},45:function(t,e,i){(e=i(9)(!1)).push([t.i,'.map-con[data-v-7684c092]{padding:0 1.333vw 1.333vw;flex:1;display:flex;flex-direction:column;content:"viewport-units-buggyfill; padding: 0px 1.333vw 1.333vw"}.garden[data-v-7684c092]{flex-shrink:1;font-size:3.733vw;color:rgba(0,0,0,.8);padding-bottom:2.667vw;overflow-y:hidden;content:"viewport-units-buggyfill; font-size: 3.733vw; padding-bottom: 2.667vw"}.garden-item[data-v-7684c092]{line-height:6.933vw;display:flex;content:"viewport-units-buggyfill; line-height: 6.933vw"}.garden-item-icon[data-v-7684c092]{width:5.333vw;background:#177261;color:#fff;border-radius:50%;text-align:center;height:5.333vw;line-height:5.333vw;margin:.8vw 2.667vw;content:"viewport-units-buggyfill; width: 5.333vw; height: 5.333vw; line-height: 5.333vw; margin: 0.8vw 2.667vw"}.map-container[data-v-7684c092]{width:100%;flex:1;overflow:scroll;position:relative}.amap-markers[data-v-7684c092]{overflow:visible!important}',""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMveGlhbi1lc3RhdGUvYXJlYS1tYXAudnVlPzg0NWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3hpYW4tZXN0YXRlL2FyZWEtbWFwLnZ1ZT85M2VjIiwid2VicGFjazovLy9zcmMveGlhbi1lc3RhdGUvYXJlYS1tYXAudnVlIiwid2VicGFjazovLy8uL3NyYy94aWFuLWVzdGF0ZS9hcmVhLW1hcC52dWU/ZjUxZCIsIndlYnBhY2s6Ly8vLi9zcmMveGlhbi1lc3RhdGUvYXJlYS1tYXAudnVlIiwid2VicGFjazovLy8uL3NyYy94aWFuLWVzdGF0ZS9hcmVhLW1hcC52dWU/NTgxZCIsIndlYnBhY2s6Ly8vLi9zcmMveGlhbi1lc3RhdGUvYXJlYS1tYXAudnVlPzEyZDkiXSwibmFtZXMiOlsiZ3hfbG9jYXRpb24iLCJkaXNwbGF5U3RyaWN0Q29kZSIsImNvbXBvbmVudCIsIl92bSIsInRoaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiZ2FyZGVucyIsImxlbmd0aCIsIl9sIiwiZ2FyZGVuIiwia2V5IiwiX3YiLCJfcyIsIm5hbWUiLCJkaXN0YW5jZSIsIl9lIiwiYXR0cnMiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtb2R1bGUiLCJpIiwib3B0aW9ucyIsInVwZGF0ZSIsImV4cG9ydGVkIiwibG9jYWxzIiwiaG90IiwiYWNjZXB0IiwibmV3Q29udGVudCIsImRpc3Bvc2UiLCJleHBvcnRzIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwicHVzaCJdLCJtYXBwaW5ncyI6IjJGQUFBLG1CQUE0WixHLHdDQ0E1WixJLGVDZ0JBLE1BQ01BLEVBQWMsK0JBQ2RDLEVBQW9CLENBQzFCLE9BQ0EsT0FDQSxRQUtBLElDMUJ3TCxFRDBCeEwsQ0FDRSxLQUFGLEtBQ0EsQ0FDTSxRQUFOLEdBQ00sWUFBTixHQUNNLE9BQU4sS0FDTSxRQUFOLE9BR0UsU0FBRixJQUNB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RixFQUFNLE1BQU1YLEVBQUlZLEdBQUcsS0FBS1IsRUFBRyxVQUFVLENBQUNFLFlBQVkscUJBQXFCLENBQUNOLEVBQUlZLEdBQUdaLEVBQUlhLEdBQUdILEVBQU9JLE1BQU0sTUFBTWQsRUFBSWEsR0FBR0gsRUFBT0ssVUFBVSxZQUFXLEdBQUdmLEVBQUlnQixLQUFLaEIsRUFBSVksR0FBRyxLQUFLUixFQUFHLFVBQVUsQ0FBQ0UsWUFBWSxnQkFBZ0JXLE1BQU0sQ0FBQyxHQUFLLHVCQUN0akIsSUdXcEIsRUFDQSxLQUNBLFdBQ0EsTUFJYSxVQUFBbEIsRSw0QkNuQmYsSUFBSW1CLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVFDLFdBQWFELEVBQVFFLFFBQVVGLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0csRUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFaEJDLEVBQVNQLEVBQUlDLEVBQVNLLEdBRXRCRSxFQUFXUCxFQUFRUSxPQUFTUixFQUFRUSxPQUFTLEdBSTFDUixFQUFRUSxRQUNYTCxFQUFPTSxJQUFJQyxPQUNULElBQ0EsV0FDRSxJQUFJQyxFQUFhLEVBQVEsSUFJTyxpQkFGMUJBLEVBQWFBLEVBQVdWLFdBQWFVLEVBQVdULFFBQVVTLEtBR3hEQSxFQUFhLENBQUMsQ0FBQ1IsRUFBT0MsRUFBSU8sRUFBWSxNQUd4Q0wsRUFBT0ssTUFLbkJSLEVBQU9NLElBQUlHLFNBQVEsV0FDakJOLE9BSUpILEVBQU9VLFFBQVVOLEcsb0JDeENqQk0sRUFEa0MsRUFBUSxFQUNoQ0MsRUFBNEIsSUFFOUJDLEtBQUssQ0FBQ1osRUFBT0MsRUFBSSwwNEJBQW01QixLQUU1NkJELEVBQU9VLFFBQVVBIiwiZmlsZSI6ImF3YXJkX2Rpc3QvMjQuNDU1ZTQzZDU4ODQwZDc0NDZjNWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzY4NGMwOTImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzY4NGMwOTImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibWFwLXdyYXBwZXJcIn0sWyhfdm0uZ2FyZGVucyAmJiBfdm0uZ2FyZGVucy5sZW5ndGggPiAwKT9fYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOlwiZ2FyZGVuXCJ9LF92bS5fbCgoX3ZtLmdhcmRlbnMpLGZ1bmN0aW9uKGdhcmRlbixrZXkpe3JldHVybiBfYygnc2VjdGlvbicse2tleTprZXksc3RhdGljQ2xhc3M6XCJnYXJkZW4taXRlbVwifSxbX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcImdhcmRlbi1pdGVtLWljb25cIn0sW192bS5fdihfdm0uX3Moa2V5ICsgMSkpXSksX3ZtLl92KFwiIFwiKSxfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOlwiZ2FyZGVuLWl0ZW0tbGFiZWxcIn0sW192bS5fdihfdm0uX3MoZ2FyZGVuLm5hbWUpK1wiLOi3neemu1wiK192bS5fcyhnYXJkZW4uZGlzdGFuY2UpK1wi57GzXCIpXSldKX0pLDApOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcIm1hcC1jb250YWluZXJcIixhdHRyczp7XCJpZFwiOlwibWFwLWNvbnRhaW5lclwifX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwibWFwLXdyYXBwZXJcIj5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJnYXJkZW5cIiB2LWlmPVwiZ2FyZGVucyAmJiBnYXJkZW5zLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgIDxzZWN0aW9uIHYtZm9yPVwiKGdhcmRlbiwga2V5KSBpbiBnYXJkZW5zXCIgOmtleT1cImtleVwiIGNsYXNzPVwiZ2FyZGVuLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImdhcmRlbi1pdGVtLWljb25cIj57eyBrZXkgKyAxIH19PC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgIDxzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZ2FyZGVuLWl0ZW0tbGFiZWxcIlxuICAgICAgICAgICAgICAgID57eyBnYXJkZW4ubmFtZSB9fSzot53nprt7eyBnYXJkZW4uZGlzdGFuY2UgfX3nsbM8L3NlY3Rpb24+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XCJtYXAtY29udGFpbmVyXCIgaWQ9XCJtYXAtY29udGFpbmVyXCI+PC9zZWN0aW9uPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSBcInZ1ZXhcIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuY29uc3QgR0RLRVkgPSBcIjE3NTY5ZWZiZDU0YTI4NGI4YmQwY2UzMzhhZTcxNjE2XCI7XG5jb25zdCBneF9sb2NhdGlvbiA9IFwiMTA4LjgzNzE5MTI5MDAsMzQuMjAzMjM1MzcwMFwiOyAvL+mrmOaWsOi9r+S7tuWbree7j+e6rOW6plxuY29uc3QgZGlzcGxheVN0cmljdENvZGUgPSBbXG4gICAgNjEwMTAzLFxuICAgIDYxMDEwNCxcbiAgICA2MTAxMTNcbiAgICAvLyAgIDYxMDExNixcbiAgICAvLyA2MTAxMjRcbl07IC8v56KR5p6X5Yy677yM6I6y5rmW5Yy677yM6ZuB5aGU5Yy677yM6ZW/5a6J5Yy677yM5ZGo6Iez5Y6/XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCl7XG4gICAgICAgIHJldHVybntcbiAgICAgICAgICAgIGdhcmRlbnM6W10sICAgICAgICAgICAgXG4gICAgICAgICAgICBkcml2ZVJvdXRlczogW10sXG4gICAgICAgICAgICBtYXBPYmo6IG51bGwsXG4gICAgICAgICAgICBwYXRoT2JqOiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOntcbiAgICAgICAgLi4ubWFwR2V0dGVycygnZXN0YXRlJyxbJ2dldEN1ckFyZWEnXSlcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKXtcbiAgICAgICAgYXdhaXQgdGhpcy5faW5pdE1hcFNjcmlwdCgpO1xuICAgICAgICBhd2FpdCB0aGlzLl9pbml0TWFwVWkoKTtcblxuICAgICAgICAvLyB0aGlzLl9pbml0RGlzdHJpY3QoKTtcblxuICAgICAgICBhd2FpdCB0aGlzLl9pbml0R2FyZGVucygpO1xuICAgICAgICAvLyB0aGlzLl9pbml0UGF0aExucygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX2luaXREcml2ZVJvdXRlKCk7XG5cbiAgICB9LFxuICAgIG1ldGhvZHM6e1xuICAgICAgICBhc3luYyBfaW5pdE1hcFNjcmlwdCgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93Lm9uTG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdE1hcENvbnRhaW5lcigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gZ2Qgc2NyaXB05byV5YWlXG4gICAgICAgICAgICAgICAgbGV0IHVybCA9IGBodHRwczovL3dlYmFwaS5hbWFwLmNvbS9tYXBzP3Y9MS40LjE1JmtleT0ke0dES0VZfSZjYWxsYmFjaz1vbkxvYWRgO1xuICAgICAgICAgICAgICAgIGxldCBtYXBTY3JpcHRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgbWFwU2NyaXB0RWwuY2hhcnNldCA9IFwidXRmLThcIjtcbiAgICAgICAgICAgICAgICBtYXBTY3JpcHRFbC5zcmMgPSB1cmw7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChtYXBTY3JpcHRFbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0TWFwQ29udGFpbmVyKCkge1xuICAgICAgICAgICAgbGV0IGd4X2xvY2F0aW9uX251bSA9IHRoaXMuX2luaXRMb2NhdGlvbihneF9sb2NhdGlvbik7XG4gICAgICAgICAgICBsZXQgZGVzX2xvY2F0aW9uX251bSA9IHRoaXMuX2luaXRMb2NhdGlvbih0aGlzLmdldEN1ckFyZWEubG9jYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5tYXBPYmogPSBuZXcgQU1hcC5NYXAoXCJtYXAtY29udGFpbmVyXCIsIHtcbiAgICAgICAgICAgICAgICB6b29tOiAxMSxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IFtcbiAgICAgICAgICAgICAgICAgICAgKE51bWJlcihneF9sb2NhdGlvbl9udW1bMF0pICsgTnVtYmVyKGRlc19sb2NhdGlvbl9udW1bMF0pKSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAgICAgICAoTnVtYmVyKGd4X2xvY2F0aW9uX251bVsxXSkgKyBOdW1iZXIoZGVzX2xvY2F0aW9uX251bVsxXSkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG1hcFN0eWxlOiBcImFtYXA6Ly9zdHlsZXMvbGlnaHRcIiAvL+iuvue9ruWcsOWbvueahOaYvuekuuagt+W8j1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXN5bmMgX2luaXRNYXBVaSgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZ2Qgc2NyaXB0IHVp5byV5YWlXG4gICAgICAgICAgICAgICAgbGV0IHVpU2NyaXB0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICAgIHVpU2NyaXB0RWwuY2hhcnNldCA9IFwidXRmLThcIjtcbiAgICAgICAgICAgICAgICB1aVNjcmlwdEVsLnNyYyA9ICdodHRwczovL3dlYmFwaS5hbWFwLmNvbS91aS8xLjAvbWFpbi5qcz92PTEuMC4xMSc7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh1aVNjcmlwdEVsKTtcbiAgICAgICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdWlTY3JpcHRFbC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOi1t+eCueWSjOe7iOeCueagh+azqFxuICAgICAgICAgICAgICAgICAgICBBTWFwVUkubG9hZFVJKFtcIm92ZXJsYXkvU2ltcGxlTWFya2VyXCJdLCBmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpbXBsZU1hcmtlclxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTaW1wbGVNYXJrZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25UaGVtZTogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblN0eWxlOiBcIm9yYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGhhdC5tYXBPYmosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRoYXQuX2luaXRMb2NhdGlvbihneF9sb2NhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCLpq5jmlrDova/ku7blm61cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgQU1hcC5QaXhlbCgtMTAsIC0yMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNpbXBsZU1hcmtlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblRoZW1lOiBcImRlZmF1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU3R5bGU6IFwib3JhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiB0aGF0Lm1hcE9iaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhhdC5faW5pdExvY2F0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmdldEN1ckFyZWEubG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoYXQuZ2V0Q3VyQXJlYS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgQU1hcC5QaXhlbCgtMTAsIC0yMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyDot6/lvoTmoIfms6hcbiAgICAgICAgICAgICAgICAgICAgLy8gICB0aGlzLl9pbml0UGF0aExucygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8g5bGV56S65ZGo6L655YWs5ZutXG4gICAgICAgIF9pbml0R2FyZGVucygpIHtcbiAgICAgICAgICAgIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAuZ2V0KFxuICAgICAgICAgICAgICAgICAgICBgL3hpYW4vYXJvdW5kR2FyZGVuP29yaWdpbkxvY2F0aW9uPSR7dGhpcy5nZXRDdXJBcmVhLmxvY2F0aW9ufWBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYXJkZW5zID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYXJkZW5zICYmIHRoaXMuZ2FyZGVucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNYXBVSS5sb2FkVUkoW1wib3ZlcmxheS9TdmdNYXJrZXJcIl0sIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdmdNYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5nYXJkZW5zLm1hcCgoZ2FyZGVuLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlID0gbmV3IFN2Z01hcmtlci5TaGFwZVtcIkNpcmNsZVwiXSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcIiMxNzcyNjFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFiZWxDZW50ZXIgPSBzaGFwZS5nZXRDZW50ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTdmdNYXJrZXIoc2hhcGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHRoYXQubWFwT2JqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGF0Ll9pbml0TG9jYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcmRlbi5sb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3NOYW1lczogXCJzaGFwZS1DaXJjbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uTGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMnB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93UG9zaXRpb25Qb2ludDogdHJ1ZSwvL+aYr+WQpuaYvuekum1hcmtlcuS4iueahOe6oueCuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8g5byA6L2m6Lev57q/5Zu+5qC35byPXG4gICAgICAgIF9pbml0UGF0aExucygpIHtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIEFNYXBVSS5sb2FkKFtcInVpL21pc2MvUGF0aFNpbXBsaWZpZXJcIiwgXCJsaWIvJFwiXSwgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgUGF0aFNpbXBsaWZpZXIsXG4gICAgICAgICAgICAgICAgJFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhdGhPYmogPSBuZXcgUGF0aFNpbXBsaWZpZXIoe1xuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiB0aGF0Lm1hcE9iaixcblxuICAgICAgICAgICAgICAgICAgICBnZXRQYXRoOiAocGF0aERhdGEsIHBhdGhJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdGhEYXRhLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckFsbFBvaW50c0lmTnVtYmVyQmVsb3c6IDEwMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGF0aE9iai5zZXREYXRhKFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLot6/nur8wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBbLi4udGhhdC5kcml2ZVJvdXRlc11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGxldCBuYXZnMSA9IHBhdGhPYmouY3JlYXRlUGF0aE5hdmlnYXRvcigwLCB7XG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsIC8v5b6q546v5pKt5pS+XG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAwIC8v5beh6Iiq6YCf5bqm77yM5Y2V5L2N5Y2D57GzL+Wwj+aXtlxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gbmF2ZzEuc3RhcnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyDlsZXnpLrljLrln59cbiAgICAgICAgX2luaXREaXN0cmljdCgpIHtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIEFNYXBVSS5sb2FkKFtcInVpL2dlby9EaXN0cmljdEV4cGxvcmVyXCIsIFwibGliLyRcIl0sIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgIERpc3RyaWN0RXhwbG9yZXJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGxldCBkaXN0cmljdEV4cGxvcmVyID0gbmV3IERpc3RyaWN0RXhwbG9yZXIoe1xuICAgICAgICAgICAgICAgICAgICBtYXA6IHRoYXQubWFwT2JqIC8v5YWz6IGU55qE5Zyw5Zu+5a6e5L6LXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgXCIjMzM2NmNjXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiI2RjMzkxMlwiLFxuICAgICAgICAgICAgICAgICAgICBcIiNmZjk5MDBcIixcbiAgICAgICAgICAgICAgICAgICAgXCIjYWE5OTAwXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiI2ZmMTkwMVwiLFxuICAgICAgICAgICAgICAgICAgICBcIiNhYTAxMDFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJncmVlblwiXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5U3RyaWN0Q29kZS5tYXAoKGNvZGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0RXhwbG9yZXIubG9hZEFyZWFOb2RlKGNvZGUsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhTm9kZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0RXhwbG9yZXIucmVuZGVyU3ViRmVhdHVyZXMoYXJlYU5vZGUsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogXCJibHVlXCIsIC8v57q/6aKc6ImyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDEsIC8v57q/6YCP5piO5bqmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdlaWdodDogMSwgLy/nur/lrr1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcInJlZFwiLCAvL+Whq+WFheiJslxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC4zNSAvL+Whq+WFhemAj+aYjuW6plxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWN0RXhwbG9yZXIucmVuZGVyUGFyZW50RmVhdHVyZShhcmVhTm9kZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBudWxsLCAvL+e6v+minOiJslxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDEsIC8v57q/6YCP5piO5bqmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2VpZ2h0OiAxLCAvL+e6v+WuvVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogY29sb3JzW2luZGV4XSwgLy/loavlhYXoibJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC4zNSAvL+Whq+WFhemAj+aYjuW6plxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvLyDliJ3lp4vljJbpqb7ovabot6/nur/mlbDmja5cbiAgICAgICAgX2luaXREcml2ZVJvdXRlKCkge1xuICAgICAgICAgICAgcmVxdWVzdFxuICAgICAgICAgICAgICAgIC5nZXQoXG4gICAgICAgICAgICAgICAgICAgIGAveGlhbi9kcml2aW5nUm91dGU/b3JpZ2luTG9jYXRpb249JHt0aGlzLmdldEN1ckFyZWEubG9jYXRpb259JmRlc3RpbmF0aW9uPSR7Z3hfbG9jYXRpb259YFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuc3RlcHMgJiYgcmVzLmRhdGEuc3RlcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5kYXRhLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGVwLnBvbHlsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJyTG9jYXRpb24gPSB0aGlzLl9mb3JtYXRQb2x5bGluZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwLnBvbHlsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcml2ZVJvdXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX2Zvcm1hdFBvbHlsaW5lKHN0ZXAucG9seWxpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdFBhdGhMbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIOi+heWKqeWHveaVsFxuICAgICAgICBfaW5pdExvY2F0aW9uKGxvY2F0aW9uU3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb25TdHIuc3BsaXQoXCIsXCIpO1xuICAgICAgICB9LFxuICAgICAgICBfZm9ybWF0UG9seWxpbmUocG9seWxpbmUpIHtcbiAgICAgICAgICAgIGxldCBsb2NhdGlvblN0ciA9IHBvbHlsaW5lLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbkFyciA9IGxvY2F0aW9uU3RyLm1hcChsb2NhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxvY2F0aW9uSXRlbSA9IHRoaXMuX2luaXRMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtOdW1iZXIobG9jYXRpb25JdGVtWzBdKSwgTnVtYmVyKGxvY2F0aW9uSXRlbVsxXSldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb25BcnI7XG4gICAgICAgIH0sXG4gICAgfVxufVxuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4ubWFwLWNvbiB7XG4gICAgcGFkZGluZzogMHB4IDVweCA1cHg7XG4gICAgZmxleDogMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG4uZ2FyZGVuIHtcbiAgICBmbGV4LXNocmluazogMTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgJi1pdGVtIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI2cHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuICAgICYtaXRlbS1pY29uIHtcbiAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgIGJhY2tncm91bmQ6ICMxNzcyNjE7XG4gICAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgbWFyZ2luOiAzcHggMTBweDtcbiAgICB9XG4gICAgJi1pdGVtLWxhYmVsIHtcbiAgICB9XG59XG4ubWFwLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZmxleDogMTtcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cbi5hbWFwLW1hcmtlcnMge1xuICAgIC8qIGJvcmRlcjogMXB4IGJsYWNrIHNvbGlkICFpbXBvcnRhbnQ7ICovXG4gICAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcbn1cbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc2ODRjMDkyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc2ODRjMDkyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNzY4NGMwOTJcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc2ODRjMDkyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzY4NGMwOTImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc2ODRjMDkyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5cbiAgICAgICAgICAgICAgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuX19lc01vZHVsZSA/IG5ld0NvbnRlbnQuZGVmYXVsdCA6IG5ld0NvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IFxuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm1hcC1jb25bZGF0YS12LTc2ODRjMDkyXXtwYWRkaW5nOjAgMS4zMzN2dyAxLjMzM3Z3O2ZsZXg6MTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2NvbnRlbnQ6XFxcInZpZXdwb3J0LXVuaXRzLWJ1Z2d5ZmlsbDsgcGFkZGluZzogMHB4IDEuMzMzdncgMS4zMzN2d1xcXCJ9LmdhcmRlbltkYXRhLXYtNzY4NGMwOTJde2ZsZXgtc2hyaW5rOjE7Zm9udC1zaXplOjMuNzMzdnc7Y29sb3I6cmdiYSgwLDAsMCwuOCk7cGFkZGluZy1ib3R0b206Mi42Njd2dztvdmVyZmxvdy15OmhpZGRlbjtjb250ZW50OlxcXCJ2aWV3cG9ydC11bml0cy1idWdneWZpbGw7IGZvbnQtc2l6ZTogMy43MzN2dzsgcGFkZGluZy1ib3R0b206IDIuNjY3dndcXFwifS5nYXJkZW4taXRlbVtkYXRhLXYtNzY4NGMwOTJde2xpbmUtaGVpZ2h0OjYuOTMzdnc7ZGlzcGxheTpmbGV4O2NvbnRlbnQ6XFxcInZpZXdwb3J0LXVuaXRzLWJ1Z2d5ZmlsbDsgbGluZS1oZWlnaHQ6IDYuOTMzdndcXFwifS5nYXJkZW4taXRlbS1pY29uW2RhdGEtdi03Njg0YzA5Ml17d2lkdGg6NS4zMzN2dztiYWNrZ3JvdW5kOiMxNzcyNjE7Y29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjUwJTt0ZXh0LWFsaWduOmNlbnRlcjtoZWlnaHQ6NS4zMzN2dztsaW5lLWhlaWdodDo1LjMzM3Z3O21hcmdpbjouOHZ3IDIuNjY3dnc7Y29udGVudDpcXFwidmlld3BvcnQtdW5pdHMtYnVnZ3lmaWxsOyB3aWR0aDogNS4zMzN2dzsgaGVpZ2h0OiA1LjMzM3Z3OyBsaW5lLWhlaWdodDogNS4zMzN2dzsgbWFyZ2luOiAwLjh2dyAyLjY2N3Z3XFxcIn0ubWFwLWNvbnRhaW5lcltkYXRhLXYtNzY4NGMwOTJde3dpZHRoOjEwMCU7ZmxleDoxO292ZXJmbG93OnNjcm9sbDtwb3NpdGlvbjpyZWxhdGl2ZX0uYW1hcC1tYXJrZXJzW2RhdGEtdi03Njg0YzA5Ml17b3ZlcmZsb3c6dmlzaWJsZSFpbXBvcnRhbnR9XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=