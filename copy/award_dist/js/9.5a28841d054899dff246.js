(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{10:function(t,e,s){"use strict";var i=s(12);let a=s.n(i).a.create({timeout:3e4,headers:{}});e.a=a},103:function(t,e,s){"use strict";var i=s(36);s.n(i).a},104:function(t,e,s){"use strict";var i=s(37);s.n(i).a},105:function(t,e,s){"use strict";var i=s(38);s.n(i).a},112:function(t,e,s){"use strict";s.r(e);var i={props:{value:{type:Number,default:0}}},a=(s(103),s(2)),r=Object(a.a)(i,(function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"progress-wrapper"},[e("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[e("line",{staticClass:"progress-path ",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),this._v(" "),this.value?e("line",{staticClass:"progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":100*this.value+" 500",y2:"5"}}):this._e()])])}),[],!1,null,"2215f8b0",null).exports;var o={components:{uiProgress:r},props:{imgUrl:String,imgLoading:{type:Boolean,default:!1}},data:()=>({loadingValue:0,timerTask:null,touchStartTime:0,showDel:!1}),watch:{imgUrl(t,e){console.log("49"),console.log(t,49)}},mounted(){},methods:{chooseImg(){this.$refs.imgPicker.click()},changeImg(t){this.$emit("changeLoading",!0);let e=[],s=this.$refs.imgPicker.files;if(s&&0!==s.length)for(let t in s)if(t<s.length){let i=s[t],a={id:Math.random(),fileObj:i};e.push(a),this.loadingValue=e.length/s.length,e.length===s.length&&(this.$emit("chooseImg",e),requestAnimationFrame(()=>{this.$emit("changeImgLoading",!1),this.loadingValue=0}))}},handleTouchStart(){this.imgUrl&&(this.touchStartTime=(new Date).getTime(),this.timerTask=setTimeout(()=>{this.showDel=!0},1e3))},handleTouchEnd(){(new Date).getTime()-this.touchStartTime<1e3&&(this.showDel=!1,clearTimeout(this.timerTask),this.timerTask=null)},handleDropFile(){this.$emit("dropImg",this.imgUrl)}}},c=(s(104),Object(a.a)(o,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"img-uploader-wrapper"},[t.imgUrl?s("img",{class:["assess-img",t.showDel?"assess-img-del":""],attrs:{src:t.imgUrl},on:{touchstart:t.handleTouchStart,touchend:t.handleTouchEnd}}):t._e(),t._v(" "),t.imgUrl?t._e():s("div",{staticClass:"assess-bg",on:{click:t.chooseImg}},[t._v("+")]),t._v(" "),t.imgUrl?t._e():s("input",{ref:"imgPicker",staticStyle:{opacity:"0"},attrs:{type:"file",accept:"image/*",multiple:"multiple"},on:{change:t.changeImg}}),t._v(" "),!t.imgUrl&&t.imgLoading?s("div",{staticClass:"loading"},[s("ui-progress",{attrs:{value:t.loadingValue}})],1):t._e(),t._v(" "),t.showDel?s("div",{staticClass:"del"},[s("i",{staticClass:"icon fa fa-times",on:{click:t.handleDropFile}})]):t._e()])}),[],!1,null,"44845176",null));e.default=c.exports},13:function(t,e,s){"use strict";s.d(e,"a",(function(){return a}));let i=(new Date).getTime();function a(t,e){return function(){(new Date).getTime()-i<=e||(i=(new Date).getTime(),t(arguments))}}},134:function(t,e,s){"use strict";s.r(e);var i=s(10),a=s(3),r=s(13),o=(s(112),{components:{headerTool:()=>s.e(2).then(s.bind(null,137)),imgUploader:()=>Promise.resolve().then(s.bind(null,112))},data:()=>({content:"",worth:0,process:0,pics:[],curPics:[],curPicPath:[],imgLoading:!1}),computed:{...Object(a.mapState)("weekly",["scheduleList","taskId","curSchedule","subId"])},mounted(){this._prevData(),this.$refs.content.focus()},beforeDestroy(){this.back()},methods:{...Object(a.mapMutations)("weekly",["updateSchedule","updateEditing"]),back(){if(console.log(this.curPicPath,111),this.curPicPath&&this.curPicPath.length>0){let t=new Date,e=`${t.getFullYear()}-${t.getMonth()+1}-${t.getDay()}`;e=e.replace(/\b(?=\d(\s|\:|\-|\b))/g,0),this.pics.push({createTime:e,urls:this.curPicPath})}this.curPicPath=[],this._saveSchedule(),this.updateEditing(!1)},_prevData(){this.content=this.curSchedule.content,this.worth=this.curSchedule.worth,this.process=this.curSchedule.process,this.pics=this.curSchedule.pics||[],console.log(this.pics,128)},inputHandler(){Object(r.a)(()=>{this._saveSchedule()},500)()},_saveSchedule(){this.updateSchedule(Object.assign(this.curSchedule,{content:this.content,worth:this.worth,process:this.process,pics:this.pics}));let t=encodeURIComponent(JSON.stringify(this.scheduleList));i.a.get(`/task/updateTask?taskId=${this.taskId}&scheduleStr=${t}`).then(t=>{if(200===t.status)return t.data})},changeImgLoading(t){console.log(t,174),this.imgLoading=t},async chooseImg(t){this.curPics.push(...t);let e=new FormData;t.map(t=>{e.append("file",t.fileObj)}),e.append("path","pictures/weekly"),Object(i.a)({url:"/common/file",method:"post",data:e,headers:{"content-type":"multipart/form-data"}}).then(t=>{200===t.status&&(this.curPicPath.push(...t.data),this.imgLoading=!1)})},deleteImg(t){Object(i.a)({url:"/common/dropfile",method:"post",data:{filePath:t}}).then(e=>{if(200===e.status&&e.data){let e=this.curPicPath.findIndex(e=>e===t);this.curPicPath.splice(e,1),this.imgLoading=!1}})}}}),c=(s(105),s(2)),n=Object(c.a)(o,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"editor-wrapper"},[s("header-tool",{on:{back:t.back}}),t._v(" "),s("div",{staticClass:"container"},[s("div",{staticClass:"grade"},[s("div",{staticClass:"grade-progress"},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 105 10"}},[s("line",{staticClass:"grade-progress-path",attrs:{x1:"5",y1:"5",x2:"100",y2:"5"}}),t._v(" "),t.process&&t.worth?s("line",{staticClass:"grade-progress-path valid",attrs:{x1:"5",y1:"5",x2:"100","stroke-dasharray":(t.process<t.worth?100*t.process/t.worth:100)+" 500",y2:"5"}}):t._e()])]),t._v(" "),s("div",{staticClass:"grade-worth"},[t._v("\n        总分\n        "),s("input",{directives:[{name:"model",rawName:"v-model",value:t.worth,expression:"worth"}],attrs:{type:"number"},domProps:{value:t.worth},on:{input:function(e){e.target.composing||(t.worth=e.target.value)}}})]),t._v(" "),s("div",{staticClass:"grade-process"},[t._v("\n        ,现得分\n        "),s("span",[s("input",{directives:[{name:"model",rawName:"v-model",value:t.process,expression:"process"}],attrs:{type:"number"},domProps:{value:t.process},on:{input:function(e){e.target.composing||(t.process=e.target.value)}}})])])]),t._v(" "),s("textarea",{directives:[{name:"model",rawName:"v-model",value:t.content,expression:"content"}],ref:"content",staticClass:"content",attrs:{placeholder:"add some content"},domProps:{value:t.content},on:{input:[function(e){e.target.composing||(t.content=e.target.value)},t.inputHandler]}}),t._v(" "),s("div",{staticClass:"schedule"},[t.curPicPath&&t.curPicPath.length>0?s("div",{staticClass:"schedule-cur"},[t._l(t.curPicPath,(function(e){return s("img-uploader",{key:e,staticClass:"schedule-cur-item",attrs:{imgUrl:e},on:{chooseImg:t.chooseImg,dropImg:t.deleteImg}})})),t._v(" "),s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:t.imgLoading},on:{chooseImg:t.chooseImg,changeLoading:t.changeImgLoading}})],2):s("img-uploader",{staticClass:"schedule-cur-item",attrs:{imgLoading:t.imgLoading},on:{chooseImg:t.chooseImg,changeLoading:t.changeImgLoading}})],1),t._v(" "),t.pics&&t.pics.length>0?s("div",{staticClass:"schedule history"},t._l(t.pics,(function(e,i){return s("div",{key:i,staticClass:"history-item"},[s("div",{staticClass:"history-item-time"},[t._v(t._s(e.createTime))]),t._v(" "),e.urls&&e.urls.length>0?s("div",{staticClass:"history-item-pics"},t._l(e.urls,(function(t){return s("img-uploader",{key:t,staticClass:"history-item-pics-item",attrs:{imgUrl:t}})})),1):t._e()])})),0):t._e()])],1)}),[],!1,null,"1edf3b9c",null);e.default=n.exports},36:function(t,e,s){},37:function(t,e,s){},38:function(t,e,s){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlscy9yZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9jb21wb25lbnRzL3VpLXByb2dyZXNzLnZ1ZT9iNGJkIiwid2VicGFjazovLy8uL2NvbW1vbi9jb21wb25lbnRzL2ltZy11cGxvYWRlci52dWU/Y2QzMyIsIndlYnBhY2s6Ly8vLi9zcmMvd2Vla2x5L2NvbS9lZGl0b3IudnVlP2I4YzYiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2NvbXBvbmVudHMvaW1nLXVwbG9hZGVyLnZ1ZT80MWQ1Iiwid2VicGFjazovLy8uL2NvbW1vbi9jb21wb25lbnRzL3VpLXByb2dyZXNzLnZ1ZT81MDMwIiwid2VicGFjazovLy9jb21tb24vY29tcG9uZW50cy91aS1wcm9ncmVzcy52dWUiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2NvbXBvbmVudHMvdWktcHJvZ3Jlc3MudnVlIiwid2VicGFjazovLy8uL2NvbW1vbi9jb21wb25lbnRzL3VpLXByb2dyZXNzLnZ1ZT8yODkwIiwid2VicGFjazovLy9jb21tb24vY29tcG9uZW50cy9pbWctdXBsb2FkZXIudnVlIiwid2VicGFjazovLy8uL2NvbW1vbi9jb21wb25lbnRzL2ltZy11cGxvYWRlci52dWU/NTk2OSIsIndlYnBhY2s6Ly8vLi9jb21tb24vY29tcG9uZW50cy9pbWctdXBsb2FkZXIudnVlIiwid2VicGFjazovLy8uL2NvbW1vbi9saWIvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlZWtseS9jb20vZWRpdG9yLnZ1ZT84Yjc5Iiwid2VicGFjazovLy8uL3NyYy93ZWVrbHkvY29tL2VkaXRvci52dWU/OTk4MCIsIndlYnBhY2s6Ly8vc3JjL3dlZWtseS9jb20vZWRpdG9yLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvd2Vla2x5L2NvbS9lZGl0b3IudnVlIl0sIm5hbWVzIjpbInJlcXVlc3QiLCJheGlvcyIsImNyZWF0ZSIsInRpbWVvdXQiLCJoZWFkZXJzIiwiX2giLCJ0aGlzIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJhdHRycyIsIl92IiwidmFsdWUiLCJfZSIsImNvbXBvbmVudHMiLCJ1aVByb2dyZXNzIiwicHJvcHMiLCJpbWdVcmwiLCJTdHJpbmciLCJpbWdMb2FkaW5nIiwidHlwZSIsIkJvb2xlYW4iLCJkZWZhdWx0IiwiZGF0YSIsImxvYWRpbmdWYWx1ZSIsInRpbWVyVGFzayIsInRvdWNoU3RhcnRUaW1lIiwic2hvd0RlbCIsIndhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsImNvbnNvbGUiLCJsb2ciLCJtZXRob2RzIiwiJHJlZnMiLCJpbWdQaWNrZXIiLCJjbGljayIsImUiLCIkZW1pdCIsImltZ3MiLCJpbWdPYmpzIiwiZmlsZXMiLCJsZW5ndGgiLCJpbmRleCIsImltZ09iaiIsImltZ09iamVjdCIsImlkIiwiTWF0aCIsInJhbmRvbSIsImZpbGVPYmoiLCJwdXNoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGF0ZSIsImdldFRpbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiX3ZtIiwiY2xhc3MiLCJvbiIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImNob29zZUltZyIsInJlZiIsInN0YXRpY1N0eWxlIiwiY2hhbmdlSW1nIiwiaGFuZGxlRHJvcEZpbGUiLCJsYXN0VGltZSIsInRocm90dGxlIiwiZnVuIiwiYXJndW1lbnRzIiwiaGVhZGVyVG9vbCIsImltZ1VwbG9hZGVyIiwiY29udGVudCIsIndvcnRoIiwicHJvY2VzcyIsInBpY3MiLCJjdXJQaWNzIiwiY3VyUGljUGF0aCIsImNvbXB1dGVkIiwiX3ByZXZEYXRhIiwiZm9jdXMiLCJiYWNrIiwibm93RGF0ZSIsImNyZWF0ZVRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwicmVwbGFjZSIsInVybHMiLCJfc2F2ZVNjaGVkdWxlIiwidXBkYXRlRWRpdGluZyIsImN1clNjaGVkdWxlIiwidXBkYXRlU2NoZWR1bGUiLCJzY2hlZHVsZVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzY2hlZHVsZUxpc3QiLCJwYXJhbSIsImZvcm1PYmoiLCJGb3JtRGF0YSIsIm1hcCIsImFwcGVuZCIsIm8iLCJ1cmwiLCJtZXRob2QiLCJyZXMiLCJzdGF0dXMiLCJmaWxlUGF0aCIsImZpbmRJbmRleCIsInNwbGljZSIsImNvbXBvbmVudCIsImRpcmVjdGl2ZXMiLCJuYW1lIiwicmF3TmFtZSIsImV4cHJlc3Npb24iLCJkb21Qcm9wcyIsIiRldmVudCIsInRhcmdldCIsImNvbXBvc2luZyIsImlucHV0SGFuZGxlciIsIl9sIiwicGljIiwia2V5IiwiZGVsZXRlSW1nIiwiY2hhbmdlSW1nTG9hZGluZyIsInBpY0tleSIsIl9zIl0sIm1hcHBpbmdzIjoieUZBQUEsWUFDQSxJQUFJQSxFQURKLE9BQ2NDLEVBQU1DLE9BQU8sQ0FDekJDLFFBQVMsSUFDVEMsUUFBUyxLQUVJSixPLGlDQ0xmLG1CQUF1YixHLGlDQ0F2YixtQkFBd2IsRyxpQ0NBeGIsbUJBQW9jLEcsd0NDQXBjLElDQTJMLEVDUzNMLENBQ0UsTUFBRixDQUNJLE1BQUosQ0FDTSxLQUFOLE9BQ00sUUFBTixLLGdCQ01lLEVBWEMsWUFDZCxHQ1RXLFdBQWEsSUFBaUJLLEVBQVRDLEtBQWdCQyxlQUFtQkMsRUFBbkNGLEtBQTBDRyxNQUFNRCxJQUFJSCxFQUFHLE9BQU9HLEVBQUcsTUFBTSxDQUFDRSxZQUFZLG9CQUFvQixDQUFDRixFQUFHLE1BQU0sQ0FBQ0csTUFBTSxDQUFDLE1BQVEsNkJBQTZCLFFBQVUsZUFBZSxDQUFDSCxFQUFHLE9BQU8sQ0FBQ0UsWUFBWSxpQkFBaUJDLE1BQU0sQ0FBQyxHQUFLLElBQUksR0FBSyxJQUFJLEdBQUssTUFBTSxHQUFLLE9BQTFRTCxLQUFxUk0sR0FBRyxLQUF4Uk4sS0FBdVMsTUFBRUUsRUFBRyxPQUFPLENBQUNFLFlBQVksc0JBQXNCQyxNQUFNLENBQUMsR0FBSyxJQUFJLEdBQUssSUFBSSxHQUFLLE1BQU0s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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5sZXQgcmVxdWVzdCA9IGF4aW9zLmNyZWF0ZSh7XHJcbiAgdGltZW91dDogMTAwMCAqIDMwLFxyXG4gIGhlYWRlcnM6IHt9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgcmVxdWVzdDtcclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0wIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTIyMTVmOGIwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNC0wIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTIyMTVmOGIwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMCEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbWctdXBsb2FkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NDQ4NDUxNzYmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW1nLXVwbG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQ0ODQ1MTc2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTQtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9lZGl0b3IudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MWVkZjNiOWMmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZWRpdG9yLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTFlZGYzYjljJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImltZy11cGxvYWRlci13cmFwcGVyXCJ9LFsoX3ZtLmltZ1VybCk/X2MoJ2ltZycse2NsYXNzOltcImFzc2Vzcy1pbWdcIiwgX3ZtLnNob3dEZWwgPyAnYXNzZXNzLWltZy1kZWwnIDogXCJcIl0sYXR0cnM6e1wic3JjXCI6X3ZtLmltZ1VybH0sb246e1widG91Y2hzdGFydFwiOl92bS5oYW5kbGVUb3VjaFN0YXJ0LFwidG91Y2hlbmRcIjpfdm0uaGFuZGxlVG91Y2hFbmR9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5pbWdVcmwpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFzc2Vzcy1iZ1wiLG9uOntcImNsaWNrXCI6X3ZtLmNob29zZUltZ319LFtfdm0uX3YoXCIrXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5pbWdVcmwpP19jKCdpbnB1dCcse3JlZjpcImltZ1BpY2tlclwiLHN0YXRpY1N0eWxlOntcIm9wYWNpdHlcIjpcIjBcIn0sYXR0cnM6e1widHlwZVwiOlwiZmlsZVwiLFwiYWNjZXB0XCI6XCJpbWFnZS8qXCIsXCJtdWx0aXBsZVwiOlwibXVsdGlwbGVcIn0sb246e1wiY2hhbmdlXCI6X3ZtLmNoYW5nZUltZ319KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmltZ1VybCAmJiBfdm0uaW1nTG9hZGluZyk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibG9hZGluZ1wifSxbX2MoJ3VpLXByb2dyZXNzJyx7YXR0cnM6e1widmFsdWVcIjpfdm0ubG9hZGluZ1ZhbHVlfX0pXSwxKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0uc2hvd0RlbCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZGVsXCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOlwiaWNvbiBmYSBmYS10aW1lc1wiLG9uOntcImNsaWNrXCI6X3ZtLmhhbmRsZURyb3BGaWxlfX0pXSk6X3ZtLl9lKCldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3Mtd3JhcHBlclwiPlxuICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwNSAxMFwiPlxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJwcm9ncmVzcy1wYXRoIFwiIHgxPVwiNVwiIHkxPVwiNVwiIHgyPVwiMTAwXCIgeTI9XCI1XCIgLz5cbiAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicHJvZ3Jlc3MtcGF0aCB2YWxpZFwiIHYtaWY9XCJ2YWx1ZVwiIHgxPVwiNVwiIHkxPVwiNVwiIHgyPVwiMTAwXCIgOnN0cm9rZS1kYXNoYXJyYXk9XCJgJHsxMDAqdmFsdWV9IDUwMGBcIiB5Mj1cIjVcIiAvPlxuICAgICAgICA8L3N2Zz5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHR7XG4gICAgcHJvcHM6e1xuICAgICAgICB2YWx1ZTp7XG4gICAgICAgICAgdHlwZTpOdW1iZXIsXG4gICAgICAgICAgZGVmYXVsdDowXG4gICAgICB9XG4gIH0gIFxufVxuPC9zY3JpcHQ+XG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5kaXZ7XG4gICAgZGlzcGxheTpibG9jaztcbiAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7XG4gICAgb3ZlcmZsb3c6aGlkZGVuO1xufVxuQGtleWZyYW1lcyB2YWxpZF9wYXRoIHtcbiAgICB0b3tcbiAgICAgICAgc3Ryb2tlLWRhc2hhcnJheTowIDUwMDtcbiAgICB9XG59XG4ucHJvZ3Jlc3Mtd3JhcHBlcntcbiAgICB3aWR0aDoxMDAlO1xuICAgIGhlaWdodDoxMDAlO1xufVxuc3Zne1xuICAgIHdpZHRoOjEwMCU7XG4gICAgaGVpZ2h0OjEwMCU7XG59XG4ucHJvZ3Jlc3MtcGF0aHtcbiAgICBzdHJva2Utd2lkdGg6NTtcbiAgICBzdHJva2UtbGluZWNhcDpyb3VuZDtcbiAgICBzdHJva2U6Izk5OTtcbn1cbi52YWxpZHtcbiAgICBzdHJva2U6cmdiYSg2NiwgMTQ0LCA1NSwgMSk7XG4gICAgLy8gdHJhbnNpdGlvbjphbGwgM3MgZWFzZTtcbiAgICBhbmltYXRpb246dmFsaWRfcGF0aCAxcyBlYXNlIHJldmVyc2U7XG59XG48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vdWktcHJvZ3Jlc3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIyMTVmOGIwJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vdWktcHJvZ3Jlc3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL3VpLXByb2dyZXNzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTIyMTVmOGIwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMjIxNWY4YjBcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwcm9ncmVzcy13cmFwcGVyXCJ9LFtfYygnc3ZnJyx7YXR0cnM6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMTA1IDEwXCJ9fSxbX2MoJ2xpbmUnLHtzdGF0aWNDbGFzczpcInByb2dyZXNzLXBhdGggXCIsYXR0cnM6e1wieDFcIjpcIjVcIixcInkxXCI6XCI1XCIsXCJ4MlwiOlwiMTAwXCIsXCJ5MlwiOlwiNVwifX0pLF92bS5fdihcIiBcIiksKF92bS52YWx1ZSk/X2MoJ2xpbmUnLHtzdGF0aWNDbGFzczpcInByb2dyZXNzLXBhdGggdmFsaWRcIixhdHRyczp7XCJ4MVwiOlwiNVwiLFwieTFcIjpcIjVcIixcIngyXCI6XCIxMDBcIixcInN0cm9rZS1kYXNoYXJyYXlcIjooKDEwMCpfdm0udmFsdWUpICsgXCIgNTAwXCIpLFwieTJcIjpcIjVcIn19KTpfdm0uX2UoKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiaW1nLXVwbG9hZGVyLXdyYXBwZXJcIj5cclxuICAgIDxpbWdcclxuICAgICAgdi1pZj1cImltZ1VybFwiXHJcbiAgICAgIDpzcmM9XCJpbWdVcmxcIlxyXG4gICAgICA6Y2xhc3M9XCJbYGFzc2Vzcy1pbWdgLCBzaG93RGVsID8gJ2Fzc2Vzcy1pbWctZGVsJyA6IGBgXVwiXHJcbiAgICAgIEB0b3VjaHN0YXJ0PVwiaGFuZGxlVG91Y2hTdGFydFwiXHJcbiAgICAgIEB0b3VjaGVuZD1cImhhbmRsZVRvdWNoRW5kXCJcclxuICAgIC8+XHJcbiAgICA8ZGl2IHYtaWY9XCIhaW1nVXJsXCIgY2xhc3M9XCJhc3Nlc3MtYmdcIiBAY2xpY2s9XCJjaG9vc2VJbWdcIj4rPC9kaXY+XHJcbiAgICA8aW5wdXRcclxuICAgICAgdi1pZj1cIiFpbWdVcmxcIlxyXG4gICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgIGFjY2VwdD1cImltYWdlLypcIlxyXG4gICAgICBzdHlsZT1cIm9wYWNpdHk6MFwiXHJcbiAgICAgIHJlZj1cImltZ1BpY2tlclwiXHJcbiAgICAgIG11bHRpcGxlPVwibXVsdGlwbGVcIlxyXG4gICAgICBAY2hhbmdlPVwiY2hhbmdlSW1nXCJcclxuICAgIC8+XHJcbiAgICA8ZGl2IGNsYXNzPVwibG9hZGluZ1wiIHYtaWY9XCIhaW1nVXJsICYmIGltZ0xvYWRpbmdcIj5cclxuICAgICAgPHVpLXByb2dyZXNzIDp2YWx1ZT1cImxvYWRpbmdWYWx1ZVwiPjwvdWktcHJvZ3Jlc3M+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJkZWxcIiB2LWlmPVwic2hvd0RlbFwiPlxyXG4gICAgICA8aSBjbGFzcz1cImljb24gZmEgZmEtdGltZXNcIiBAY2xpY2s9XCJoYW5kbGVEcm9wRmlsZVwiPjwvaT5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgdWlQcm9ncmVzcyBmcm9tIFwiLi91aS1wcm9ncmVzcy52dWVcIjtcclxuY29uc3QgRGVsZXRlRGVsYXkgPSAxMDAwO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgY29tcG9uZW50czoge1xyXG4gICAgdWlQcm9ncmVzcyxcclxuICB9LFxyXG4gIHByb3BzOiB7XHJcbiAgICBpbWdVcmw6IFN0cmluZyxcclxuICAgIGltZ0xvYWRpbmc6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8vIHNob3dMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgbG9hZGluZ1ZhbHVlOiAwLFxyXG4gICAgICB0aW1lclRhc2s6IG51bGwsXHJcbiAgICAgIHRvdWNoU3RhcnRUaW1lOiAwLFxyXG4gICAgICBzaG93RGVsOiBmYWxzZSxcclxuICAgIH07XHJcbiAgfSxcclxuICB3YXRjaDoge1xyXG4gICAgaW1nVXJsKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIjQ5XCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhuZXdWYWx1ZSwgNDkpO1xyXG4gICAgfSxcclxuICB9LFxyXG4gIG1vdW50ZWQoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmltZ1VybCwgNTQpO1xyXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5zaG93TG9hZGluZywgNTUpO1xyXG4gICAgLy8gLy8gaWYgKHRoaXMuaW1nVXJsKSB7XHJcbiAgICAvLyB0aGlzLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAvLyB9XHJcbiAgfSxcclxuICBtZXRob2RzOiB7XHJcbiAgICBjaG9vc2VJbWcoKSB7XHJcbiAgICAgIHRoaXMuJHJlZnMuaW1nUGlja2VyLmNsaWNrKCk7XHJcbiAgICB9LFxyXG4gICAgY2hhbmdlSW1nKGUpIHtcclxuICAgICAgdGhpcy4kZW1pdChcImNoYW5nZUxvYWRpbmdcIiwgdHJ1ZSk7XHJcbiAgICAgIGxldCBpbWdzID0gW107XHJcbiAgICAgIGxldCBpbWdPYmpzID0gdGhpcy4kcmVmcy5pbWdQaWNrZXIuZmlsZXM7XHJcbiAgICAgIGlmICghaW1nT2JqcyB8fCBpbWdPYmpzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICBmb3IgKGxldCBpbmRleCBpbiBpbWdPYmpzKSB7XHJcbiAgICAgICAgLy8gaWYgKGluZGV4ID49IGltZ09ianMubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgaWYgKGluZGV4IDwgaW1nT2Jqcy5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vICAgY29uc29sZS5sb2coaW1nT2JqcywgNjMpO1xyXG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhpbmRleCwgNjApO1xyXG4gICAgICAgICAgLy8gICBjb25zb2xlLmxvZyhpbWdPYmpzW2luZGV4XSwgNjEpO1xyXG4gICAgICAgICAgLy8gICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgIGxldCBpbWdPYmogPSBpbWdPYmpzW2luZGV4XTtcclxuICAgICAgICAgIC8vICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW1nT2JqKTtcclxuICAgICAgICAgIC8vICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgIGxldCBpbWdPYmplY3QgPSB7XHJcbiAgICAgICAgICAgIGlkOiBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICAgICAgICAvLyAgIGRhdGE6IHJlYWRlci5yZXN1bHQsXHJcbiAgICAgICAgICAgIGZpbGVPYmo6IGltZ09iaixcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBpbWdzLnB1c2goaW1nT2JqZWN0KTtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGltZ3MsIDYwKTtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1ZhbHVlID0gaW1ncy5sZW5ndGggLyBpbWdPYmpzLmxlbmd0aDtcclxuICAgICAgICAgIGlmIChpbWdzLmxlbmd0aCA9PT0gaW1nT2Jqcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy4kZW1pdChcImNob29zZUltZ1wiLCBpbWdzKTtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAvLyB0aGlzLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgdGhpcy4kZW1pdChcImNoYW5nZUltZ0xvYWRpbmdcIiwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZVRvdWNoU3RhcnQoKSB7XHJcbiAgICAgIGlmICghdGhpcy5pbWdVcmwpIHJldHVybjtcclxuICAgICAgdGhpcy50b3VjaFN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcInRvdWNoU3RhcnRcIiwgdGhpcy50b3VjaFN0YXJ0VGltZSk7XHJcbiAgICAgIHRoaXMudGltZXJUYXNrID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93RGVsID0gdHJ1ZTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNob3dEZWwsIDg4KTtcclxuICAgICAgfSwgRGVsZXRlRGVsYXkpO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZVRvdWNoRW5kKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcInRvdWNoZW5kXCIsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcclxuXHJcbiAgICAgIGlmIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMudG91Y2hTdGFydFRpbWUgPCBEZWxldGVEZWxheSkge1xyXG4gICAgICAgIHRoaXMuc2hvd0RlbCA9IGZhbHNlO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyVGFzayk7XHJcbiAgICAgICAgdGhpcy50aW1lclRhc2sgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc2hvd0RlbCwgOTgpO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZURyb3BGaWxlKCkge1xyXG4gICAgICB0aGlzLiRlbWl0KFwiZHJvcEltZ1wiLCB0aGlzLmltZ1VybCk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbkBpbXBvcnQgdXJsKFwiaHR0cHM6Ly9jZG4uYm9vdGNzcy5jb20vZm9udC1hd2Vzb21lLzQuNy4wL2Nzcy9mb250LWF3ZXNvbWUuY3NzXCIpO1xyXG5zZWN0aW9uLFxyXG5kaXYge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgbWFyZ2luOiAwO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxufVxyXG4uaW1nLXVwbG9hZGVyLXdyYXBwZXIge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICBvdmVyZmxvdzogdmlzaWJsZTtcclxufVxyXG4ubG9hZGluZyB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMHB4O1xyXG4gIGxlZnQ6IDBweDtcclxuICByaWdodDogMHB4O1xyXG4gIGJvdHRvbTogMHB4O1xyXG4gIHBhZGRpbmc6IDBweCAyMHB4O1xyXG4gIGJhY2tncm91bmQ6ICNlZWU7XHJcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICBib3JkZXI6IDFweCAjY2NjIHNvbGlkO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG4uZGVsIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwcHg7XHJcbiAgbGVmdDogMHB4O1xyXG4gIHJpZ2h0OiAwcHg7XHJcbiAgYm90dG9tOiAwcHg7XHJcbiAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcclxuICAuaWNvbiB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICB0b3A6IC0zMHB4O1xyXG4gICAgcmlnaHQ6IC0zMHB4O1xyXG4gICAgd2lkdGg6IDY1cHg7XHJcbiAgICBoZWlnaHQ6IDU1cHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4IDIwcHggMHB4IDIwcHg7XHJcbiAgICBjb2xvcjogIzk5OTtcclxuICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgfVxyXG59XHJcblxyXG4uYXNzZXNzLWltZyB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7XHJcbiAgLy8gd2lkdGg6IDcwJTtcclxuICAvLyBoZWlnaHQ6IDcwJTtcclxuICAvLyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxNSUsIDE1JSk7XHJcbn1cclxuLmFzc2Vzcy1pbWctZGVsIHtcclxuICB3aWR0aDogODAlO1xyXG4gIGhlaWdodDogODAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDEyJSwgMTIlKTtcclxufVxyXG4uYXNzZXNzLWJnIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGxpbmUtaGVpZ2h0OiAxMDAlO1xyXG4gIGZvbnQtc2l6ZTogNTBweDtcclxuICBmb250LXdlaWdodDogMjAwO1xyXG4gIGJhY2tncm91bmQ6ICNlZWU7XHJcbiAgY29sb3I6ICM5OTk7XHJcbiAgJjpiZWZvcmUge1xyXG4gICAgLyogY29udGVudDogXCIrXCI7ICovXHJcbiAgICBkaXNwbGF5OiBpbmxpbmU7XHJcbiAgfVxyXG59XHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbWctdXBsb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW1nLXVwbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW1nLXVwbG9hZGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NDg0NTE3NiZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbWctdXBsb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbWctdXBsb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2ltZy11cGxvYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00NDg0NTE3NiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjQ0ODQ1MTc2XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwibGV0IGxhc3RUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbmZ1bmN0aW9uIHRocm90dGxlKGZ1biwgdGltZW91dCkge1xyXG4gIC8vICAgY29uc29sZS5sb2coXCJ0aHJvdHRsZVwiLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFRpbWUgPD0gdGltZW91dCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsYXN0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgZnVuKGFyZ3VtZW50cyk7XHJcbiAgfTtcclxufVxyXG5mdW5jdGlvbiBkZWJvdW5jZSgpIHt9XHJcblxyXG5leHBvcnQgeyB0aHJvdHRsZSwgZGVib3VuY2UgfTtcclxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZWRpdG9yLXdyYXBwZXJcIn0sW19jKCdoZWFkZXItdG9vbCcse29uOntcImJhY2tcIjpfdm0uYmFja319KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbnRhaW5lclwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZ3JhZGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImdyYWRlLXByb2dyZXNzXCJ9LFtfYygnc3ZnJyx7YXR0cnM6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMTA1IDEwXCJ9fSxbX2MoJ2xpbmUnLHtzdGF0aWNDbGFzczpcImdyYWRlLXByb2dyZXNzLXBhdGhcIixhdHRyczp7XCJ4MVwiOlwiNVwiLFwieTFcIjpcIjVcIixcIngyXCI6XCIxMDBcIixcInkyXCI6XCI1XCJ9fSksX3ZtLl92KFwiIFwiKSwoX3ZtLnByb2Nlc3MgJiYgX3ZtLndvcnRoKT9fYygnbGluZScse3N0YXRpY0NsYXNzOlwiZ3JhZGUtcHJvZ3Jlc3MtcGF0aCB2YWxpZFwiLGF0dHJzOntcIngxXCI6XCI1XCIsXCJ5MVwiOlwiNVwiLFwieDJcIjpcIjEwMFwiLFwic3Ryb2tlLWRhc2hhcnJheVwiOigoX3ZtLnByb2Nlc3MgPCBfdm0ud29ydGggPyAoMTAwICogX3ZtLnByb2Nlc3MpIC8gX3ZtLndvcnRoIDogMTAwKSArIFwiIDUwMFwiKSxcInkyXCI6XCI1XCJ9fSk6X3ZtLl9lKCldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZ3JhZGUtd29ydGhcIn0sW192bS5fdihcIlxcbiAgICAgICAg5oC75YiGXFxuICAgICAgICBcIiksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS53b3J0aCksZXhwcmVzc2lvbjpcIndvcnRoXCJ9XSxhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIn0sZG9tUHJvcHM6e1widmFsdWVcIjooX3ZtLndvcnRoKX0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLndvcnRoPSRldmVudC50YXJnZXQudmFsdWV9fX0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJncmFkZS1wcm9jZXNzXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICznjrDlvpfliIZcXG4gICAgICAgIFwiKSxfYygnc3BhbicsW19jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOihfdm0ucHJvY2VzcyksZXhwcmVzc2lvbjpcInByb2Nlc3NcIn1dLGF0dHJzOntcInR5cGVcIjpcIm51bWJlclwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOihfdm0ucHJvY2Vzcyl9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS5wcm9jZXNzPSRldmVudC50YXJnZXQudmFsdWV9fX0pXSldKV0pLF92bS5fdihcIiBcIiksX2MoJ3RleHRhcmVhJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5jb250ZW50KSxleHByZXNzaW9uOlwiY29udGVudFwifV0scmVmOlwiY29udGVudFwiLHN0YXRpY0NsYXNzOlwiY29udGVudFwiLGF0dHJzOntcInBsYWNlaG9sZGVyXCI6XCJhZGQgc29tZSBjb250ZW50XCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5jb250ZW50KX0sb246e1wiaW5wdXRcIjpbZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS5jb250ZW50PSRldmVudC50YXJnZXQudmFsdWV9LF92bS5pbnB1dEhhbmRsZXJdfX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2NoZWR1bGVcIn0sWyhfdm0uY3VyUGljUGF0aCAmJiBfdm0uY3VyUGljUGF0aC5sZW5ndGggPiAwKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzY2hlZHVsZS1jdXJcIn0sW192bS5fbCgoX3ZtLmN1clBpY1BhdGgpLGZ1bmN0aW9uKHBpYyl7cmV0dXJuIF9jKCdpbWctdXBsb2FkZXInLHtrZXk6cGljLHN0YXRpY0NsYXNzOlwic2NoZWR1bGUtY3VyLWl0ZW1cIixhdHRyczp7XCJpbWdVcmxcIjpwaWN9LG9uOntcImNob29zZUltZ1wiOl92bS5jaG9vc2VJbWcsXCJkcm9wSW1nXCI6X3ZtLmRlbGV0ZUltZ319KX0pLF92bS5fdihcIiBcIiksX2MoJ2ltZy11cGxvYWRlcicse3N0YXRpY0NsYXNzOlwic2NoZWR1bGUtY3VyLWl0ZW1cIixhdHRyczp7XCJpbWdMb2FkaW5nXCI6X3ZtLmltZ0xvYWRpbmd9LG9uOntcImNob29zZUltZ1wiOl92bS5jaG9vc2VJbWcsXCJjaGFuZ2VMb2FkaW5nXCI6X3ZtLmNoYW5nZUltZ0xvYWRpbmd9fSldLDIpOl9jKCdpbWctdXBsb2FkZXInLHtzdGF0aWNDbGFzczpcInNjaGVkdWxlLWN1ci1pdGVtXCIsYXR0cnM6e1wiaW1nTG9hZGluZ1wiOl92bS5pbWdMb2FkaW5nfSxvbjp7XCJjaG9vc2VJbWdcIjpfdm0uY2hvb3NlSW1nLFwiY2hhbmdlTG9hZGluZ1wiOl92bS5jaGFuZ2VJbWdMb2FkaW5nfX0pXSwxKSxfdm0uX3YoXCIgXCIpLChfdm0ucGljcyAmJiBfdm0ucGljcy5sZW5ndGggPiAwKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzY2hlZHVsZSBoaXN0b3J5XCJ9LF92bS5fbCgoX3ZtLnBpY3MpLGZ1bmN0aW9uKHBpYyxwaWNLZXkpe3JldHVybiBfYygnZGl2Jyx7a2V5OnBpY0tleSxzdGF0aWNDbGFzczpcImhpc3RvcnktaXRlbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaGlzdG9yeS1pdGVtLXRpbWVcIn0sW192bS5fdihfdm0uX3MocGljLmNyZWF0ZVRpbWUpKV0pLF92bS5fdihcIiBcIiksKHBpYy51cmxzICYmIHBpYy51cmxzLmxlbmd0aCA+IDApP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhpc3RvcnktaXRlbS1waWNzXCJ9LF92bS5fbCgocGljLnVybHMpLGZ1bmN0aW9uKHVybCl7cmV0dXJuIF9jKCdpbWctdXBsb2FkZXInLHtrZXk6dXJsLHN0YXRpY0NsYXNzOlwiaGlzdG9yeS1pdGVtLXBpY3MtaXRlbVwiLGF0dHJzOntcImltZ1VybFwiOnVybH19KX0pLDEpOl92bS5fZSgpXSl9KSwwKTpfdm0uX2UoKV0pXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2VkaXRvci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9lZGl0b3IudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxyXG4gIDxkaXYgY2xhc3M9XCJlZGl0b3Itd3JhcHBlclwiPlxyXG4gICAgPGhlYWRlci10b29sIEBiYWNrPVwiYmFja1wiIC8+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJncmFkZVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJncmFkZS1wcm9ncmVzc1wiPlxyXG4gICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDUgMTBcIj5cclxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJncmFkZS1wcm9ncmVzcy1wYXRoXCIgeDE9XCI1XCIgeTE9XCI1XCIgeDI9XCIxMDBcIiB5Mj1cIjVcIiAvPlxyXG4gICAgICAgICAgICA8bGluZVxyXG4gICAgICAgICAgICAgIGNsYXNzPVwiZ3JhZGUtcHJvZ3Jlc3MtcGF0aCB2YWxpZFwiXHJcbiAgICAgICAgICAgICAgdi1pZj1cInByb2Nlc3MgJiYgd29ydGhcIlxyXG4gICAgICAgICAgICAgIHgxPVwiNVwiXHJcbiAgICAgICAgICAgICAgeTE9XCI1XCJcclxuICAgICAgICAgICAgICB4Mj1cIjEwMFwiXHJcbiAgICAgICAgICAgICAgOnN0cm9rZS1kYXNoYXJyYXk9XCJcclxuICAgICAgICAgICAgICAgIGAke3Byb2Nlc3MgPCB3b3J0aCA/ICgxMDAgKiBwcm9jZXNzKSAvIHdvcnRoIDogMTAwfSA1MDBgXHJcbiAgICAgICAgICAgICAgXCJcclxuICAgICAgICAgICAgICB5Mj1cIjVcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImdyYWRlLXdvcnRoXCI+XHJcbiAgICAgICAgICDmgLvliIZcclxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbD1cIndvcnRoXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JhZGUtcHJvY2Vzc1wiPlxyXG4gICAgICAgICAgLOeOsOW+l+WIhlxyXG4gICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbD1cInByb2Nlc3NcIiAvPlxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgcmVmPVwiY29udGVudFwiXHJcbiAgICAgICAgY2xhc3M9XCJjb250ZW50XCJcclxuICAgICAgICB2LW1vZGVsPVwiY29udGVudFwiXHJcbiAgICAgICAgQGlucHV0PVwiaW5wdXRIYW5kbGVyXCJcclxuICAgICAgICBwbGFjZWhvbGRlcj1cImFkZCBzb21lIGNvbnRlbnRcIlxyXG4gICAgICA+PC90ZXh0YXJlYT5cclxuICAgICAgPGRpdiBjbGFzcz1cInNjaGVkdWxlXCI+XHJcbiAgICAgICAgPGRpdiB2LWlmPVwiY3VyUGljUGF0aCAmJiBjdXJQaWNQYXRoLmxlbmd0aCA+IDBcIiBjbGFzcz1cInNjaGVkdWxlLWN1clwiPlxyXG4gICAgICAgICAgPGltZy11cGxvYWRlclxyXG4gICAgICAgICAgICB2LWZvcj1cInBpYyBpbiBjdXJQaWNQYXRoXCJcclxuICAgICAgICAgICAgOmtleT1cInBpY1wiXHJcbiAgICAgICAgICAgIGNsYXNzPVwic2NoZWR1bGUtY3VyLWl0ZW1cIlxyXG4gICAgICAgICAgICBAY2hvb3NlSW1nPVwiY2hvb3NlSW1nXCJcclxuICAgICAgICAgICAgQGRyb3BJbWc9XCJkZWxldGVJbWdcIlxyXG4gICAgICAgICAgICA6aW1nVXJsPVwicGljXCJcclxuICAgICAgICAgID48L2ltZy11cGxvYWRlcj5cclxuICAgICAgICAgIDxpbWctdXBsb2FkZXJcclxuICAgICAgICAgICAgY2xhc3M9XCJzY2hlZHVsZS1jdXItaXRlbVwiXHJcbiAgICAgICAgICAgIEBjaG9vc2VJbWc9XCJjaG9vc2VJbWdcIlxyXG4gICAgICAgICAgICBAY2hhbmdlTG9hZGluZz1cImNoYW5nZUltZ0xvYWRpbmdcIlxyXG4gICAgICAgICAgICA6aW1nTG9hZGluZz1cImltZ0xvYWRpbmdcIlxyXG4gICAgICAgICAgPjwvaW1nLXVwbG9hZGVyPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxpbWctdXBsb2FkZXJcclxuICAgICAgICAgIGNsYXNzPVwic2NoZWR1bGUtY3VyLWl0ZW1cIlxyXG4gICAgICAgICAgQGNob29zZUltZz1cImNob29zZUltZ1wiXHJcbiAgICAgICAgICBAY2hhbmdlTG9hZGluZz1cImNoYW5nZUltZ0xvYWRpbmdcIlxyXG4gICAgICAgICAgOmltZ0xvYWRpbmc9XCJpbWdMb2FkaW5nXCJcclxuICAgICAgICAgIHYtZWxzZVxyXG4gICAgICAgID48L2ltZy11cGxvYWRlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzY2hlZHVsZSBoaXN0b3J5XCIgdi1pZj1cInBpY3MgJiYgcGljcy5sZW5ndGggPiAwXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImhpc3RvcnktaXRlbVwiIHYtZm9yPVwiKHBpYywgcGljS2V5KSBpbiBwaWNzXCIgOmtleT1cInBpY0tleVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImhpc3RvcnktaXRlbS10aW1lXCI+e3sgcGljLmNyZWF0ZVRpbWUgfX08L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaXN0b3J5LWl0ZW0tcGljc1wiIHYtaWY9XCJwaWMudXJscyAmJiBwaWMudXJscy5sZW5ndGggPiAwXCI+XHJcbiAgICAgICAgICAgIDxpbWctdXBsb2FkZXJcclxuICAgICAgICAgICAgICB2LWZvcj1cInVybCBpbiBwaWMudXJsc1wiXHJcbiAgICAgICAgICAgICAgOmtleT1cInVybFwiXHJcbiAgICAgICAgICAgICAgY2xhc3M9XCJoaXN0b3J5LWl0ZW0tcGljcy1pdGVtXCJcclxuICAgICAgICAgICAgICA6aW1nVXJsPVwidXJsXCJcclxuICAgICAgICAgICAgPjwvaW1nLXVwbG9hZGVyPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCByZXF1ZXN0IGZyb20gXCJyZXF1ZXN0XCI7XHJcbmltcG9ydCB7IG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMgfSBmcm9tIFwidnVleFwiO1xyXG5pbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gXCJsaWIvdGhyb3R0bGUuanNcIjtcclxuaW1wb3J0IHsgb3NzQmF0Y2hVcGxvYWRlciB9IGZyb20gXCJsaWIvdGhyb3R0bGUuanNcIjtcclxuXHJcbmltcG9ydCBpbWdVcGxvYWRlciBmcm9tIFwiY29tcG9uZW50cy9pbWctdXBsb2FkZXIudnVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICBoZWFkZXJUb29sOiAoKSA9PiBpbXBvcnQoXCIuL2hlYWRlclRvb2wudnVlXCIpLFxyXG4gICAgaW1nVXBsb2FkZXI6ICgpID0+IGltcG9ydChcImNvbXBvbmVudHMvaW1nLXVwbG9hZGVyXCIpLFxyXG4gIH0sXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvbnRlbnQ6IFwiXCIsXHJcbiAgICAgIHdvcnRoOiAwLFxyXG4gICAgICBwcm9jZXNzOiAwLFxyXG4gICAgICBwaWNzOiBbXSxcclxuICAgICAgY3VyUGljczogW10sXHJcbiAgICAgIGN1clBpY1BhdGg6IFtdLFxyXG4gICAgICBpbWdMb2FkaW5nOiBmYWxzZSxcclxuICAgIH07XHJcbiAgfSxcclxuICBjb21wdXRlZDoge1xyXG4gICAgLi4ubWFwU3RhdGUoXCJ3ZWVrbHlcIiwgW1wic2NoZWR1bGVMaXN0XCIsIFwidGFza0lkXCIsIFwiY3VyU2NoZWR1bGVcIiwgXCJzdWJJZFwiXSksXHJcbiAgfSxcclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy5fcHJldkRhdGEoKTtcclxuICAgIHRoaXMuJHJlZnMuY29udGVudC5mb2N1cygpO1xyXG4gIH0sXHJcbiAgYmVmb3JlRGVzdHJveSgpIHtcclxuICAgIHRoaXMuYmFjaygpO1xyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgLi4ubWFwTXV0YXRpb25zKFwid2Vla2x5XCIsIFtcInVwZGF0ZVNjaGVkdWxlXCIsIFwidXBkYXRlRWRpdGluZ1wiXSksXHJcbiAgICBiYWNrKCkge1xyXG4gICAgICAvLyDkv53lrZjmlrDkuIrkvKDnmoTlm77niYdcclxuICAgICAgY29uc29sZS5sb2codGhpcy5jdXJQaWNQYXRoLCAxMTEpO1xyXG4gICAgICBpZiAodGhpcy5jdXJQaWNQYXRoICYmIHRoaXMuY3VyUGljUGF0aC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IG5vd0RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGxldCBjcmVhdGVUaW1lID0gYCR7bm93RGF0ZS5nZXRGdWxsWWVhcigpfS0ke25vd0RhdGUuZ2V0TW9udGgoKSArXHJcbiAgICAgICAgICAxfS0ke25vd0RhdGUuZ2V0RGF5KCl9YDtcclxuICAgICAgICBjcmVhdGVUaW1lID0gY3JlYXRlVGltZS5yZXBsYWNlKC9cXGIoPz1cXGQoXFxzfFxcOnxcXC18XFxiKSkvZywgMCk7XHJcblxyXG4gICAgICAgIHRoaXMucGljcy5wdXNoKHtcclxuICAgICAgICAgIGNyZWF0ZVRpbWUsXHJcbiAgICAgICAgICB1cmxzOiB0aGlzLmN1clBpY1BhdGgsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jdXJQaWNQYXRoID0gW107XHJcblxyXG4gICAgICB0aGlzLl9zYXZlU2NoZWR1bGUoKTtcclxuICAgICAgdGhpcy51cGRhdGVFZGl0aW5nKGZhbHNlKTtcclxuICAgIH0sXHJcbiAgICBfcHJldkRhdGEoKSB7XHJcbiAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY3VyU2NoZWR1bGUuY29udGVudDtcclxuICAgICAgdGhpcy53b3J0aCA9IHRoaXMuY3VyU2NoZWR1bGUud29ydGg7XHJcbiAgICAgIHRoaXMucHJvY2VzcyA9IHRoaXMuY3VyU2NoZWR1bGUucHJvY2VzcztcclxuICAgICAgdGhpcy5waWNzID0gdGhpcy5jdXJTY2hlZHVsZS5waWNzIHx8IFtdO1xyXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnBpY3MsIDEyOCk7XHJcbiAgICB9LFxyXG4gICAgaW5wdXRIYW5kbGVyKCkge1xyXG4gICAgICB0aHJvdHRsZSgoKSA9PiB7XHJcbiAgICAgICAgLy8g5pu05paw5YiwdnVleFxyXG4gICAgICAgIHRoaXMuX3NhdmVTY2hlZHVsZSgpO1xyXG4gICAgICB9LCA1MDApKCk7XHJcbiAgICB9LFxyXG4gICAgLy8g6L+U5ZueXHJcbiAgICAvLyBoYW5kbGVCYWNrKCkge1xyXG4gICAgLy8gICAgIHRoaXMuX3NhdmVTY2hlZHVsZSgpO1xyXG4gICAgLy8gICAgIHRoaXMudXBkYXRlRWRpdGluZyhmYWxzZSk7XHJcbiAgICAvLyB9LFxyXG4gICAgX3NhdmVTY2hlZHVsZSgpIHtcclxuICAgICAgLy8g5pu05pawc3RvcmVcclxuICAgICAgdGhpcy51cGRhdGVTY2hlZHVsZShcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY3VyU2NoZWR1bGUsIHtcclxuICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuY29udGVudCxcclxuICAgICAgICAgIHdvcnRoOiB0aGlzLndvcnRoLFxyXG4gICAgICAgICAgcHJvY2VzczogdGhpcy5wcm9jZXNzLFxyXG4gICAgICAgICAgcGljczogdGhpcy5waWNzLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICAgIC8vIOabtOaWsOaVsOaNruW6k1xyXG4gICAgICBsZXQgc2NoZWR1bGVTdHIgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodGhpcy5zY2hlZHVsZUxpc3QpKTtcclxuICAgICAgcmVxdWVzdFxyXG4gICAgICAgIC5nZXQoXHJcbiAgICAgICAgICBgL3Rhc2svdXBkYXRlVGFzaz90YXNrSWQ9JHt0aGlzLnRhc2tJZH0mc2NoZWR1bGVTdHI9JHtzY2hlZHVsZVN0cn1gXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGNoYW5nZUltZ0xvYWRpbmcocGFyYW0pIHtcclxuICAgICAgY29uc29sZS5sb2cocGFyYW0sIDE3NCk7XHJcbiAgICAgIHRoaXMuaW1nTG9hZGluZyA9IHBhcmFtO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGNob29zZUltZyhwYXJhbSkge1xyXG4gICAgICB0aGlzLmN1clBpY3MucHVzaCguLi5wYXJhbSk7XHJcbiAgICAgIGxldCBmb3JtT2JqID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgIHBhcmFtLm1hcCgobykgPT4ge1xyXG4gICAgICAgIGZvcm1PYmouYXBwZW5kKFwiZmlsZVwiLCBvLmZpbGVPYmopO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZvcm1PYmouYXBwZW5kKFwicGF0aFwiLCBcInBpY3R1cmVzL3dlZWtseVwiKTtcclxuICAgICAgcmVxdWVzdCh7XHJcbiAgICAgICAgdXJsOiBcIi9jb21tb24vZmlsZVwiLFxyXG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXHJcbiAgICAgICAgZGF0YTogZm9ybU9iaixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB0aGlzLmN1clBpY1BhdGgucHVzaCguLi5yZXMuZGF0YSk7XHJcbiAgICAgICAgICB0aGlzLmltZ0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZUltZyhwYXJhbSkge1xyXG4gICAgICByZXF1ZXN0KHtcclxuICAgICAgICB1cmw6IFwiL2NvbW1vbi9kcm9wZmlsZVwiLFxyXG4gICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgZmlsZVBhdGg6IHBhcmFtLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDAgJiYgcmVzLmRhdGEpIHtcclxuICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY3VyUGljUGF0aC5maW5kSW5kZXgoKG8pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG8gPT09IHBhcmFtO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICB0aGlzLmN1clBpY1BhdGguc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgIHRoaXMuaW1nTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbkBrZXlmcmFtZXMgdmFsaWRfcGF0aCB7XHJcbiAgLy8gZnJvbXtcclxuICAvLyAgICAgc3Ryb2tlLWRhc2hhcnJheTogMCAwO1xyXG4gIC8vIH1cclxuICB0byB7XHJcbiAgICBzdHJva2UtZGFzaGFycmF5OiAwIDUwMDtcclxuICB9XHJcbn1cclxuLmVkaXRvci13cmFwcGVyIHtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJhY2tncm91bmQ6IHJnYmEoMjQyLCAyNDUsIDI0OSwgMSk7XHJcbn1cclxudGV4dGFyZWEge1xyXG4gIGFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIG91dGxpbmU6IG5vbmU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuLmNvbnRhaW5lciB7XHJcbiAgZmxleDogMTtcclxuICBmbGV4LXNocmluazogMTtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuLmdyYWRlIHtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICYtcHJvZ3Jlc3Mge1xyXG4gICAgZmxleDogMTtcclxuICAgIGZsZXgtc2hyaW5rOiAxO1xyXG4gICAgc3ZnIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuICAgICYtcGF0aCB7XHJcbiAgICAgIHN0cm9rZS13aWR0aDogNTtcclxuICAgICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xyXG4gICAgICBzdHJva2U6ICM5OTk7XHJcbiAgICB9XHJcbiAgICAudmFsaWQge1xyXG4gICAgICBzdHJva2U6IHJlZDtcclxuICAgICAgdHJhbnNpdGlvbjogYWxsIDNzIGVhc2U7XHJcbiAgICAgIGFuaW1hdGlvbjogdmFsaWRfcGF0aCAxcyBlYXNlIHJldmVyc2U7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0ge1xyXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBvdXRsaW5lOiAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICB3aWR0aDogMzZweDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCAjOTk5IHNvbGlkO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZDogbm9uZTtcclxuICB9XHJcbiAgJi13b3J0aCB7XHJcbiAgICBmbGV4LXNocmluazogMTtcclxuICB9XHJcbiAgJi1wcm9jZXNzIHtcclxuICAgIGZsZXgtc2hyaW5rOiAxO1xyXG4gIH1cclxufVxyXG4uY29udGVudCB7XHJcbiAgaGVpZ2h0OiAxODBweDtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgcGFkZGluZzogMHB4IDVweDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIGJvcmRlcjogMXB4IHJnYmEoMTgwLCAxNzUsIDE3NSwgMSkgc29saWQ7XHJcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxufVxyXG4uc2NoZWR1bGUge1xyXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7XHJcbiAgJi1pdGVtIHtcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgfVxyXG59XHJcbi5zY2hlZHVsZS1jdXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC13cmFwOiB3cmFwO1xyXG5cclxuICAmLWl0ZW0ge1xyXG4gICAgbWFyZ2luOiAxMHB4IDVweDtcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIGhlaWdodDogMTAwcHg7XHJcbiAgfVxyXG59XHJcbi5oaXN0b3J5IHtcclxuICAmLWl0ZW0ge1xyXG4gICAgJi10aW1lIHtcclxuICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIH1cclxuICAgICYtcGljcyB7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICYtaXRlbSB7XHJcbiAgICAgICAgd2lkdGg6IDEwMHB4O1xyXG4gICAgICAgIGhlaWdodDogMTAwcHg7XHJcbiAgICAgICAgbWFyZ2luOiAxMHB4IDhweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG48L3N0eWxlPlxyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2VkaXRvci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWVkZjNiOWMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vZWRpdG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vZWRpdG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9lZGl0b3IudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MWVkZjNiOWMmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIxZWRmM2I5Y1wiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=