(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{128:function(t,e,a){"use strict";a.r(e);var i=a(3),n=a(10);const o="108.8371912900,34.2032353700",r=[610103,610104,610113];var s={data:()=>({gardens:[],driveRoutes:[],mapObj:null,pathObj:null}),computed:{...Object(i.mapGetters)("estate",["getCurArea"])},async mounted(){await this._initMapScript(),await this._initMapUi(),await this._initGardens(),this._initDriveRoute(),setTimeout(async()=>{},1e3)},methods:{async _initMapScript(){return new Promise((t,e)=>{window.onLoad=async()=>(this._initMapContainer(),t());let a=document.createElement("script");a.charset="utf-8",a.src="https://webapi.amap.com/maps?v=1.4.15&key=17569efbd54a284b8bd0ce338ae71616&callback=onLoad",document.head.appendChild(a)})},_initMapContainer(){let t=this._initLocation(o),e=this._initLocation(this.getCurArea.location);this.mapObj=new AMap.Map("map-container",{zoom:11,center:[(Number(t[0])+Number(e[0]))/2,(Number(t[1])+Number(e[1]))/2],mapStyle:"amap://styles/light"})},async _initMapUi(){return new Promise((t,e)=>{let a=document.createElement("script");a.charset="utf-8",a.src="https://webapi.amap.com/ui/1.0/main.js?v=1.0.11",document.head.appendChild(a);let i=this;a.onload=()=>{AMapUI.loadUI(["overlay/SimpleMarker"],(function(e){return new e({iconTheme:"default",iconStyle:"orange",map:i.mapObj,position:i._initLocation(o),label:{content:"高新软件园",offset:new AMap.Pixel(-10,-20)}}),new e({iconTheme:"default",iconStyle:"orange",map:i.mapObj,position:i._initLocation(i.getCurArea.location),label:{content:i.getCurArea.label,offset:new AMap.Pixel(-10,-20)}}),t()}))}})},_initGardens(){n.a.get("/xian/aroundGarden?originLocation="+this.getCurArea.location).then(t=>{if(200===t.status&&(this.gardens=t.data,this.gardens&&this.gardens.length>0)){let t=this;AMapUI.loadUI(["overlay/SvgMarker"],(function(e){t.gardens.map((a,i)=>{var n=new e.Shape.Circle({height:16,strokeWidth:1,strokeColor:"#fff",fillColor:"#177261"});n.getCenter();new e(n,{map:t.mapObj,position:t._initLocation(a.location),containerClassNames:"shape-Circle",iconLabel:{innerHTML:i+1,style:{color:"#fff",fontSize:"12px"}}})})}))}})},_initPathLns(){let t=this;AMapUI&&AMapUI.load(["ui/misc/PathSimplifier","lib/$"],(function(e,a){let i=new e({zIndex:100,map:t.mapObj,getPath:(t,e)=>t.path,renderOptions:{renderAllPointsIfNumberBelow:100}});i.setData([{name:"路线0",path:[...t.driveRoutes]}]),i.createPathNavigator(0,{loop:!0,speed:5e3}).start()}))},_initDistrict(){let t=this;AMapUI.load(["ui/geo/DistrictExplorer","lib/$"],(function(e){let a=new e({map:t.mapObj});var i=["#3366cc","#dc3912","#ff9900","#aa9900","#ff1901","#aa0101","red","green"];r.map((t,e)=>{a.loadAreaNode(t,(function(t,n){a.renderSubFeatures(n,(function(t,e){return{cursor:"default",bubble:!0,strokeColor:"blue",strokeOpacity:1,strokeWeight:1,fillColor:"red",fillOpacity:.35}})),a.renderParentFeature(n,{cursor:"default",bubble:!0,strokeColor:null,strokeOpacity:1,strokeWeight:1,fillColor:i[e],fillOpacity:.35})}))})}))},_initDriveRoute(){n.a.get(`/xian/drivingRoute?originLocation=${this.getCurArea.location}&destination=${o}`).then(t=>{200===t.status&&t.data.steps&&t.data.steps.length>0&&(t.data.steps.forEach(t=>{if(t.polyline){this._formatPolyline(t.polyline);this.driveRoutes.push(...this._formatPolyline(t.polyline))}}),this._initPathLns())})},_initLocation:t=>t.split(","),_formatPolyline(t){return t.split(";").map(t=>{let e=this._initLocation(t);return[Number(e[0]),Number(e[1])]})}}},l=(a(98),a(2)),c=Object(l.a)(s,(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"map-wrapper"},[t.gardens&&t.gardens.length>0?a("section",{staticClass:"garden"},t._l(t.gardens,(function(e,i){return a("section",{key:i,staticClass:"garden-item"},[a("section",{staticClass:"garden-item-icon"},[t._v(t._s(i+1))]),t._v(" "),a("section",{staticClass:"garden-item-label"},[t._v("\n        "+t._s(e.name)+",距离"+t._s(e.distance)+"米\n      ")])])})),0):t._e(),t._v(" "),a("section",{staticClass:"map-container",attrs:{id:"map-container"}})])}),[],!1,null,"875214a8",null);e.default=c.exports},32:function(t,e,a){},98:function(t,e,a){"use strict";var i=a(32);a.n(i).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMveGlhbi1lc3RhdGUvYXJlYS1tYXAudnVlPzNhMmUiLCJ3ZWJwYWNrOi8vL3NyYy94aWFuLWVzdGF0ZS9hcmVhLW1hcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3hpYW4tZXN0YXRlL2FyZWEtbWFwLnZ1ZT9mNTFkIiwid2VicGFjazovLy8uL3NyYy94aWFuLWVzdGF0ZS9hcmVhLW1hcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3hpYW4tZXN0YXRlL2FyZWEtbWFwLnZ1ZT81Yjc5Il0sIm5hbWVzIjpbImd4X2xvY2F0aW9uIiwiZGlzcGxheVN0cmljdENvZGUiLCJkYXRhIiwiZ2FyZGVucyIsImRyaXZlUm91dGVzIiwibWFwT2JqIiwicGF0aE9iaiIsImNvbXB1dGVkIiwidGhpcyIsIl9pbml0TWFwU2NyaXB0IiwiX2luaXRNYXBVaSIsIl9pbml0R2FyZGVucyIsIl9pbml0RHJpdmVSb3V0ZSIsInNldFRpbWVvdXQiLCJhc3luYyIsIm1ldGhvZHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIndpbmRvdyIsIm9uTG9hZCIsIl9pbml0TWFwQ29udGFpbmVyIiwibWFwU2NyaXB0RWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ3hfbG9jYXRpb25fbnVtIiwiX2luaXRMb2NhdGlvbiIsImRlc19sb2NhdGlvbl9udW0iLCJnZXRDdXJBcmVhIiwibG9jYXRpb24iLCJBTWFwIiwiTWFwIiwiem9vbSIsImNlbnRlciIsIm1hcFN0eWxlIiwidWlTY3JpcHRFbCIsInRoYXQiLCJvbmxvYWQiLCJBTWFwVUkiLCJsb2FkVUkiLCJTaW1wbGVNYXJrZXIiLCJpY29uVGhlbWUiLCJpY29uU3R5bGUiLCJtYXAiLCJwb3NpdGlvbiIsImxhYmVsIiwiY29udGVudCIsIm9mZnNldCIsIlBpeGVsIiwicmVxdWVzdCIsImxvYWQiLCJQYXRoU2ltcGxpZmllciIsInpJbmRleCIsImdldFBhdGgiLCJwYXRoRGF0YSIsInBhdGhJbmRleCIsInBhdGgiLCJyZW5kZXJPcHRpb25zIiwicmVuZGVyQWxsUG9pbnRzSWZOdW1iZXJCZWxvdyIsInNldERhdGEiLCJjcmVhdGVQYXRoTmF2aWdhdG9yIiwibG9vcCIsInNwZWVkIiwic3RhcnQiLCJkaXN0cmljdEV4cGxvcmVyIiwiRGlzdHJpY3RFeHBsb3JlciIsImNvbG9ycyIsImNvZGUiLCJpbmRleCIsImxvYWRBcmVhTm9kZSIsInJlbmRlclN1YkZlYXR1cmVzIiwiYXJlYU5vZGUiLCJjdXJzb3IiLCJidWJibGUiLCJzdHJva2VDb2xvciIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXZWlnaHQiLCJmaWxsQ29sb3IiLCJmaWxsT3BhY2l0eSIsInJlbmRlclBhcmVudEZlYXR1cmUiLCJsb2NhdGlvblN0ciIsInNwbGl0IiwicG9seWxpbmUiLCJsb2NhdGlvbkl0ZW0iLCJOdW1iZXIiLCJjb21wb25lbnQiLCJfdm0iLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwibGVuZ3RoIiwiX2wiLCJnYXJkZW4iLCJrZXkiLCJfdiIsIl9zIiwibmFtZSIsImRpc3RhbmNlIiwiX2UiLCJhdHRycyJdLCJtYXBwaW5ncyI6ImtHQUFBLEksZUNnQkEsTUFDTUEsRUFBYywrQkFDZEMsRUFBb0IsQ0FDMUIsT0FDQSxPQUNBLFFBS0EsSUMxQndMLEVEMEJ4TCxDQUNFQyxLQUFJLEtBQ0ssQ0FDTEMsUUFBUyxHQUNUQyxZQUFhLEdBQ2JDLE9BQVEsS0FDUkMsUUFBUyxPQUdiQyxTQUFVLElBQ1osK0NBRUUsc0JBQ1FDLEtBQUtDLHVCQUNMRCxLQUFLRSxtQkFJTEYsS0FBS0csZUFHWEgsS0FBS0ksa0JBQ0xDLFdBQVdDLFlBQWdCLE1BRTdCQyxRQUFTLENBQ1AsdUJBQ0UsT0FBTyxJQUFJQyxRQUFRLENBQUNDLEVBQVNDLEtBQzNCQyxPQUFPQyxPQUFTTixVQUNkTixLQUFLYSxvQkFDRUosS0FFVCxJQUFJSyxF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ZmlsZSI6ImF3YXJkX2Rpc3QvanMvMjYuZDc3OTI3OGRiYzEwYTU4ZTQ0MWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtYXAtd3JhcHBlclwifSxbKF92bS5nYXJkZW5zICYmIF92bS5nYXJkZW5zLmxlbmd0aCA+IDApP19jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6XCJnYXJkZW5cIn0sX3ZtLl9sKChfdm0uZ2FyZGVucyksZnVuY3Rpb24oZ2FyZGVuLGtleSl7cmV0dXJuIF9jKCdzZWN0aW9uJyx7a2V5OmtleSxzdGF0aWNDbGFzczpcImdhcmRlbi1pdGVtXCJ9LFtfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOlwiZ2FyZGVuLWl0ZW0taWNvblwifSxbX3ZtLl92KF92bS5fcyhrZXkgKyAxKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6XCJnYXJkZW4taXRlbS1sYWJlbFwifSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoZ2FyZGVuLm5hbWUpK1wiLOi3neemu1wiK192bS5fcyhnYXJkZW4uZGlzdGFuY2UpK1wi57GzXFxuICAgICAgXCIpXSldKX0pLDApOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcIm1hcC1jb250YWluZXJcIixhdHRyczp7XCJpZFwiOlwibWFwLWNvbnRhaW5lclwifX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwibWFwLXdyYXBwZXJcIj5cclxuICAgIDxzZWN0aW9uIGNsYXNzPVwiZ2FyZGVuXCIgdi1pZj1cImdhcmRlbnMgJiYgZ2FyZGVucy5sZW5ndGggPiAwXCI+XHJcbiAgICAgIDxzZWN0aW9uIHYtZm9yPVwiKGdhcmRlbiwga2V5KSBpbiBnYXJkZW5zXCIgOmtleT1cImtleVwiIGNsYXNzPVwiZ2FyZGVuLWl0ZW1cIj5cclxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImdhcmRlbi1pdGVtLWljb25cIj57eyBrZXkgKyAxIH19PC9zZWN0aW9uPlxyXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiZ2FyZGVuLWl0ZW0tbGFiZWxcIj5cclxuICAgICAgICAgIHt7IGdhcmRlbi5uYW1lIH19LOi3neemu3t7IGdhcmRlbi5kaXN0YW5jZSB9feexs1xyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJtYXAtY29udGFpbmVyXCIgaWQ9XCJtYXAtY29udGFpbmVyXCI+PC9zZWN0aW9uPlxyXG4gIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSBcInZ1ZXhcIjtcclxuaW1wb3J0IHJlcXVlc3QgZnJvbSBcInJlcXVlc3RcIjtcclxuY29uc3QgR0RLRVkgPSBcIjE3NTY5ZWZiZDU0YTI4NGI4YmQwY2UzMzhhZTcxNjE2XCI7XHJcbmNvbnN0IGd4X2xvY2F0aW9uID0gXCIxMDguODM3MTkxMjkwMCwzNC4yMDMyMzUzNzAwXCI7IC8v6auY5paw6L2v5Lu25Zut57uP57qs5bqmXHJcbmNvbnN0IGRpc3BsYXlTdHJpY3RDb2RlID0gW1xyXG4gIDYxMDEwMyxcclxuICA2MTAxMDQsXHJcbiAgNjEwMTEzLFxyXG4gIC8vICAgNjEwMTE2LFxyXG4gIC8vIDYxMDEyNFxyXG5dOyAvL+eikeael+WMuu+8jOiOsua5luWMuu+8jOmbgeWhlOWMuu+8jOmVv+WuieWMuu+8jOWRqOiHs+WOv1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnYXJkZW5zOiBbXSxcclxuICAgICAgZHJpdmVSb3V0ZXM6IFtdLFxyXG4gICAgICBtYXBPYmo6IG51bGwsXHJcbiAgICAgIHBhdGhPYmo6IG51bGwsXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgY29tcHV0ZWQ6IHtcclxuICAgIC4uLm1hcEdldHRlcnMoXCJlc3RhdGVcIiwgW1wiZ2V0Q3VyQXJlYVwiXSksXHJcbiAgfSxcclxuICBhc3luYyBtb3VudGVkKCkge1xyXG4gICAgYXdhaXQgdGhpcy5faW5pdE1hcFNjcmlwdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5faW5pdE1hcFVpKCk7XHJcblxyXG4gICAgLy8gdGhpcy5faW5pdERpc3RyaWN0KCk7XHJcblxyXG4gICAgYXdhaXQgdGhpcy5faW5pdEdhcmRlbnMoKTtcclxuICAgIC8vIHRoaXMuX2luaXRQYXRoTG5zKCk7XHJcblxyXG4gICAgdGhpcy5faW5pdERyaXZlUm91dGUoKTtcclxuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge30sIDEwMDApO1xyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgYXN5bmMgX2luaXRNYXBTY3JpcHQoKSB7XHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgd2luZG93Lm9uTG9hZCA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuX2luaXRNYXBDb250YWluZXIoKTtcclxuICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgbWFwU2NyaXB0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICAgIG1hcFNjcmlwdEVsLmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbiAgICAgICAgbWFwU2NyaXB0RWwuc3JjID0gYGh0dHBzOi8vd2ViYXBpLmFtYXAuY29tL21hcHM/dj0xLjQuMTUma2V5PSR7R0RLRVl9JmNhbGxiYWNrPW9uTG9hZGA7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChtYXBTY3JpcHRFbCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIF9pbml0TWFwQ29udGFpbmVyKCkge1xyXG4gICAgICBsZXQgZ3hfbG9jYXRpb25fbnVtID0gdGhpcy5faW5pdExvY2F0aW9uKGd4X2xvY2F0aW9uKTtcclxuICAgICAgbGV0IGRlc19sb2NhdGlvbl9udW0gPSB0aGlzLl9pbml0TG9jYXRpb24odGhpcy5nZXRDdXJBcmVhLmxvY2F0aW9uKTtcclxuICAgICAgdGhpcy5tYXBPYmogPSBuZXcgQU1hcC5NYXAoXCJtYXAtY29udGFpbmVyXCIsIHtcclxuICAgICAgICB6b29tOiAxMSxcclxuICAgICAgICBjZW50ZXI6IFtcclxuICAgICAgICAgIChOdW1iZXIoZ3hfbG9jYXRpb25fbnVtWzBdKSArIE51bWJlcihkZXNfbG9jYXRpb25fbnVtWzBdKSkgLyAyLFxyXG4gICAgICAgICAgKE51bWJlcihneF9sb2NhdGlvbl9udW1bMV0pICsgTnVtYmVyKGRlc19sb2NhdGlvbl9udW1bMV0pKSAvIDIsXHJcbiAgICAgICAgXSxcclxuICAgICAgICBtYXBTdHlsZTogXCJhbWFwOi8vc3R5bGVzL2xpZ2h0XCIsIC8v6K6+572u5Zyw5Zu+55qE5pi+56S65qC35byPXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBfaW5pdE1hcFVpKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIC8vIGdkIHNjcmlwdCB1aeW8leWFpVxyXG4gICAgICAgIGxldCB1aVNjcmlwdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuICAgICAgICB1aVNjcmlwdEVsLmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbiAgICAgICAgdWlTY3JpcHRFbC5zcmMgPSBcImh0dHBzOi8vd2ViYXBpLmFtYXAuY29tL3VpLzEuMC9tYWluLmpzP3Y9MS4wLjExXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh1aVNjcmlwdEVsKTtcclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgdWlTY3JpcHRFbC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAvLyDotbfngrnlkoznu4jngrnmoIfms6hcclxuICAgICAgICAgIEFNYXBVSS5sb2FkVUkoW1wib3ZlcmxheS9TaW1wbGVNYXJrZXJcIl0sIGZ1bmN0aW9uKFNpbXBsZU1hcmtlcikge1xyXG4gICAgICAgICAgICBuZXcgU2ltcGxlTWFya2VyKHtcclxuICAgICAgICAgICAgICBpY29uVGhlbWU6IFwiZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICAgIGljb25TdHlsZTogXCJvcmFuZ2VcIixcclxuICAgICAgICAgICAgICBtYXA6IHRoYXQubWFwT2JqLFxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGF0Ll9pbml0TG9jYXRpb24oZ3hfbG9jYXRpb24pLFxyXG4gICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIumrmOaWsOi9r+S7tuWbrVwiLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgQU1hcC5QaXhlbCgtMTAsIC0yMCksXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBuZXcgU2ltcGxlTWFya2VyKHtcclxuICAgICAgICAgICAgICBpY29uVGhlbWU6IFwiZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICAgIGljb25TdHlsZTogXCJvcmFuZ2VcIixcclxuICAgICAgICAgICAgICBtYXA6IHRoYXQubWFwT2JqLFxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGF0Ll9pbml0TG9jYXRpb24odGhhdC5nZXRDdXJBcmVhLmxvY2F0aW9uKSxcclxuICAgICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogdGhhdC5nZXRDdXJBcmVhLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgQU1hcC5QaXhlbCgtMTAsIC0yMCksXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIC8vIOi3r+W+hOagh+azqFxyXG4gICAgICAgICAgLy8gICB0aGlzLl9pbml0UGF0aExucygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIOWxleekuuWRqOi+ueWFrOWbrVxyXG4gICAgX2luaXRHYXJkZW5zKCkge1xyXG4gICAgICByZXF1ZXN0XHJcbiAgICAgICAgLmdldChgL3hpYW4vYXJvdW5kR2FyZGVuP29yaWdpbkxvY2F0aW9uPSR7dGhpcy5nZXRDdXJBcmVhLmxvY2F0aW9ufWApXHJcbiAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICB0aGlzLmdhcmRlbnMgPSByZXMuZGF0YTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FyZGVucyAmJiB0aGlzLmdhcmRlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgICBBTWFwVUkubG9hZFVJKFtcIm92ZXJsYXkvU3ZnTWFya2VyXCJdLCBmdW5jdGlvbihTdmdNYXJrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuZ2FyZGVucy5tYXAoKGdhcmRlbiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlID0gbmV3IFN2Z01hcmtlci5TaGFwZVtcIkNpcmNsZVwiXSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNixcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogXCIjZmZmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBcIiMxNzcyNjFcIixcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIGxldCBsYWJlbENlbnRlciA9IHNoYXBlLmdldENlbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICBuZXcgU3ZnTWFya2VyKHNoYXBlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFwOiB0aGF0Lm1hcE9iaixcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdGhhdC5faW5pdExvY2F0aW9uKGdhcmRlbi5sb2NhdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3NOYW1lczogXCJzaGFwZS1DaXJjbGVcIixcclxuICAgICAgICAgICAgICAgICAgICBpY29uTGFiZWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogaW5kZXggKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMnB4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd1Bvc2l0aW9uUG9pbnQ6IHRydWUsLy/mmK/lkKbmmL7npLptYXJrZXLkuIrnmoTnuqLngrlcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIOW8gOi9pui3r+e6v+Wbvuagt+W8j1xyXG4gICAgX2luaXRQYXRoTG5zKCkge1xyXG4gICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgIGlmICghQU1hcFVJKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJBTWFwVUkgZmFsc2VcIiwgMTc1KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgQU1hcFVJLmxvYWQoW1widWkvbWlzYy9QYXRoU2ltcGxpZmllclwiLCBcImxpYi8kXCJdLCBmdW5jdGlvbihcclxuICAgICAgICBQYXRoU2ltcGxpZmllcixcclxuICAgICAgICAkXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxldCBwYXRoT2JqID0gbmV3IFBhdGhTaW1wbGlmaWVyKHtcclxuICAgICAgICAgIHpJbmRleDogMTAwLFxyXG4gICAgICAgICAgbWFwOiB0aGF0Lm1hcE9iaixcclxuXHJcbiAgICAgICAgICBnZXRQYXRoOiAocGF0aERhdGEsIHBhdGhJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aERhdGEucGF0aDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZW5kZXJPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHJlbmRlckFsbFBvaW50c0lmTnVtYmVyQmVsb3c6IDEwMCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGF0aE9iai5zZXREYXRhKFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCLot6/nur8wXCIsXHJcbiAgICAgICAgICAgIHBhdGg6IFsuLi50aGF0LmRyaXZlUm91dGVzXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgbGV0IG5hdmcxID0gcGF0aE9iai5jcmVhdGVQYXRoTmF2aWdhdG9yKDAsIHtcclxuICAgICAgICAgIGxvb3A6IHRydWUsIC8v5b6q546v5pKt5pS+XHJcbiAgICAgICAgICBzcGVlZDogNTAwMCwgLy/lt6HoiKrpgJ/luqbvvIzljZXkvY3ljYPnsbMv5bCP5pe2XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbmF2ZzEuc3RhcnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgLy8g5bGV56S65Yy65Z+fXHJcbiAgICBfaW5pdERpc3RyaWN0KCkge1xyXG4gICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgIEFNYXBVSS5sb2FkKFtcInVpL2dlby9EaXN0cmljdEV4cGxvcmVyXCIsIFwibGliLyRcIl0sIGZ1bmN0aW9uKFxyXG4gICAgICAgIERpc3RyaWN0RXhwbG9yZXJcclxuICAgICAgKSB7XHJcbiAgICAgICAgbGV0IGRpc3RyaWN0RXhwbG9yZXIgPSBuZXcgRGlzdHJpY3RFeHBsb3Jlcih7XHJcbiAgICAgICAgICBtYXA6IHRoYXQubWFwT2JqLCAvL+WFs+iBlOeahOWcsOWbvuWunuS+i1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBjb2xvcnMgPSBbXHJcbiAgICAgICAgICBcIiMzMzY2Y2NcIixcclxuICAgICAgICAgIFwiI2RjMzkxMlwiLFxyXG4gICAgICAgICAgXCIjZmY5OTAwXCIsXHJcbiAgICAgICAgICBcIiNhYTk5MDBcIixcclxuICAgICAgICAgIFwiI2ZmMTkwMVwiLFxyXG4gICAgICAgICAgXCIjYWEwMTAxXCIsXHJcbiAgICAgICAgICBcInJlZFwiLFxyXG4gICAgICAgICAgXCJncmVlblwiLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgZGlzcGxheVN0cmljdENvZGUubWFwKChjb2RlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgZGlzdHJpY3RFeHBsb3Jlci5sb2FkQXJlYU5vZGUoY29kZSwgZnVuY3Rpb24oZXJyb3IsIGFyZWFOb2RlKSB7XHJcbiAgICAgICAgICAgIGRpc3RyaWN0RXhwbG9yZXIucmVuZGVyU3ViRmVhdHVyZXMoYXJlYU5vZGUsIGZ1bmN0aW9uKGZlYXR1cmUsIGkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIixcclxuICAgICAgICAgICAgICAgIGJ1YmJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBcImJsdWVcIiwgLy/nur/popzoibJcclxuICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDEsIC8v57q/6YCP5piO5bqmXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDEsIC8v57q/5a69XHJcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3I6IFwicmVkXCIsIC8v5aGr5YWF6ImyXHJcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC4zNSwgLy/loavlhYXpgI/mmI7luqZcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGlzdHJpY3RFeHBsb3Jlci5yZW5kZXJQYXJlbnRGZWF0dXJlKGFyZWFOb2RlLCB7XHJcbiAgICAgICAgICAgICAgY3Vyc29yOiBcImRlZmF1bHRcIixcclxuICAgICAgICAgICAgICBidWJibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IG51bGwsIC8v57q/6aKc6ImyXHJcbiAgICAgICAgICAgICAgc3Ryb2tlT3BhY2l0eTogMSwgLy/nur/pgI/mmI7luqZcclxuICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDEsIC8v57q/5a69XHJcbiAgICAgICAgICAgICAgZmlsbENvbG9yOiBjb2xvcnNbaW5kZXhdLCAvL+Whq+WFheiJslxyXG4gICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjM1LCAvL+Whq+WFhemAj+aYjuW6plxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5Yid5aeL5YyW6am+6L2m6Lev57q/5pWw5o2uXHJcbiAgICBfaW5pdERyaXZlUm91dGUoKSB7XHJcbiAgICAgIHJlcXVlc3RcclxuICAgICAgICAuZ2V0KFxyXG4gICAgICAgICAgYC94aWFuL2RyaXZpbmdSb3V0ZT9vcmlnaW5Mb2NhdGlvbj0ke3RoaXMuZ2V0Q3VyQXJlYS5sb2NhdGlvbn0mZGVzdGluYXRpb249JHtneF9sb2NhdGlvbn1gXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN0ZXBzICYmIHJlcy5kYXRhLnN0ZXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICByZXMuZGF0YS5zdGVwcy5mb3JFYWNoKChzdGVwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RlcC5wb2x5bGluZSkge1xyXG4gICAgICAgICAgICAgICAgICBsZXQgYXJyTG9jYXRpb24gPSB0aGlzLl9mb3JtYXRQb2x5bGluZShzdGVwLnBvbHlsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5kcml2ZVJvdXRlcy5wdXNoKC4uLnRoaXMuX2Zvcm1hdFBvbHlsaW5lKHN0ZXAucG9seWxpbmUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB0aGlzLl9pbml0UGF0aExucygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIOi+heWKqeWHveaVsFxyXG4gICAgX2luaXRMb2NhdGlvbihsb2NhdGlvblN0cikge1xyXG4gICAgICByZXR1cm4gbG9jYXRpb25TdHIuc3BsaXQoXCIsXCIpO1xyXG4gICAgfSxcclxuICAgIF9mb3JtYXRQb2x5bGluZShwb2x5bGluZSkge1xyXG4gICAgICBsZXQgbG9jYXRpb25TdHIgPSBwb2x5bGluZS5zcGxpdChcIjtcIik7XHJcbiAgICAgIGxldCBsb2NhdGlvbkFyciA9IGxvY2F0aW9uU3RyLm1hcCgobG9jYXRpb24pID0+IHtcclxuICAgICAgICBsZXQgbG9jYXRpb25JdGVtID0gdGhpcy5faW5pdExvY2F0aW9uKGxvY2F0aW9uKTtcclxuICAgICAgICByZXR1cm4gW051bWJlcihsb2NhdGlvbkl0ZW1bMF0pLCBOdW1iZXIobG9jYXRpb25JdGVtWzFdKV07XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gbG9jYXRpb25BcnI7XHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbi5tYXAtY29uIHtcclxuICBwYWRkaW5nOiAwcHggNXB4IDVweDtcclxuICBmbGV4OiAxO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG4uZ2FyZGVuIHtcclxuICBmbGV4LXNocmluazogMTtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcclxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICBtYXgtaGVpZ2h0OiAxNjBweDtcclxuICBvdmVyZmxvdzogc2Nyb2xsO1xyXG4gICYtaXRlbSB7XHJcbiAgICBsaW5lLWhlaWdodDogMjZweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgfVxyXG4gICYtaXRlbS1pY29uIHtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgYmFja2dyb3VuZDogIzE3NzI2MTtcclxuICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICBtYXJnaW46IDNweCAxMHB4O1xyXG4gIH1cclxuICAmLWl0ZW0tbGFiZWwge1xyXG4gIH1cclxufVxyXG4ubWFwLWNvbnRhaW5lciB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgZmxleDogMTtcclxuICBvdmVyZmxvdzogc2Nyb2xsO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufVxyXG4uYW1hcC1tYXJrZXJzIHtcclxuICAvKiBib3JkZXI6IDFweCBibGFjayBzb2xpZCAhaW1wb3J0YW50OyAqL1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlICFpbXBvcnRhbnQ7XHJcbn1cclxuPC9zdHlsZT5cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTg3NTIxNGE4JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2FyZWEtbWFwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTg3NTIxNGE4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiODc1MjE0YThcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODc1MjE0YTgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS00LTAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYXJlYS1tYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ODc1MjE0YTgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==